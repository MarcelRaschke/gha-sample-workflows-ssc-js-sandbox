{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "MicroFocus Fortify SCA",
          "version": "20.1.1.0007",
          "rules": [
            {
              "id": "C65FD345-0487-495D-B707-26EE81BCFC60",
              "guid": "C65FD345-0487-495D-B707-26EE81BCFC60",
              "name": "Input Validation and Representation/Value Shadowing",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} accesses a variable in an ambiguous way at line {PrimaryLocation.line}, which can leave the program open to attack.\r\nThe program accesses a variable in an ambiguous way, which can leave it open to attack."
              },
              "fullDescription": {
                "text": "The `HttpRequest` class provides programmatic access to variables from the `QueryString`, `Form`, `Cookies` or `ServerVariables` collections in the form of an array access (e.g. `Request[\"myParam\"]`). When more than one variable exists with the same name, the .NET framework returns the value of the variable that appears first when the collections are searched in the following order: `QueryString`, `Form`, `Cookies` then `ServerVariables`. Since `QueryString` comes first in the search order, it is possible for `QueryString` parameters to supersede values from forms, cookies, and server variables. Similarly, form values can supersede variables in the `Cookies` and `ServerVariables` collections and variables from the `Cookies` collection can supersede those from `ServerVariables`.\r\n\r\nIn this case, the value of a variable accessed from an `HttpRequest` object at line {PrimaryLocation.line} in {PrimaryLocation.file} can be superseded by an attacker.\r\r\n\r\n**Example 1:** Imagine a banking application temporarily stores a user's email address in a cookie and reads this value when it wants to contact the user. The following code reads the cookie value and sends an account balance to the specified email address.\n`\n...\n    String toAddress = Request[\"email\"];        //Expects cookie value\n    Double balance = GetBalance(userID);\n    SendAccountBalance(toAddress, balance);\n...\n`\nAssume the code in `Example 1` is executed when visiting `http://www.example.com/GetBalance.aspx`. If an attacker can cause an authenticated user to click a link that requests `http://www.example.com/GetBalance.aspx?email=evil%40evil.com`, an email with the user's account balance will be sent to `evil@evil.com`."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "None",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "3.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "50F6C4E3-5C64-46BB-8691-B92CB3860E81",
              "guid": "50F6C4E3-5C64-46BB-8691-B92CB3860E81",
              "name": "Encapsulation/System Information Leak/External",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} reveals system data or debugging information by calling {PrimaryCall.name} on line {PrimaryLocation.line}. The information revealed by {PrimaryCall.name} could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\r\n\r\nIn this case, the data from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line} leaves the program through <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code leaks Exception information in the HTTP response:\r\n\r\n`\ntry\n{\n  ...\n}\ncatch (Exception e)\n{\n  Response.Write(e.ToString());\n}\n`\r\n\r\nThis information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In `Example 1`, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "215",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "489",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "E195928D-864E-4872-B408-B298E5FD0AAC",
              "guid": "E195928D-864E-4872-B408-B298E5FD0AAC",
              "name": "Encapsulation/System Information Leak/External",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} might reveal system data or debugging information by calling {PrimaryCall.name} on line {PrimaryLocation.line}. The information revealed by {PrimaryCall.name} could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An internal information leak occurs when system data or debugging information is sent to a local file, console, or screen via printing or logging.\r\n\r\nIn this case, <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> is called in {PrimaryLocation.file} at line {PrimaryLocation.line}.\r\n\r\n**Example 1:** The following code leaks Exception information in the HTTP response:\r\n\r\n`\ntry\n{\n  ...\n}\ncatch (Exception e)\n{\n  Response.Write(e.ToString());\n}\n`\r\n\r\nThis information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In `Example 1`, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "215",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "489",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "8F945ECB-E1B8-48EC-82DB-783764F464FF",
              "guid": "8F945ECB-E1B8-48EC-82DB-783764F464FF",
              "name": "Encapsulation/System Information Leak",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} reveals system data or debugging information by calling {PrimaryCall.name} on line {PrimaryLocation.line}. The information revealed by {PrimaryCall.name} could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.\r\n\r\nIn this case, the data from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line} leaves the program through <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code constructs a database connection string, uses it to create a new connection to the database, and writes it to the console.\r\n\r\n`\nstring cs=\"database=northwind;server=mySQLServer...\";\nSqlConnection conn=new SqlConnection(cs);\n...\nConsole.Writeline(cs);\n`\r\n\r\nDepending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from &quot;Standard error&quot; or &quot;Standard output&quot; into a file or another program. Alternatively the system that the program runs on could have a remote logging mechanism such as a &quot;syslog&quot; server that will send the logs to a remote device. During development you will have no way of knowing where this information may end up being displayed.\r\n\r\nIn some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In `Example 1`, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "4A830609-D846-4248-BD71-4F58A3FCF79C",
              "guid": "4A830609-D846-4248-BD71-4F58A3FCF79C",
              "name": "Input Validation and Representation/Header Manipulation",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} includes unvalidated data in an HTTP response header on line {PrimaryLocation.line}. This enables attacks such as cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.\r\nIncluding unvalidated data in an HTTP response header can enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect."
              },
              "fullDescription": {
                "text": "Header Manipulation vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source, most frequently an HTTP request.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n2. The data is included in an HTTP response header sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nAs with many software security vulnerabilities, Header Manipulation is a means to an end, not an end in itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an HTTP response header.\r\n\r\nOne of the most common Header Manipulation attacks is HTTP Response Splitting. To mount a successful HTTP Response Splitting exploit, the application must allow input that contains CR (carriage return, also given by %0d or \\r) and LF (line feed, also given by %0a or \\n)characters into the header. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but also allows them to create additional responses entirely under their control.\r\n\r\nMany of today's modern application servers and frameworks will prevent the injection of malicious characters into HTTP headers. For example, recent versions of Microsoft's .NET framework will convert CR, LF, and NULL characters to %0d, %0a and %00 when they are sent to the `HttpResponse.AddHeader()` method. If you are using the latest .NET framework that prevents setting headers with new line characters, then your application might not be vulnerable to HTTP Response Splitting. However, solely filtering for new line characters can leave an application vulnerable to Cookie Manipulation or Open Redirects, so care must still be taken when setting HTTP headers with user input.\r\n\r\n**Example:** The following code segment reads the name of the author of a weblog entry, `author`, from an HTTP request and sets it in a cookie header of an HTTP response.\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Author;\n...\nstring author = Author.Text;\nCookie cookie = new Cookie(\"author\", author);\n...\n`\r\n\r\nAssuming a string consisting of standard alphanumeric characters, such as \"Jane Smith\", is submitted in the request the HTTP response including this cookie might take the following form:\r\n\r\n`\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Jane Smith\n...\n`\r\n\r\nHowever, because the value of the cookie is formed of unvalidated user input the response will only maintain this form if the value submitted for `Author.Text` does not contain any CR and LF characters. If an attacker submits a malicious string, such as \"Wiley Hacker\\r\\nHTTP/1.1 200 OK\\r\\n...\", then the HTTP response would be split into two responses of the following form:\r\n\r\n`\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Wiley Hacker\r\n\r\nHTTP/1.1 200 OK\n...\n`\r\n\r\nClearly, the second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability of attacker to construct arbitrary HTTP responses permits a variety of resulting attacks, including: cross-user defacement, web and browser cache poisoning, cross-site scripting, and page hijacking.\r\n\r\n**Cross-User Defacement:** An attacker will be able to make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server. This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server. In the best case, an attacker may leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.\r\n\r\n**Cache Poisoning:** The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although only the user of the local browser instance will be affected.\r\n\r\n**Cross-Site Scripting:** Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users. Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.\r\n\r\n**Page Hijacking:** In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead. By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker may cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.\r\n\r\n**Cookie Manipulation:** When combined with attacks like Cross-Site Request Forgery, attackers may change, add to, or even overwrite a legitimate user's cookies.\r\n\r\n**Open Redirect:** Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "113",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "3.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "DE313A0E-CDD6-488F-B0A7-EE6EFCE3DFA6",
              "guid": "DE313A0E-CDD6-488F-B0A7-EE6EFCE3DFA6",
              "name": "Encapsulation/System Information Leak/External",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} reveals system data or debugging information by calling {PrimaryCall.name} on line {PrimaryLocation.line}. The information revealed by {PrimaryCall.name} could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\r\n\r\nIn this case, the data from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line} leaves the program through <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code leaks Exception information in the HTTP response:\r\n\r\n`\ntry\n{\n  ...\n}\ncatch (Exception e)\n{\n  Response.Write(e.ToString());\n}\n`\r\n\r\nThis information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In `Example 1`, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "215",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "489",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "76EB48CD-B65E-4384-871A-6650D1ECC038",
              "guid": "76EB48CD-B65E-4384-871A-6650D1ECC038",
              "name": "Encapsulation/System Information Leak/Internal",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} reveals system data or debugging information by calling {PrimaryCall.name} on line {PrimaryLocation.line}. The information revealed by {PrimaryCall.name} could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An internal information leak occurs when system data or debugging information is sent to a local file, console, or screen via printing or logging.\r\n\r\nIn this case, the data from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line} leaves the program through <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code constructs a database connection string, uses it to create a new connection to the database, and writes it to the console.\r\n\r\n`\nstring cs=\"database=northwind;server=mySQLServer...\";\nSqlConnection conn=new SqlConnection(cs);\n...\nConsole.Writeline(cs);\n`\r\n\r\nDepending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In `Example 1`, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "1.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "C59C294C-7432-461C-926A-20588722743B",
              "guid": "C59C294C-7432-461C-926A-20588722743B",
              "name": "Input Validation and Representation/Header Manipulation",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} includes unvalidated data in an HTTP response header on line {PrimaryLocation.line}. This enables attacks such as cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.\r\nIncluding unvalidated data in an HTTP response header can enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect."
              },
              "fullDescription": {
                "text": "Header Manipulation vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source, most frequently an HTTP request.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n2. The data is included in an HTTP response header sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nAs with many software security vulnerabilities, Header Manipulation is a means to an end, not an end in itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an HTTP response header.\r\n\r\nOne of the most common Header Manipulation attacks is HTTP Response Splitting. To mount a successful HTTP Response Splitting exploit, the application must allow input that contains CR (carriage return, also given by %0d or \\r) and LF (line feed, also given by %0a or \\n)characters into the header. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but also allows them to create additional responses entirely under their control.\r\n\r\nMany of today's modern application servers and frameworks will prevent the injection of malicious characters into HTTP headers. For example, recent versions of Microsoft's .NET framework will convert CR, LF, and NULL characters to %0d, %0a and %00 when they are sent to the `HttpResponse.AddHeader()` method. If you are using the latest .NET framework that prevents setting headers with new line characters, then your application might not be vulnerable to HTTP Response Splitting. However, solely filtering for new line characters can leave an application vulnerable to Cookie Manipulation or Open Redirects, so care must still be taken when setting HTTP headers with user input.\r\n\r\n**Example:** The following code segment reads the name of the author of a weblog entry, `author`, from an HTTP request and sets it in a cookie header of an HTTP response.\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Author;\n...\nstring author = Author.Text;\nCookie cookie = new Cookie(\"author\", author);\n...\n`\r\n\r\nAssuming a string consisting of standard alphanumeric characters, such as \"Jane Smith\", is submitted in the request the HTTP response including this cookie might take the following form:\r\n\r\n`\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Jane Smith\n...\n`\r\n\r\nHowever, because the value of the cookie is formed of unvalidated user input the response will only maintain this form if the value submitted for `Author.Text` does not contain any CR and LF characters. If an attacker submits a malicious string, such as \"Wiley Hacker\\r\\nHTTP/1.1 200 OK\\r\\n...\", then the HTTP response would be split into two responses of the following form:\r\n\r\n`\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Wiley Hacker\r\n\r\nHTTP/1.1 200 OK\n...\n`\r\n\r\nClearly, the second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability of attacker to construct arbitrary HTTP responses permits a variety of resulting attacks, including: cross-user defacement, web and browser cache poisoning, cross-site scripting, and page hijacking.\r\n\r\n**Cross-User Defacement:** An attacker will be able to make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server. This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server. In the best case, an attacker may leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.\r\n\r\n**Cache Poisoning:** The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although only the user of the local browser instance will be affected.\r\n\r\n**Cross-Site Scripting:** Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users. Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.\r\n\r\n**Page Hijacking:** In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead. By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker may cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.\r\n\r\n**Cookie Manipulation:** When combined with attacks like Cross-Site Request Forgery, attackers may change, add to, or even overwrite a legitimate user's cookies.\r\n\r\n**Open Redirect:** Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "113",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Impact": "2",
                "Probability": "2",
                "Accuracy": "4.0"
              }
            },
            {
              "id": "43DDD9F2-AE21-469B-B8B9-B91B3793A761",
              "guid": "43DDD9F2-AE21-469B-B8B9-B91B3793A761",
              "name": "Time and State/ASP.NET Bad Practices/Non-Serializable Object Stored in Session",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} stores a non-serializable object as an `HttpSessionState` attribute on line {PrimaryLocation.line}, which can damage application reliability.\r\nStoring a non-serializable object as an `HttpSessionState` attribute can damage application reliability."
              },
              "fullDescription": {
                "text": "By default, ASP.NET servers store the `HttpSessionState` object, its attributes and any objects they reference in memory. This model limits active session state to what can be accommodated by the system memory of a single machine. In order to expand capacity beyond these limitations, servers are frequently configured to persistent session state information, which both expands capacity and permits the replication across multiple machines to improve overall performance. In order to persist its session state, the server must serialize the `HttpSessionState` object, which requires that all objects stored in it be serializable.\r\n\r\nIn order for the session to be serialized correctly, all objects the application stores as session attributes must declare the `[Serializable]` attribute. Additionally, if the object requires custom serialization methods, it must also implement the `ISerializable` interface.\r\n\r\n**Example 1:** The following class adds itself to the session, but since it is not serializable, the session cannot be serialized correctly.\r\n\r\n`\npublic class DataGlob {\n   String GlobName;\n   String GlobValue;\r\n\r\n   public void AddToSession(HttpSessionState session) {\n     session[\"glob\"] = this;\n   }\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "579",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "3.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "24B355D6-DFE3-47F7-81E3-EB73CD5422D5",
              "guid": "24B355D6-DFE3-47F7-81E3-EB73CD5422D5",
              "name": "Input Validation and Representation/Denial of Service/Regular Expression",
              "shortDescription": {
                "text": "Untrusted data is passed to the application and used as a regular expression. This can cause the thread to overconsume CPU resources."
              },
              "fullDescription": {
                "text": "There is a vulnerability in implementations of regular expression evaluators and related methods that can cause the thread to hang when evaluating regular expressions that contain a grouping expression that is itself repeated. Additionally, any regular expression that contains alternate subexpressions that overlap one another can also be exploited. This defect can be used to execute a Denial of Service (DoS) attack.\n**Example:**\n`\n  (e+)+\n  ([a-zA-Z]+)*\n  (e|ee)+\n`\nThere are no known regular expression implementations which are immune to this vulnerability. All platforms and languages are vulnerable to this attack."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "185",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "730",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "3.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "73FA2402-ADE4-435E-930C-99CAE22288A9",
              "guid": "73FA2402-ADE4-435E-930C-99CAE22288A9",
              "name": "Input Validation and Representation/Command Injection",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} calls {PrimaryCall.name} to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
              },
              "fullDescription": {
                "text": "Command injection vulnerabilities take two forms:\r\n\r\n- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\r\n\r\n- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\r\n\r\nIn this case, we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:\r\n\r\n1. Data enters the application from an untrusted source.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n2. The data is used as or as part of a string representing a command that is executed by the application.\r\n\r\nIn this case, the command is executed by <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.\r\n\r\n**Example 1:** The following code from a system utility uses the system property `APPHOME` to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.\r\n\r\n`\n...\nstring val = Environment.GetEnvironmentVariable(\"APPHOME\");\nstring cmd = val + INITCMD;\nProcessStartInfo startInfo = new ProcessStartInfo(cmd);\nProcess.Start(startInfo);\n...\n`\r\n\r\nThe code in `Example 1` allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property `APPHOME` to point to a different path containing a malicious version of `INITCMD`. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property `APPHOME`, then they can fool the application into running malicious code and take control of the system.\r\n\r\n**Example 2:** The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the `rman` utility and then run a `cleanup.bat` script to delete some temporary files. The script `rmanDB.bat` accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.\r\n\r\n`\n...\nstring btype = BackupTypeField.Text;\nstring cmd = \"cmd.exe /K \\\"c:\\\\util\\\\rmanDB.bat\"\n              + btype + \"&amp;&amp;c:\\\\util\\\\cleanup.bat\\\"\"));\nProcess.Start(cmd);\n...\n`\r\n\r\nThe problem here is that the program does not do any validation on `BackupTypeField`. Typically the `Process.Start()` function will not execute multiple commands, but in this case the program first runs the `cmd.exe` shell in order to run multiple commands with a single call to `Process.Start()`. After the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form `\"&amp;&amp; del c:\\\\dbms\\\\*.*\"`, then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.\r\n\r\n**Example 3:** The following code is from a web application that gives users access to an interface through which they can update their password on the system. Part of the process for updating passwords in this network environment is to run an `update.exe` command, as follows:\r\n\r\n`\n...\nProcess.Start(\"update.exe\");\n...\n`\r\n\r\nThe problem here is that the program does not specify an absolute path and fails to clean its environment prior to executing the call to `Process.start()`. If an attacker can modify the `$PATH` variable to point to a malicious binary called `update.exe` and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's `update.exe` will now be run with these privileges, possibly giving the attacker complete control of the system."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "77",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "78",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "5.0",
                "Probability": "4.0"
              }
            },
            {
              "id": "638B1E12-45C7-47EF-8345-37D99BD995D2",
              "guid": "638B1E12-45C7-47EF-8345-37D99BD995D2",
              "name": "Errors/Poor Error Handling/Overly Broad Catch",
              "shortDescription": {
                "text": "The catch block at {PrimaryLocation.file} line {PrimaryLocation.line} handles a broad swath of exceptions,  potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.\r\nThe catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program."
              },
              "fullDescription": {
                "text": "Multiple catch blocks can get repetitive, but \"condensing\" catch blocks by catching a high-level class such as `Exception` can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of .NET's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.\r\n\r\n**Example:** The following code excerpt handles three types of exceptions in an identical fashion.\r\n\r\n`\n  try {\n    DoExchange();\n  }\n  catch (IOException e) {\n    logger.Error(\"DoExchange failed\", e);\n  }\n  catch (FormatException e) {\n    logger.Error(\"DoExchange failed\", e);\n  }\n  catch (TimeoutException e) {\n    logger.Error(\"DoExchange failed\", e);\n  }\n`\r\n\r\nAt first blush, it may seem preferable to deal with these exceptions in a single catch block, as follows:\r\n\r\n`\n  try {\n    DoExchange();\n  }\n  catch (Exception e) {\n    logger.Error(\"DoExchange failed\", e);\n  }\n`\r\n\r\nHowever, if `DoExchange()` is modified to throw a new type of exception that should be handled in some different kind of way, the broad catch block will prevent the compiler from pointing out the situation. Further, the new catch block will now also handle exceptions of types `ApplicationException` and `NullReferenceException`, which is not the programmer's intent."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "396",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
              "guid": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
              "name": "Input Validation and Representation/Cross-Site Scripting/Persistent",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} sends unvalidated data to a web browser on line {PrimaryLocation.line}, which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "Cross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= name %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment is functionally equivalent to `Example 1`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + name);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\nThese code examples function correctly when the values of `name` are well-behaved, but they do nothing to prevent exploits if they are not. This code can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\n**Example 3:** The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Request.Form[\"Login\"] %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** The following ASP.NET code segment shows the programmatic way to implement `Example 3`.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\n`\nstring ID = Request.Form[\"Login\"];\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\nAs in `Example 1` and `Example 2`, these examples operate correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- As in `Example 3` and `Example 4`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "79",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "80",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "2E4B2E3C-ECDA-4F1F-9D6F-BEEB958B8015",
              "guid": "2E4B2E3C-ECDA-4F1F-9D6F-BEEB958B8015",
              "name": "API Abuse/Missing Check against Null",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} can dereference a null-pointer because it does not check the return value of {PrimaryCall.name}, which might return `null`.\r\nThe program might dereference a null-pointer because it does not check the return value of a function that might return `null`."
              },
              "fullDescription": {
                "text": "Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.\r\n\r\nTwo dubious assumptions that are easy to spot in code are \"this function call can never fail\" and \"it doesn't matter if this function call fails\". When a programmer ignores the return value from a function, they implicitly state that they are operating under one of these assumptions.\r\n\r\nIn this case, an earlier return value is used without being checked in {PrimaryLocation.file} at line {PrimaryLocation.line}.\r\n\r\n**Example 1:**  The following code does not check to see if the string returned by the `Item` property is `null` before calling the member function `Equals()`, potentially causing a `null` dereference.\r\n\r\n`\nstring itemName = request.Item(ITEM_NAME);\n\tif (itemName.Equals(IMPORTANT_ITEM)) {\n\t\t...\n\t}\n\t...\n`\r\n\r\nThe traditional defense of this coding error is:\r\n\r\n\"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a `null` value.\"\r\n\r\nBut attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "253",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "690",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "50F5AB4A-6BA7-46AB-B1C0-09355D265681",
              "guid": "50F5AB4A-6BA7-46AB-B1C0-09355D265681",
              "name": "Input Validation and Representation/Cross-Site Scripting/Reflected",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} sends unvalidated data to a web browser on line {PrimaryLocation.line}, which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "Cross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Request.Form[\"Login\"] %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment shows the programmatic way to implement `Example 1`.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\n`\nstring ID = Request.Form[\"Login\"];\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\nThe code in these examples operates correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\n**Example 3:** The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= name %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** The following ASP.NET code segment is functionally equivalent to `Example 3`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + name);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\nAs in `Example 1` and `Example 2`, these code examples function correctly when the values of `name` are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- As in `Example 3` and `Example 4`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "79",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "80",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "84B4BA4A-8DCC-45B3-80D3-016310E45827",
              "guid": "84B4BA4A-8DCC-45B3-80D3-016310E45827",
              "name": "Input Validation and Representation/Path Manipulation",
              "shortDescription": {
                "text": "Attackers are able to control the file system path argument to {PrimaryCall.name} at {PrimaryLocation.file} line {PrimaryLocation.line}, which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
              },
              "fullDescription": {
                "text": "Path manipulation errors occur when the following two conditions are met:\r\n\r\n1. An attacker is able to specify a path used in an operation on the file system.\r\n\r\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\r\n\r\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\r\n\r\nIn this case, the attacker may specify the value that enters the program at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}, and this value is used to access a file system resource at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n**Example 1:** The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker may provide a file name like \"`..\\\\..\\\\Windows\\\\System32\\\\krnl386.exe`\", which will cause the application to delete an important Windows system file.\r\n\r\n`\nString rName = Request.Item(\"reportName\");\n...\nFile.delete(\"C:\\\\users\\\\reports\\\\\" + rName);\n`\r\n\r\n**Example 2:** The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension \".txt\".\r\n\r\n`\nsr = new StreamReader(resmngr.GetString(\"sub\")+\".txt\");\nwhile ((line = sr.ReadLine()) != null) {\nConsole.WriteLine(line);\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "22",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "73",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Impact": "2",
                "Accuracy": "4.0",
                "Probability": "4.0"
              }
            },
            {
              "id": "9441E78A-8736-46EC-96D9-26F03C02276C",
              "guid": "9441E78A-8736-46EC-96D9-26F03C02276C",
              "name": "Input Validation and Representation/Connection String Parameter Pollution",
              "shortDescription": {
                "text": "The file {PrimaryLocation.file} passes unvalidated data to a database connection string on line {PrimaryLocation.line}. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
              },
              "fullDescription": {
                "text": "Connection String Parameter Pollution (CSPP) attacks consist of injecting connection string parameters into other existing parameters. This vulnerability is similar to vulnerabilities, and perhaps more well known, within HTTP environments where parameter pollution can also occur. However, it also can apply in other places such as database connection strings. If an application does not properly sanitize the user input, a malicious user may compromise the logic of the application to perform attacks from stealing credentials, to retrieving the entire database. By submitting additional parameters to an application, and if these parameters have the same name as an existing parameter, the database connection may react in one of the following ways:\r\n\r\nIt may only take the data from the first parameter\nIt may take the data from the last parameter\nIt may take the data from all parameters and concatenate them together\r\n\r\nThis may be dependent on the driver used, the database type, or even how APIs are used.\r\n\r\n**Example 1:** The following code uses input from an HTTP request to connect to a database:\r\n\r\n    `\n      ...\n      string password = Request.Form[\"db_pass\"]; //gets POST parameter 'db_pass'\n      SqlConnection DBconn = new SqlConnection(\"Data Source = myDataSource; Initial Catalog = db; User ID = myUsername; Password = \" + password + \";\");\n      ...\n    `\r\n\r\nIn this example, the programmer has not considered that an attacker could provide a `db_pass` parameter such as:\n&quot;xxx; Integrated Security = true&quot; then connection string becomes:\r\n\r\n&quot;Data Source = myDataSource; Initial Catalog = db; User ID = myUsername; Password = xxx; Integrated Security = true; &quot;\r\n\r\nThis will make the application connect to the database using the operating system account under which the application is running to bypass normal authentication. This would mean the attacker could connect to the database without a valid password and perform queries against the database directly."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "235",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "4.0",
                "Probability": "3.5"
              }
            },
            {
              "id": "CFFE6EAA-7B4A-48BB-AA56-9C7E7706721D",
              "guid": "CFFE6EAA-7B4A-48BB-AA56-9C7E7706721D",
              "name": "Security Features/Cookie Security/HTTPOnly not Set",
              "shortDescription": {
                "text": "The program creates a cookie in {PrimaryLocation.file} at line {PrimaryLocation.line}, but fails to set the `HttpOnly` property to `true`.\r\nThe program creates a cookie, but fails to set the `HttpOnly` flag to `true`."
              },
              "fullDescription": {
                "text": "All major browsers support the `HttpOnly` cookie property that prevents client-side scripts from accessing the cookie. Cross-site scripting attacks often access cookies in an attempt to steal session identifiers or authentication tokens. Without `HttpOnly` enabled, attackers have easier access to user cookies.\r\n\r\nIn this case, a cookie is set in {PrimaryLocation.file} at line {PrimaryLocation.line}, but the `HttpOnly` property is not set or is set to `false`.\r\n\r\n**Example 1:** The following code creates a cookie without setting the `HttpOnly` property.\n`\n    HttpCookie cookie = new HttpCookie(\"emailCookie\", email);\n    Response.AppendCookie(cookie);\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "1004",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "2.0",
                "Probability": "2.0"
              }
            },
            {
              "id": "A232C1F9-8B44-43A4-89DE-835653DC5803",
              "guid": "A232C1F9-8B44-43A4-89DE-835653DC5803",
              "name": "Input Validation and Representation/Open Redirect",
              "shortDescription": {
                "text": "The file {PrimaryLocation.file} passes unvalidated data to an HTTP redirect on line {PrimaryLocation.line}. Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.\r\nAllowing unvalidated input to control the URL used in a redirect can aid phishing attacks."
              },
              "fullDescription": {
                "text": "Redirects allow web applications to direct users to different pages within the same application or to external sites. Applications utilize redirects to aid in site navigation and, in some cases, to track how users exit the site. Open redirect vulnerabilities occur when a web application redirects clients to any arbitrary URL that can be controlled by an attacker.\r\n\r\nAttackers may utilize open redirects to trick users into visiting a URL to a trusted site and redirecting them to a malicious site. By encoding the URL, an attacker is able to make it more difficult for end-users to notice the malicious destination of the redirect, even when it is passed as a URL parameter to the trusted site. Open redirects are often abused as part of phishing scams to harvest sensitive end-user data.\r\n\r\nIn this case, the URL the client will be redirected to is accepted at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\nThe data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code instructs the user's browser to open a URL parsed from the `dest` request parameter when a user clicks the link.\r\n\r\n`\n    String redirect = Request[&quot;dest&quot;];\n    Response.Redirect(redirect);\n`\r\n\r\nIf a victim receives an email instructing them to follow a link to &quot;http://trusted.example.com/ecommerce/redirect.asp?dest=www.wilyhacker.com&quot;, the user might click on the link believing they would be transferred to the trusted site. However, when the victim clicks the link, the code in `Example 1` will redirect the browser to &quot;http://www.wilyhacker.com&quot;.\r\n\r\nMany users have been educated to always inspect URLs they receive in emails to make sure the link specifies a trusted site they know. However, if the attacker encoded the destination url as follows:\n&quot;http://trusted.example.com/ecommerce/redirect.asp?dest=%77%69%6C%79%68%61%63%6B%65%72%2E%63%6F%6D&quot;\r\n\r\nthen even a savvy end-user may be fooled into following the link."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "601",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "4.0",
                "Probability": "3.5"
              }
            },
            {
              "id": "7976C056-CFCC-4D78-9A54-8B28856A22EA",
              "guid": "7976C056-CFCC-4D78-9A54-8B28856A22EA",
              "name": "Input Validation and Representation/Cross-Site Scripting/Poor Validation",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} uses HTML, XML, or other types of encoding that is not always enough to prevent malicious code from reaching the web browser.\r\nRelying on HTML, XML, and other types of encoding to validate user input can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "The use of certain encoding functions will prevent some, but not all cross-site scripting attacks. Depending on the context in which the data appear, characters beyond the basic &lt;, &gt;, &amp;, and \" that are HTML-encoded and those beyond &lt;, &gt;, &amp;, \", and ' that are XML-encoded may take on meta-meaning. Relying on such encoding functions is equivalent to using a weak blacklist to prevent cross-site scripting and might allow an attacker to inject malicious code that will be executed in the browser. Because accurately identifying the context in which the data appear statically is not always possible, the Fortify Secure Coding Rulepacks report cross-site scripting findings even when encoding is applied and presents them as Cross-Site Scripting: Poor Validation issues.\r\n\r\nCross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET code segment reads an employee ID number from an HTTP request, HTML-encodes it, and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Server.HtmlEncode(Request.Form[\"Login\"]) %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment implements the same functionality as in `Example 1`, albeit programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n`\r\n\r\n`\nstring ID = Server.HtmlEncode(Request.Form[\"Login\"]);\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n`\r\n\r\nThe code in these examples operate correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\n**Example 3:** The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the HTML-encoded name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= Server.HtmlEncode(name) %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** Likewise, the following ASP.NET code segment is functionally equivalent to `Example 3`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + Server.HtmlEncode(name));\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n`\r\n\r\nAs in `Example 1` and `Example 2`, these code segments perform correctly when the values of `name` are well-behaved, but they do nothing to prevent exploits if they are not. Again, these code examples can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- As in `Example 3` and `Example 4`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "82",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "83",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "87",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "692",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "8C932AF5-F241-4C55-AF9E-838893ED56C31",
              "guid": "8C932AF5-F241-4C55-AF9E-838893ED56C3",
              "name": "Security Features/Weak Cryptographic Hash/Insecure PBE Iteration Count",
              "shortDescription": {
                "text": "The iteration count used by a password-based key derivation function is too low."
              },
              "fullDescription": {
                "text": "A key derivation function is used to derive a key from a base key and other parameters. In a password-based key derivation function, the base key is a password and the other parameters are a salt value and an iteration count. An iteration count has traditionally served the purpose of increasing the cost of generating keys from a password. If the iteration count is too low, the feasibility of an attack increases as an attacker may compute &quot;rainbow tables&quot; for the application and more easily reverse hashed password values.\r\n\r\nIn this case the call to <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in {PrimaryLocation.file} at line {PrimaryLocation.line} specifies an iteration count that is too low.\r\r\n\r\n**Example 1:** The following code uses an iteration count of 50:\r\n\r\n  `\n  ...\n  Rfc2898DeriveBytes rdb8 = new Rfc2898DeriveBytes(password, salt,50);\n  ...\n  `\r\n\r\nApplications that use a low iteration count for password-based encryption are exposed to trivial dictionary-based attacks, exactly the type of attack that password-based encryption schemes were designed to protect against."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "916",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2",
                "Impact": "2.0",
                "Probability": "3.5"
              }
            },
            {
              "id": "90C2A251-D269-49DF-A6E4-8EE1443C9301",
              "guid": "90C2A251-D269-49DF-A6E4-8EE1443C9301",
              "name": "Input Validation and Representation/Header Manipulation/Cookies",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} includes unvalidated data in an HTTP cookie on line {PrimaryLocation.line}. This enables cookie manipulation attacks and can lead to other HTTP Response header manipulation attacks like: cache-poisoning, cross-site scripting, cross-user defacement, page hijacking or open redirect.\r\nIncluding unvalidated data in Cookies can lead to HTTP Response header manipulation and enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect."
              },
              "fullDescription": {
                "text": "Cookie Manipulation vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source, most frequently an HTTP request.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n2. The data is included in an HTTP cookie sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nAs with many software security vulnerabilities, cookie manipulation is a means to an end, not an end in itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an HTTP cookie.\r\n\r\n**Cookie Manipulation:** When combined with attacks like Cross-Site Request Forgery, attackers may change, add to, or even overwrite a legitimate user's cookies.\r\n\r\nBeing an HTTP Response header, cookie manipulation attacks can also lead to other types of attacks like:\r\n\r\n**HTTP Response Splitting:**\nOne of the most common Header Manipulation attacks is HTTP Response Splitting. To mount a successful HTTP Response Splitting exploit, the application must allow input that contains CR (carriage return, also given by %0d or \\r) and LF (line feed, also given by %0a or \\n)characters into the header. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but also allows them to create additional responses entirely under their control.\r\n\r\nMany of today's modern application servers will prevent the injection of malicious characters into HTTP headers. For example, recent versions of Apache Tomcat will throw an `IllegalArgumentException` if you attempt to set a header with prohibited characters. If your application server prevents setting headers with new line characters, then your application is not vulnerable to HTTP Response Splitting. However, solely filtering for new line characters can leave an application vulnerable to Cookie Manipulation or Open Redirects, so care must still be taken when setting HTTP headers with user input.\r\n\r\n**Example:** The following code segment reads the name of the author of a weblog entry, `author`, from an HTTP request and sets it in a cookie header of an HTTP response.\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Author;\n...\nstring author = Author.Text;\nCookie cookie = new Cookie(\"author\", author);\n...\n`\r\n\r\nAssuming a string consisting of standard alphanumeric characters, such as \"Jane Smith\", is submitted in the request the HTTP response including this cookie might take the following form:\r\n\r\n`\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Jane Smith\n...\n`\r\n\r\nHowever, because the value of the cookie is formed of unvalidated user input the response will only maintain this form if the value submitted for `AUTHOR_PARAM` does not contain any CR and LF characters. If an attacker submits a malicious string, such as \"Wiley Hacker\\r\\nHTTP/1.1 200 OK\\r\\n...\", then the HTTP response would be split into two responses of the following form:\r\n\r\n`\nHTTP/1.1 200 OK\n...\nSet-Cookie: author=Wiley Hacker\r\n\r\nHTTP/1.1 200 OK\n...\n`\r\n\r\nClearly, the second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability of attacker to construct arbitrary HTTP responses permits a variety of resulting attacks, including: cross-user defacement, web and browser cache poisoning, cross-site scripting, and page hijacking.\r\n\r\n**Cross-User Defacement:** An attacker will be able to make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server. This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server. In the best case, an attacker may leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.\r\n\r\n**Cache Poisoning:** The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although only the user of the local browser instance will be affected.\r\n\r\n**Cross-Site Scripting:** Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users. Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.\r\n\r\n**Page Hijacking:** In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead. By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker may cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.\r\n\r\n**Open Redirect:** Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "113",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "3.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "F2C14D66-2F66-4D07-A84A-4A56BDDF7873",
              "guid": "F2C14D66-2F66-4D07-A84A-4A56BDDF7873",
              "name": "Security Features/Password Management/Hardcoded Password",
              "shortDescription": {
                "text": "Hardcoded passwords may compromise system security in a way that cannot be easily remedied."
              },
              "fullDescription": {
                "text": "It is never a good idea to hardcode a password. Not only does hardcoding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password cannot be changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\r\n\r\nIn this case, the password was used to access a resource at <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in {PrimaryLocation.file} at line {PrimaryLocation.line}.\r\n\r\n**Example:** The following code uses a hardcoded password to create a network credential:\r\n\r\n`\n...\nNetworkCredential netCred =\n           new NetworkCredential(\"scott\", \"tiger\", domain);\n...\n`\r\n\r\nThis code will run successfully, but anyone who has access to it will have access to the password. After the program ships, there is likely no way to change the network credential user \"scott\" with a password of \"tiger\" unless the program is patched. An employee with access to this information can use it to break into the system. If attackers have access to the executable for the application they can disassemble the code, which will contain the values of the passwords used."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "259",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "798",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "4.0",
                "Probability": "4.0"
              }
            },
            {
              "id": "F21BAB1C-A585-426B-A474-CA56905BB880",
              "guid": "F21BAB1C-A585-426B-A474-CA56905BB880",
              "name": "Security Features/Weak Cryptographic Hash",
              "shortDescription": {
                "text": "Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts."
              },
              "fullDescription": {
                "text": "MD2, MD4, MD5, RIPEMD-160, and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. However, as recent cryptanalysis research has revealed fundamental weaknesses in these algorithms, they should no longer be used within security-critical contexts.\r\n\r\nEffective techniques for breaking MD and RIPEMD hashes are widely available, so those algorithms should not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "328",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "3.5"
              }
            },
            {
              "id": "F74ED881-A10C-4071-BEDE-7073FB66AB2E",
              "guid": "F74ED881-A10C-4071-BEDE-7073FB66AB2E",
              "name": "Environment/HTML5/MIME Sniffing",
              "shortDescription": {
                "text": "The method `Application_BeginRequest` is either empty or does not include a function call to set the `X-Content-Type-Options` to `nosniff` or attempts to remove that header."
              },
              "fullDescription": {
                "text": "MIME sniffing, is the practice of inspecting the content of a byte stream to attempt to deduce the file format of the data within it.\r\n\r\nIf MIME sniffing is not explicitly disabled, some browsers can be manipulated into interpreting data in a way that is not intended, allowing for cross-site scripting attacks.\r\n\r\nFor each page that could contain user controllable content, you should use the HTTP Header `X-Content-Type-Options: nosniff`."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "554",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "2.0",
                "Probability": "3.5"
              }
            },
            {
              "id": "CF140FA2-5F71-45AF-AB54-31FBB6C214DA",
              "guid": "CF140FA2-5F71-45AF-AB54-31FBB6C214DA",
              "name": "Input Validation and Representation/Denial of Service",
              "shortDescription": {
                "text": "The call to {PrimaryCall.name} at {PrimaryLocation.file} line {PrimaryLocation.line} might allow an attacker to crash the program or otherwise make it unavailable to legitimate users.\r\nAn attacker could cause the program to crash or otherwise become unavailable to legitimate users."
              },
              "fullDescription": {
                "text": "Attackers may be able to deny service to legitimate users by flooding the application with requests, but flooding attacks can often be defused at the network layer. More problematic are bugs that allow an attacker to overload the application using a small number of requests. Such bugs allow the attacker to specify the quantity of system resources their requests will consume or the duration for which they will use them.\r\n\r\n**Example 1:** The following code allows a user to specify the amount of time for which a thread will sleep. By specifying a large number, an attacker may tie up the thread indefinitely. With a small number of requests, the attacker may deplete the application's thread pool.\r\n\r\n`\n  int usrSleepTime = Int32.Parse(usrInput);\n  Thread.Sleep(usrSleepTime);\n`\r\n\r\n**Example 2:** The following code reads a String from a zip file. Because it uses the `ReadLine()` method, it will read an unbounded amount of input. An attacker may take advantage of this code to cause an `OutOfMemoryException` or to consume a large amount of memory so that the program spends more time performing garbage collection or runs out of memory during some subsequent operation.\r\n\r\n`\n   using (StreamReader sr = new StreamReader(\"file.zip\"))\n   {\n      String line;\n      line = sr.ReadLine();\n\t ...\n   }\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "730",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "3F9B0D26-E122-4770-BF9B-F0D11A026495",
              "guid": "3F9B0D26-E122-4770-BF9B-F0D11A026495",
              "name": "Input Validation and Representation/XML External Entity Injection",
              "shortDescription": {
                "text": "XML parser configured in {PrimaryLocation.file}:{PrimaryLocation.line} does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack\r\nUsing XML parsers configured to not prevent nor limit external entities resolution can expose the parser to an XML External Entities attack\r\n."
              },
              "fullDescription": {
                "text": "XML External Entities attacks benefit from an XML feature to build documents dynamically at the time of processing. An XML entity allows to include data dynamically from a given resource. External entities allow an XML document to include data from an external URI. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote systems. This behavior exposes the application to XML External Entity (XXE) attacks, which can be used to perform denial of service of the local system, gain unauthorized access to files on the local machine, scan remote machines, and perform denial of service of remote systems.\r\n\r\nThe following XML document shows an example of an XXE attack.\n`\n&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n &lt;!DOCTYPE foo [\n  &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"file:///c:/winnt/win.ini\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n`\r\n\r\nThis example could disclose the contents of the C:\\winnt\\win.ini system file, if the XML parser attempts to substitute the entity with the contents of the file."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "611",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "1.0",
                "Impact": "4.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
              "guid": "64BB374F-DAAE-4E6B-A5A9-D917CAAE8827",
              "name": "Security Features/Cookie Security/Cookie not Sent Over SSL",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} on line {PrimaryLocation.line}creates a cookie without the `secure` flag set to `true`.\r\nA cookie is created without the `secure` flag set to `true`."
              },
              "fullDescription": {
                "text": "Modern web browsers support a `secure` flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.\r\n\r\nIn this case, a cookie is created in {FirstTraceLocation.file} at line {FirstTraceLocation.line}, but `setSecure()` is not called or is called with the value `false`.\r\n\r\n**Example:** In the following example, a cookie is added to the response without setting the `Secure` property.\n`\n...\n HttpCookie cookie = new HttpCookie(\"emailCookie\", email);\n    Response.AppendCookie(cookie);\n...\n`\r\n\r\nIf your application uses both HTTPS and HTTP but does not set the `secure` flag, cookies sent during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "614",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "2.0"
              }
            },
            {
              "id": "9DD7BC55-7A23-4416-8ED7-72A7FB3FB773",
              "guid": "9DD7BC55-7A23-4416-8ED7-72A7FB3FB773",
              "name": "Code Quality/Null Dereference",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} can dereference a null-pointer on line {PrimaryLocation.line}, thereby raising a `NullException`.\r\nThe program can potentially dereference a null-pointer, thereby raising a `NullException`."
              },
              "fullDescription": {
                "text": "Null-pointer errors are usually the result of one or more programmer assumptions being violated.\r\n\r\nIn this case, the variable can be `null` when it is dereferenced at line {PrimaryLocation.line}, thereby raising a `NullException`.\r\n\r\nMost null-pointer issues result in general software reliability problems, but if an attacker can intentionally trigger a null-pointer dereference, the attacker may be able to use the resulting exception to bypass security logic or to cause the application to reveal debugging information that will be valuable in planning subsequent attacks.\r\n\r\n**Example 1:** In the following code, the programmer assumes that the system always has a property named \"`cmd`\" defined. If an attacker can control the program's environment so that \"`cmd`\" is not defined, the program throws a null-pointer exception when it attempts to call the `Trim()` method.\r\n\r\n`\nstring cmd = null;\n...\ncmd = Environment.GetEnvironmentVariable(\"cmd\");\ncmd = cmd.Trim();\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "476",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "3.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "5CE95753-B68F-4D03-990F-E3D879419738",
              "guid": "5CE95753-B68F-4D03-990F-E3D879419738",
              "name": "Encapsulation/System Information Leak/External",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} reveals system data or debugging information by calling {PrimaryCall.name} on line {PrimaryLocation.line}. The information revealed by {PrimaryCall.name} could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\r\n\r\nIn this case, the data from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line} leaves the program through <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code leaks Exception information in the HTTP response:\r\n\r\n`\ntry\n{\n  ...\n}\ncatch (Exception e)\n{\n  Response.Write(e.ToString());\n}\n`\r\n\r\nThis information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In `Example 1`, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "215",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "489",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "47CDE28F-16F5-4FC4-9AF2-5AD5515B2C9F",
              "guid": "47CDE28F-16F5-4FC4-9AF2-5AD5515B2C9F",
              "name": "Input Validation and Representation/Setting Manipulation",
              "shortDescription": {
                "text": "An attacker is able to control one of the arguments to {PrimaryCall.name} at {PrimaryLocation.file} line {PrimaryLocation.line}, which can lead to a disruption of service or unexpected application behavior.\r\nAllowing external control of system settings can disrupt service or cause an application to behave in unexpected ways."
              },
              "fullDescription": {
                "text": "Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.\r\n\r\nIn this case, potentially malicious data enters the program at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line} and is passed to <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nBecause setting manipulation covers a diverse set of functions, any attempt to illustrate it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "15",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "370A25A9-2F65-4B79-B267-FC0A87D79DAC",
              "guid": "370A25A9-2F65-4B79-B267-FC0A87D79DAC",
              "name": "Security Features/Password Management/Password in Comment",
              "shortDescription": {
                "text": "Storing passwords or password details in plain text anywhere in the system or system code may compromise system security in a way that cannot be easily remedied."
              },
              "fullDescription": {
                "text": "It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\r\n\r\nIn this case, the password details appear in the comment in {PrimaryLocation.file} at line {PrimaryLocation.line}.\r\n\r\n**Example:** The following comment specifies the default password to connect to a database:\r\n\r\n`\n...\n// Default username for database connection is \"scott\"\n// Default password for database connection is \"tiger\"\n...\n`\r\n\r\nThis code will run successfully, but anyone who has access to it will have access to the password. After the program ships, there is likely no way to change the database user \"scott\" with a password of \"tiger\" unless the program is patched. An employee with access to this information can use it to break into the system."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "615",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "1.0",
                "Impact": "2.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "680C3A0E-90C1-4907-BE37-34C0F0777444",
              "guid": "680C3A0E-90C1-4907-BE37-34C0F0777444",
              "name": "Input Validation and Representation/Cross-Site Scripting/Reflected",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} sends unvalidated data to a web browser on line {PrimaryLocation.line}, which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "Cross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Request.Form[\"Login\"] %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment shows the programmatic way to implement `Example 1`.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\n`\nstring ID = Request.Form[\"Login\"];\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\nThe code in these examples operates correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\n**Example 3:** The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= name %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** The following ASP.NET code segment is functionally equivalent to `Example 3`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + name);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\nAs in `Example 1` and `Example 2`, these code examples function correctly when the values of `name` are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- As in `Example 3` and `Example 4`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "79",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "80",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "B5FE987A-0FCD-4E72-821A-BEB4E700F407",
              "guid": "B5FE987A-0FCD-4E72-821A-BEB4E700F407",
              "name": "Input Validation and Representation/Cross-Site Scripting/Persistent",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} sends unvalidated data to a web browser on line {PrimaryLocation.line}, which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "Cross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= name %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment is functionally equivalent to `Example 1`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + name);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\nThese code examples function correctly when the values of `name` are well-behaved, but they do nothing to prevent exploits if they are not. This code can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\n**Example 3:** The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Request.Form[\"Login\"] %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** The following ASP.NET code segment shows the programmatic way to implement `Example 3`.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\n`\nstring ID = Request.Form[\"Login\"];\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\nAs in `Example 1` and `Example 2`, these examples operate correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- As in `Example 3` and `Example 4`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "79",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "80",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "1342BD58-09F5-47C0-9E56-4988B41F5302",
              "guid": "1342BD58-09F5-47C0-9E56-4988B41F5302",
              "name": "Security Features/Password Management/Null Password",
              "shortDescription": {
                "text": "Null passwords can compromise security."
              },
              "fullDescription": {
                "text": "Assigning `null` to password variables is never a good idea as it may allow attackers to bypass password verification or might indicate that resources are protected by an empty password.\r\n\r\nIn this case, a `null` password was found in the call to <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in {PrimaryLocation.file} at line {PrimaryLocation.line}.\r\n\r\n**Example:** The following code initializes a password variable to `null`, attempts to read a stored value for the password, and compares it against a user-supplied value.\r\n\r\n`\n    ...\n    string storedPassword = null;\n    string temp;\r\n\r\n    if ((temp = ReadPassword(storedPassword)) != null) {\n        storedPassword = temp;\n    }\r\n\r\n    if(Utils.VerifyPassword(storedPassword, userPassword))\n        // Access protected resources\n        ...\n    }\n    ...\n`\r\n\r\nIf `ReadPassword()` fails to retrieve the stored password due to a database error or another problem, then an attacker could trivially bypass the password check by providing a `null` value for `userPassword`."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "259",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "5873295C-8BBA-11DF-8977-3C22E0D72085",
              "guid": "5873295C-8BBA-11DF-8977-3C22E0D72085",
              "name": "Input Validation and Representation/Path Manipulation",
              "shortDescription": {
                "text": "Attackers are able to control the file system path argument to {PrimaryCall.name} at {PrimaryLocation.file} line {PrimaryLocation.line}, which allows them to access or modify otherwise protected files.\r\nAllowing user input to control paths used in file system operations could enable an attacker to access or modify otherwise protected system resources."
              },
              "fullDescription": {
                "text": "Path manipulation errors occur when the following two conditions are met:\r\n\r\n1. An attacker is able to specify a path used in an operation on the file system.\r\n\r\n2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.\r\n\r\nFor example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.\r\n\r\nIn this case, the attacker may specify the value that enters the program at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}, and this value is used to access a file system resource at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n**Example 1:** The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker may provide a file name like \"`..\\\\..\\\\Windows\\\\System32\\\\krnl386.exe`\", which will cause the application to delete an important Windows system file.\r\n\r\n`\nString rName = Request.Item(\"reportName\");\n...\nFile.delete(\"C:\\\\users\\\\reports\\\\\" + rName);\n`\r\n\r\n**Example 2:** The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with adequate privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension \".txt\".\r\n\r\n`\nsr = new StreamReader(resmngr.GetString(\"sub\")+\".txt\");\nwhile ((line = sr.ReadLine()) != null) {\nConsole.WriteLine(line);\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "22",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "73",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "3.0",
                "Probability": "4.0"
              }
            },
            {
              "id": "D29C2116-BD82-455D-A506-7179C66D2123",
              "guid": "D29C2116-BD82-455D-A506-7179C66D2123",
              "name": "Input Validation and Representation/SQL Injection",
              "shortDescription": {
                "text": "On line {PrimaryLocation.line} of {PrimaryLocation.file}, the method {EnclosingFunction.name} invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
              },
              "fullDescription": {
                "text": "SQL injection errors occur when:\r\n\r\n1. Data enters a program from an untrusted source.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is used to dynamically construct a SQL query.\r\n\r\nIn this case, the data is passed to <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where `owner` matches the user name of the currently-authenticated user.\r\n\r\n`\n...\nstring userName = ctx.getAuthenticatedUserName();\nstring query = \"SELECT * FROM items WHERE owner = '\"\n\t\t\t\t+ userName + \"' AND itemname = '\"\n\t\t\t\t+ ItemName.Text + \"'\";\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\n...\n`\r\n\r\nThe query intends to execute the following code:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n`\r\n\r\nHowever, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if `itemName` does not contain a single-quote character. If an attacker with the user name `wiley` enters the string \"`name' OR 'a'='a`\" for `itemName`, then the query becomes the following:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n`\r\n\r\nThe addition of the `OR 'a'='a'` condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\r\n\r\n`\n\tSELECT * FROM items;\n`\r\n\r\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the `items` table, regardless of their specified owner.\r\n\r\n**Example 2:** This example examines the effects of a different malicious value passed to the query constructed and executed in `Example 1`. If an attacker with the user name `wiley` enters the string \"`name'); DELETE FROM items; --`\" for `itemName`, then the query becomes the following two queries:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\r\n\r\n\tDELETE FROM items;\r\n\r\n\t--'\n`\r\n\r\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\r\n\r\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in `Example 1`. If an attacker enters the string \"`name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a`\", the following three valid statements will be created:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\r\n\r\n\tDELETE FROM items;\r\n\r\n\tSELECT * FROM items WHERE 'a'='a';\n`\r\n\r\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\r\n\r\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\r\n\r\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\r\n\r\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "89",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "E7DC1152-9ACE-47B6-9F52-8C963A237737",
              "guid": "E7DC1152-9ACE-47B6-9F52-8C963A237737",
              "name": "Input Validation and Representation/SQL Injection",
              "shortDescription": {
                "text": "On line {PrimaryLocation.line} of {PrimaryLocation.file}, the method {EnclosingFunction.name} invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
              },
              "fullDescription": {
                "text": "SQL injection errors occur when:\r\n\r\n1. Data enters a program from an untrusted source.\r\n\r\nIn this case, Fortify Static Code Analyzer could not determine if the string is always safe.\r\n\r\n2. The data is used to dynamically construct a SQL query.\r\n\r\nIn this case, the data is passed to <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in {PrimaryLocation.file} at line {PrimaryLocation.line}.\r\n\r\n**Example 1:** The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where `owner` matches the user name of the currently-authenticated user.\r\n\r\n`\n...\nstring userName = ctx.getAuthenticatedUserName();\nstring query = \"SELECT * FROM items WHERE owner = '\"\n\t\t\t\t+ userName + \"' AND itemname = '\"\n\t\t\t\t+ ItemName.Text + \"'\";\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\n...\n`\r\n\r\nThe query intends to execute the following code:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n`\r\n\r\nHowever, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if `itemName` does not contain a single-quote character. If an attacker with the user name `wiley` enters the string \"`name' OR 'a'='a`\" for `itemName`, then the query becomes the following:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n`\r\n\r\nThe addition of the `OR 'a'='a'` condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\r\n\r\n`\n\tSELECT * FROM items;\n`\r\n\r\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the `items` table, regardless of their specified owner.\r\n\r\n**Example 2:** This example examines the effects of a different malicious value passed to the query constructed and executed in `Example 1`. If an attacker with the user name `wiley` enters the string \"`name'); DELETE FROM items; --`\" for `itemName`, then the query becomes the following two queries:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\r\n\r\n\tDELETE FROM items;\r\n\r\n\t--'\n`\r\n\r\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\r\n\r\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in `Example 1`. If an attacker enters the string \"`name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a`\", the following three valid statements will be created:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\r\n\r\n\tDELETE FROM items;\r\n\r\n\tSELECT * FROM items WHERE 'a'='a';\n`\r\n\r\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be an effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\r\n\r\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\r\n\r\nManually escaping characters in input to SQL queries can help, but it will not make your application secure against SQL injection attacks.\r\n\r\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks."
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "89",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "1.0",
                "Impact": "1.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "C629C488-679C-489B-95F4-4C9BD0D8CAEE",
              "guid": "C629C488-679C-489B-95F4-4C9BD0D8CAEE",
              "name": "Security Features/Access Control/Database",
              "shortDescription": {
                "text": "Without proper access control, the method {EnclosingFunction.name} in {PrimaryLocation.file} can execute a SQL statement on line {PrimaryLocation.line} that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.\r\nWithout proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records."
              },
              "fullDescription": {
                "text": "Database access control errors occur when:\r\n\r\n1. Data enters a program from an untrusted source.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is used to specify the value of a primary key in a SQL query.\r\n\r\nIn this case, the data is used by <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nSqlCommand query = new SqlCommand(\n            \"SELECT * FROM invoices WHERE id = @id\", conn);\nquery.Parameters.AddWithValue(\"@id\", id);\nSqlDataReader objReader = query.ExecuteReader();\n...\n`\n</IfNotDef>\r\n\r\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nSqlCommand query = new SqlCommand(\n            \"SELECT * FROM invoices WHERE id = @id\", conn);\nquery.Parameters.AddWithValue(\"@id\", id);\nSqlDataReader objReader = query.ExecuteReader();\n...\n`\r\n\r\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nQuery query = sess.CreateQuery(\"SELECT * FROM invoices WHERE id = ?\");\nquery.SetInt16(0, id);\nList&lt;Invoice&gt; items = query.List&lt;Invoice&gt;();\n`\r\n\r\n**Example 2:** The following code performs the analogous query using NHibernate's HQL syntax and named parameters.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nQuery query = sess.CreateQuery(\"FROM Invoice inv WHERE inv.Id = :id\");\nquery.SetInt16(\"id\", id);\nList&lt;Invoice&gt; items = query.List&lt;Invoice&gt;();\n`\r\n\r\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nstring query = new SqlCommand(\n            \"SELECT * FROM invoices WHERE id = @id\", conn);\nObject[] parameters = { id };\nIDataReader responseReader = new InlineQuery().ExecuteReader(query, parameters);\n...\n`\r\n\r\n**Example 2:** The following code uses SubSonic 2's simple query tools to achieve the same effect.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nInvoiceCollection inv = new Select().From(\"invoices\").\n            Where(\"id\").IsEqualTo(id).ExecuteAsCollection&lt;InvoiceCollection&gt;();\n`\r\n\r\n**Example 3:** The following is the ActiveRecord Fluent Query version of the preceding examples, implemented in SubSonic 3.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nList&lt;Invoice&gt; invoices = db.Select.From&lt;Invoice&gt;().\n            Where(InvoiceTable.IDColumn).IsEqualTo(id).ExecuteTypedList&lt;Invoice&gt;();\n`\r\n\r\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nstring queryString = \"SELECT * FROM invoices WHERE id = :id\";\nSimpleQuery&lt;Invoice&gt; q = new SimpleQuery(queryString);\nq.SetParameter(\"id\", id);\nInvoice[] invoices = (Invoice []) q.Execute();\n`\r\n\r\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\r\n\r\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nSqlCommand query = new SqlCommand(\n            \"SELECT * FROM invoices WHERE id = @id\", conn);\nquery.Parameters.AddWithValue(\"@id\", id);\nSqlDataReader objReader = query.ExecuteReader();\n...\n`\r\n\r\nThe problem is that the developer has failed to consider all of the possible values of `id`. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker might bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "566",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "1.0",
                "Impact": "4.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "76717B51-2DCC-4D7C-A5FC-CB0A6B3029CB",
              "guid": "76717B51-2DCC-4D7C-A5FC-CB0A6B3029CB",
              "name": "Input Validation and Representation/HTML5/Cross-Site Scripting Protection",
              "shortDescription": {
                "text": "The X-XSS-Protection header is explicitly disabled which may increase the risk of cross-site scripting attacks."
              },
              "fullDescription": {
                "text": "X-XSS-Protection refers to a header that is automatically enabled in IE8 and greater. When the header value is set to false (0) cross-site scripting protection is disabled.\r\n\r\nThe header can be set in multiple locations and should be checked for both misconfiguration as well as malicious tampering."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "554",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "1173",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "2.0",
                "Probability": "3.5"
              }
            },
            {
              "id": "FACCD6C7-E61E-459A-A5FD-DD974394CCF9",
              "guid": "FACCD6C7-E61E-459A-A5FD-DD974394CCF9",
              "name": "Input Validation and Representation/XPath Injection",
              "shortDescription": {
                "text": "On line {PrimaryLocation.line} of {PrimaryLocation.file}, the method {EnclosingFunction.name} invokes an XPath query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary XPath queries.\r\nConstructing a dynamic XPath query with user input may allow an attacker to modify the statement's meaning."
              },
              "fullDescription": {
                "text": "XPath injection occurs when:\r\n\r\n1. Data enters a program from an untrusted source.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\nEven though the data in this case is a number, it is unvalidated and thus still considered malicious, hence the vulnerability is still reported but with reduced priority values.\r\n\r\n2. The data used to dynamically construct an XPath query.\r\n\r\nIn this case, the query is passed to <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code dynamically constructs and executes an XPath query that retrieves an email address for a given account ID. The account ID is read from an HTTP request, and is therefore untrusted.\r\n\r\n`\n...\nstring acctID = Request[&quot;acctID&quot;];\nstring query = null;\nif(acctID != null) {\n       StringBuffer sb = new StringBuffer(&quot;/accounts/account[acctID='&quot;);\n       sb.append(acctID);\n       sb.append(&quot;']/email/text()&quot;);\n       query = sb.toString();\n}\r\n\r\nXPathDocument docNav = new XPathDocument(myXml);\nXPathNavigator nav = docNav.CreateNavigator();\nnav.Evaluate(query);\n...\n`\r\n\r\nUnder normal conditions, such as searching for an email address that belongs to the account number 1, the query that this code executes will look like the following:\r\n\r\n`/accounts/account[acctID='1']/email/text()`\r\n\r\nHowever, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if `acctID` does not contain a single-quote character. If an attacker enters the string `1' or '1' = '1` for `acctID`, then the query becomes the following:\r\n\r\n`/accounts/account[acctID='1' or '1' = '1']/email/text()`\r\n\r\nThe addition of the `1' or '1' = '1` condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\r\n\r\n`//email/text()`\r\n\r\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all email addresses stored in the document, regardless of their specified owner."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "643",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.5",
                "Impact": "3.0",
                "Probability": "4.0"
              }
            },
            {
              "id": "5E7A17EB-A289-4850-BDB2-5D04E8250778",
              "guid": "5E7A17EB-A289-4850-BDB2-5D04E8250778",
              "name": "Code Quality/Unreleased Resource/Streams",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} sometimes fails to release a system resource allocated by {FirstTransitionFunction} on line {FirstTraceLocation.line}.\r\nThe program can potentially fail to release a system resource."
              },
              "fullDescription": {
                "text": "The program can potentially fail to release a system resource.\r\n\r\nResource leaks have at least two common causes:\r\n\r\n- Error conditions and other exceptional circumstances.\r\n\r\n- Confusion over which part of the program is responsible for releasing the resource.\r\n\r\nIn this case, there are program paths on which the resource allocated in {FirstTraceLocation.file} at line {FirstTraceLocation.line} is not released.\r\n\r\nMost unreleased resource issues result in general software reliability problems. However, if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.\r\n\r\n**Example:** The following method never closes the file handle it opens. The `Finalize()` method for `StreamReader` eventually calls `Close()`, but there is no guarantee as to how long it will take before the `Finalize()` method is invoked. In fact, there is no guarantee that `Finalize()` will ever be invoked. In a busy environment, this can result in the VM using up all of its available file handles.\r\n\r\n`\nprivate void processFile(string fName) {\n        StreamWriter sw = new StreamWriter(fName);\n        string line;\n        while ((line = sr.ReadLine()) != null)\n                processLine(line);\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "772",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.5",
                "Probability": "1.0"
              }
            },
            {
              "id": "45736FF1-7342-4ABC-9C14-BA72A9023121",
              "guid": "45736FF1-7342-4ABC-9C14-BA72A9023121",
              "name": "Input Validation and Representation/SQL Injection",
              "shortDescription": {
                "text": "On line {PrimaryLocation.line} of {PrimaryLocation.file}, the method {EnclosingFunction.name} invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
              },
              "fullDescription": {
                "text": "SQL injection errors occur when:\r\n\r\n1. Data enters a program from an untrusted source.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is used to dynamically construct a SQL query.\r\n\r\nIn this case, the data is passed to <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where `owner` matches the user name of the currently-authenticated user.\r\n\r\n`\n...\nstring userName = ctx.getAuthenticatedUserName();\nstring query = \"SELECT * FROM items WHERE owner = '\"\n\t\t\t\t+ userName + \"' AND itemname = '\"\n\t\t\t\t+ ItemName.Text + \"'\";\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\n...\n`\r\n\r\nThe query intends to execute the following code:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n`\r\n\r\nHowever, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if `itemName` does not contain a single-quote character. If an attacker with the user name `wiley` enters the string \"`name' OR 'a'='a`\" for `itemName`, then the query becomes the following:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n`\r\n\r\nThe addition of the `OR 'a'='a'` condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\r\n\r\n`\n\tSELECT * FROM items;\n`\r\n\r\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the `items` table, regardless of their specified owner.\r\n\r\n**Example 2:** This example examines the effects of a different malicious value passed to the query constructed and executed in `Example 1`. If an attacker with the user name `wiley` enters the string \"`name'); DELETE FROM items; --`\" for `itemName`, then the query becomes the following two queries:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\r\n\r\n\tDELETE FROM items;\r\n\r\n\t--'\n`\r\n\r\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\r\n\r\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in `Example 1`. If an attacker enters the string \"`name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a`\", the following three valid statements will be created:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\r\n\r\n\tDELETE FROM items;\r\n\r\n\tSELECT * FROM items WHERE 'a'='a';\n`\r\n\r\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\r\n\r\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\r\n\r\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\r\n\r\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "89",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "0228E151-63CC-40C0-A202-62C6CE513473",
              "guid": "0228E151-63CC-40C0-A202-62C6CE513473",
              "name": "Code Quality/Unreleased Resource/Database",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} sometimes fails to release a system resource allocated by {FirstTransitionFunction} on line {FirstTraceLocation.line}.\r\nThe program can potentially fail to release a system resource."
              },
              "fullDescription": {
                "text": "The program can potentially fail to release a system resource.\r\n\r\nResource leaks have at least two common causes:\r\n\r\n- Error conditions and other exceptional circumstances.\r\n\r\n- Confusion over which part of the program is responsible for releasing the resource.\r\n\r\nIn this case, there are program paths on which the resource allocated in {FirstTraceLocation.file} at line {FirstTraceLocation.line} is not released.\r\n\r\nMost unreleased resource issues result in general software reliability problems. However, if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.\r\n\r\n**Example:** Under normal conditions the following code executes a database query, processes the results returned by the database, and closes the allocated `SqlConnection` object. But if an exception occurs while executing the SQL or processing the results, the `SqlConnection` object will not be closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries.\r\n\r\n`\n        ...\n        SqlConnection conn = new SqlConnection(connString);\n        SqlCommand cmd = new SqlCommand(queryString);\n        cmd.Connection = conn;\n        conn.Open();\n        SqlDataReader rdr = cmd.ExecuteReader();\n        HarvestResults(rdr);\n        conn.Connection.Close();\n        ...\n`"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "619",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "772",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "5.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "68C383F4-B792-4114-A2ED-DA44E0E7C911",
              "guid": "68C383F4-B792-4114-A2ED-DA44E0E7C911",
              "name": "Environment/HTML5/MIME Sniffing",
              "shortDescription": {
                "text": "The web.config file does not include the required header to mitigate MIME sniffing attacks"
              },
              "fullDescription": {
                "text": "MIME sniffing, is the practice of inspecting the content of a byte stream to attempt to deduce the file format of the data within it.\r\n\r\nIf MIME sniffing is not explicitly disabled, some browsers can be manipulated into interpreting data in a way that is not intended, allowing for cross-site scripting attacks.\r\n\r\nFor each page that could contain user controllable content, you should use the HTTP Header `X-Content-Type-Options: nosniff`."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "554",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "2.0",
                "Probability": "3.5"
              }
            },
            {
              "id": "3591ECE5-8BB6-4DB8-AB9C-AFDAFE280FDE",
              "guid": "3591ECE5-8BB6-4DB8-AB9C-AFDAFE280FDE",
              "name": "Input Validation and Representation/Cross-Site Scripting/Poor Validation",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} uses HTML, XML, or other types of encoding that is not always enough to prevent malicious code from reaching the web browser.\r\nRelying on HTML, XML, and other types of encoding to validate user input can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "The use of certain encoding functions will prevent some, but not all cross-site scripting attacks. Depending on the context in which the data appear, characters beyond the basic &lt;, &gt;, &amp;, and \" that are HTML-encoded and those beyond &lt;, &gt;, &amp;, \", and ' that are XML-encoded may take on meta-meaning. Relying on such encoding functions is equivalent to using a weak blacklist to prevent cross-site scripting and might allow an attacker to inject malicious code that will be executed in the browser. Because accurately identifying the context in which the data appear statically is not always possible, the Fortify Secure Coding Rulepacks report cross-site scripting findings even when encoding is applied and presents them as Cross-Site Scripting: Poor Validation issues.\r\n\r\nCross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET code segment reads an employee ID number from an HTTP request, HTML-encodes it, and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Server.HtmlEncode(Request.Form[\"Login\"]) %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment implements the same functionality as in `Example 1`, albeit programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n`\r\n\r\n`\nstring ID = Server.HtmlEncode(Request.Form[\"Login\"]);\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n`\r\n\r\nThe code in these examples operate correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\n**Example 3:** The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the HTML-encoded name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= Server.HtmlEncode(name) %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** Likewise, the following ASP.NET code segment is functionally equivalent to `Example 3`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + Server.HtmlEncode(name));\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n`\r\n\r\nAs in `Example 1` and `Example 2`, these code segments perform correctly when the values of `name` are well-behaved, but they do nothing to prevent exploits if they are not. Again, these code examples can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- As in `Example 3` and `Example 4`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "82",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "83",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "87",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "692",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
              "guid": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
              "name": "Input Validation and Representation/SQL Injection",
              "shortDescription": {
                "text": "On line {PrimaryLocation.line} of {PrimaryLocation.file}, the method {EnclosingFunction.name} invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
              },
              "fullDescription": {
                "text": "SQL injection errors occur when:\r\n\r\n1. Data enters a program from an untrusted source.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is used to dynamically construct a SQL query.\r\n\r\nIn this case, the data is passed to <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where `owner` matches the user name of the currently-authenticated user.\r\n\r\n`\n...\nstring userName = ctx.getAuthenticatedUserName();\nstring query = \"SELECT * FROM items WHERE owner = '\"\n\t\t\t\t+ userName + \"' AND itemname = '\"\n\t\t\t\t+ ItemName.Text + \"'\";\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\n...\n`\r\n\r\nThe query intends to execute the following code:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = &lt;userName&gt;\n\tAND itemname = &lt;itemName&gt;;\n`\r\n\r\nHowever, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if `itemName` does not contain a single-quote character. If an attacker with the user name `wiley` enters the string \"`name' OR 'a'='a`\" for `itemName`, then the query becomes the following:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name' OR 'a'='a';\n`\r\n\r\nThe addition of the `OR 'a'='a'` condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:\r\n\r\n`\n\tSELECT * FROM items;\n`\r\n\r\nThis simplification of the query allows the attacker to bypass the requirement that the query must only return items owned by the authenticated user. The query now returns all entries stored in the `items` table, regardless of their specified owner.\r\n\r\n**Example 2:** This example examines the effects of a different malicious value passed to the query constructed and executed in `Example 1`. If an attacker with the user name `wiley` enters the string \"`name'); DELETE FROM items; --`\" for `itemName`, then the query becomes the following two queries:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\r\n\r\n\tDELETE FROM items;\r\n\r\n\t--'\n`\r\n\r\nMany database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.\r\n\r\nNotice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in `Example 1`. If an attacker enters the string \"`name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a`\", the following three valid statements will be created:\r\n\r\n`\n\tSELECT * FROM items\n\tWHERE owner = 'wiley'\n\tAND itemname = 'name';\r\n\r\n\tDELETE FROM items;\r\n\r\n\tSELECT * FROM items WHERE 'a'='a';\n`\r\n\r\nOne traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers may:\r\n\r\n    - Target fields that are not quoted\n    - Find ways to bypass the need for certain escaped metacharacters\n    - Use stored procedures to hide the injected metacharacters\r\n\r\nManually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.\r\n\r\nAnother solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "89",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "F7A2423A-1927-40A3-920E-17ADB5430412",
              "guid": "F7A2423A-1927-40A3-920E-17ADB5430412",
              "name": "Encapsulation/System Information Leak",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} reveals system data or debugging information by calling {PrimaryCall.name} on line {PrimaryLocation.line}. The information revealed by {PrimaryCall.name} could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.\r\n\r\nIn this case, the data from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line} leaves the program through <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code constructs a database connection string, uses it to create a new connection to the database, and writes it to the console.\r\n\r\n`\nstring cs=\"database=northwind;server=mySQLServer...\";\nSqlConnection conn=new SqlConnection(cs);\n...\nConsole.Writeline(cs);\n`\r\n\r\nDepending on the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from &quot;Standard error&quot; or &quot;Standard output&quot; into a file or another program. Alternatively the system that the program runs on could have a remote logging mechanism such as a &quot;syslog&quot; server that will send the logs to a remote device. During development you will have no way of knowing where this information may end up being displayed.\r\n\r\nIn some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In `Example 1`, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "97D9B391-DAFC-4E87-87DD-5A79D54B1B8B",
              "guid": "97D9B391-DAFC-4E87-87DD-5A79D54B1B8B",
              "name": "Encapsulation/Poor Logging Practice/Use of a System Output Stream",
              "shortDescription": {
                "text": "Using {PrimaryCall.name} rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.\r\nUsing `Console.Out` or `Console.Error` rather than a dedicated logging facility makes it difficult to monitor the behavior of the program."
              },
              "fullDescription": {
                "text": "**Example 1:** The first .NET program that a developer learns to write is the following:\r\n\r\n`\npublic class MyClass {\n  public static void Main(string[] args) {\n    Console.WriteLine(\"hello world\");\n  }\n}\n`\r\n\r\nWhile most programmers go on to learn many nuances and subtleties about .NET, a surprising number hang on to this first lesson and never give up on writing messages to standard output using `Console.WriteLine()`.\r\n\r\nThe problem is that writing directly to standard output or standard error is often used as an unstructured form of logging. Structured logging facilities provide features like logging levels, uniform formatting, a logger identifier, timestamps, and, perhaps most critically, the ability to direct the log messages to the right place. When the use of system output streams is jumbled together with the code that uses loggers properly, the result is often a well-kept log that is missing critical information.\r\n\r\nDevelopers widely accept the need for structured logging, but many continue to use system output streams in their \"pre-production\" development. If the code you are reviewing is past the initial phases of development, use of `Console.WriteLine` may indicate an oversight in the move to a structured logging system."
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "398",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "1.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "B4CF019E-CCF6-407C-82C7-CD9C50D1EC5E",
              "guid": "B4CF019E-CCF6-407C-82C7-CD9C50D1EC5E",
              "name": "Security Features/Cookie Security/HTTPOnly not Set on Application Cookie",
              "shortDescription": {
                "text": "The program does not set the `httpCookies.httpOnlyCookies` property to `true` in {PrimaryLocation.file} at line {PrimaryLocation.line}. \r\nThe program does not set the `HttpCookie.HttpOnly` property to `true`."
              },
              "fullDescription": {
                "text": "The default value for the `httpOnlyCookies` attribute is false, meaning that the cookie is accessible through a client-side script. This is an unnecessary cross-site scripting threat, resulting in stolen cookies. Stolen cookies can contain sensitive information identifying the user to the site, such as the ASP.NET session ID or forms authentication ticket, and can be replayed by the attacker in order to masquerade as the user or obtain sensitive information.\r\n\r\nIn this case, the program ignores the `HttpCookie.HttpOnly` property, which defaults to `false` or deliberately sets the value to `false` in {PrimaryLocation.file} at line {PrimaryLocation.line}.\r\n\r\n**Example 1:** Vulnerable configuration:\n`\n&lt;configuration&gt;\n  &lt;system.web&gt;\n    &lt;httpCookies httpOnlyCookies=\"false\"&gt;\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "1004",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "2.0",
                "Probability": "2.0"
              }
            },
            {
              "id": "199C43B1-BFFE-45BA-A217-717C412EE8F0",
              "guid": "199C43B1-BFFE-45BA-A217-717C412EE8F0",
              "name": "Input Validation and Representation/Cross-Site Scripting/Persistent",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} sends unvalidated data to a web browser on line {PrimaryLocation.line}, which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "Cross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= name %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment is functionally equivalent to `Example 1`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + name);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\nThese code examples function correctly when the values of `name` are well-behaved, but they do nothing to prevent exploits if they are not. This code can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\n**Example 3:** The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Request.Form[\"Login\"] %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** The following ASP.NET code segment shows the programmatic way to implement `Example 3`.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\n`\nstring ID = Request.Form[\"Login\"];\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\nAs in `Example 1` and `Example 2`, these examples operate correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- As in `Example 3` and `Example 4`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "79",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "80",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "187D7E8E-9941-436F-A731-8128C97BF567",
              "guid": "187D7E8E-9941-436F-A731-8128C97BF567",
              "name": "Input Validation and Representation/Cross-Site Scripting/Reflected",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} sends unvalidated data to a web browser on line {PrimaryLocation.line}, which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "Cross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Request.Form[\"Login\"] %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment shows the programmatic way to implement `Example 1`.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\n`\nstring ID = Request.Form[\"Login\"];\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\nThe code in these examples operates correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\n**Example 3:** The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= name %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** The following ASP.NET code segment is functionally equivalent to `Example 3`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + name);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\nAs in `Example 1` and `Example 2`, these code examples function correctly when the values of `name` are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- As in `Example 3` and `Example 4`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "79",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "80",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
              "guid": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
              "name": "Input Validation and Representation/Cross-Site Scripting/Reflected",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} sends unvalidated data to a web browser on line {PrimaryLocation.line}, which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "Cross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Request.Form[\"Login\"] %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment shows the programmatic way to implement `Example 1`.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\n`\nstring ID = Request.Form[\"Login\"];\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\nThe code in these examples operates correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\n**Example 3:** The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= name %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** The following ASP.NET code segment is functionally equivalent to `Example 3`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + name);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\nAs in `Example 1` and `Example 2`, these code examples function correctly when the values of `name` are well-behaved, but they nothing to prevent exploits if the values are not. Again, these can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- As in `Example 3` and `Example 4`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "79",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "80",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "79D2A825-CCBF-48A1-9862-1FABF390549A",
              "guid": "79D2A825-CCBF-48A1-9862-1FABF390549A",
              "name": "Encapsulation/System Information Leak/External",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} reveals system data or debugging information by calling {PrimaryCall.name} on line {PrimaryLocation.line}. The information revealed by {PrimaryCall.name} could help an adversary form a plan of attack.\r\nRevealing system data or debugging information helps an adversary learn about the system and form a plan of attack."
              },
              "fullDescription": {
                "text": "An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.\r\n\r\nIn this case, the data from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line} leaves the program through <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code leaks Exception information in the HTTP response:\r\n\r\n`\ntry\n{\n  ...\n}\ncatch (Exception e)\n{\n  Response.Write(e.ToString());\n}\n`\r\n\r\nThis information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In `Example 1`, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "215",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "489",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "497",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "07DBD527-E760-4840-A573-6DC6BAE07078",
              "guid": "07DBD527-E760-4840-A573-6DC6BAE07078",
              "name": "Security Features/Privacy Violation",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
              },
              "fullDescription": {
                "text": "Privacy violations occur when:\r\n\r\n1. Private user information enters the program.\r\n\r\nIn this case the data comes from <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is written to an external location, such as the console, file system or network.\r\n\r\nIn this case the data is passed to <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n**Example 1:** The following code contains a logging statement that tracks the contents of records added to a database by storing them in a log file. Among other values that are stored, the `getPassword()` function returns the user-supplied plain text password associated with the account.\r\n\r\n`\npass = GetPassword();\n...\ndbmsLog.WriteLine(id+\":\"+pass+\":\"+type+\":\"+tstamp);\n`\r\n\r\nThe code in `Example 1` logs a plain text password to the file system. Although many developers trust the file system as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.\r\n\r\nPrivate data can enter a program in a variety of ways:\r\n\r\n- Directly from the user in the form of a password or personal information\r\n\r\n- Accessed from a database or other data store by the application\r\n\r\n- Indirectly from a partner or other third party\r\n\r\nSometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.\r\n\r\nSecurity and privacy concerns often seem to compete with each other. From a security perspective, you should record all important operations so that any anomalous activity can later be identified. However, when private data is involved, this practice can create risk.\r\n\r\nAlthough there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable to store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted. For example, in 2004, an unscrupulous employee at AOL sold approximately 92 million private customer email addresses to a spammer marketing an offshore gambling web site [1].\r\n\r\nIn response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated. Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations:\r\n\r\n- Safe Harbor Privacy Framework [3]\r\n\r\n- Gramm-Leach Bliley Act (GLBA) [4]\r\n\r\n- Health Insurance Portability and Accountability Act (HIPAA) [5]\r\n\r\n- California SB-1386 [6]\r\n\r\nDespite these regulations, privacy violations continue to occur with alarming frequency."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "359",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "4.0",
                "Probability": "3.5"
              }
            },
            {
              "id": "E0E3FAC3-5B9F-4C2C-AA29-9DE93E8E1B90",
              "guid": "E0E3FAC3-5B9F-4C2C-AA29-9DE93E8E1B90",
              "name": "Security Features/Cookie Security/Persistent Cookie",
              "shortDescription": {
                "text": "Storing sensitive data in a persistent cookie can lead to a breach of confidentiality or account compromise."
              },
              "fullDescription": {
                "text": "Most Web programming environments default to creating non-persistent cookies. These cookies reside only in browser memory (they are not written to disk) and are lost when the browser is closed. Programmers can specify that cookies be persisted across browser sessions until some future date. Such cookies are written to disk and survive across browser sessions and computer restarts.\r\n\r\nIf private information is stored in persistent cookies, attackers have a larger time window in which to steal this data - especially since persistent cookies are often set to expire in the distant future. Persistent cookies are often used to profile users as they interact with a site. Depending on what is done with this tracking data, it is possible to use persistent cookies to violate users' privacy.\r\n\r\nIn this case, `Expires` is set in {PrimaryLocation.file} at line {PrimaryLocation.line} with a non-zero parameter.\r\n\r\n**Example:** The following code sets a cookie to expire in 10 years.\n`\n    HttpCookie cookie = new HttpCookie(\"emailCookie\", email);\n    cookie.Expires = DateTime.Now.AddYears(10);;\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "539",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "2.0",
                "Probability": "2.0"
              }
            },
            {
              "id": "4B0F61AD-0836-4FE6-B62D-86AD5897E8C0",
              "guid": "4B0F61AD-0836-4FE6-B62D-86AD5897E8C0",
              "name": "API Abuse/Often Misused/File Upload",
              "shortDescription": {
                "text": "The function {EnclosingFunction.name} in {PrimaryLocation.file} calls {PrimaryCall.name} on line {PrimaryLocation.line}. Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.\r\n Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server."
              },
              "fullDescription": {
                "text": "Regardless of the language in which a program is written, the most devastating attacks often involve remote code execution, whereby an attacker succeeds in executing malicious code in the program's context. If attackers are allowed to upload files to a directory that is accessible from the Web and cause these files to be passed to a code interpreter (e.g. JSP/ASPX/PHP), then they can cause malicious code contained in these files to execute on the server.\r\n\r\nThe following code receives an uploaded file and assigns it to the `posted` object. `FileUpload` is of type `System.Web.UI.HtmlControls.HtmlInputFile`.\n**Example:**\n`\nHttpPostedFile posted = FileUpload.PostedFile;\n`\nEven if a program stores uploaded files under a directory that isn't accessible from the Web, attackers might still be able to leverage the ability to introduce malicious content into the server environment to mount other attacks. If the program is susceptible to path manipulation, command injection, or dangerous file inclusion vulnerabilities, then an attacker might upload a file with malicious content and cause the program to read or execute it by exploiting another vulnerability."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "434",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "2.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "AC21F232-1D82-49B7-9AB1-46FE84CD6424",
              "guid": "AC21F232-1D82-49B7-9AB1-46FE84CD6424",
              "name": "Code Quality/Dead Code/Unused Method",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} is not reachable from any method outside the class. It is dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\nThis method is not reachable from any method outside the class."
              },
              "fullDescription": {
                "text": "This method is never called or is only called from other dead code. Dead code is defined as code that is never directly or indirectly executed by a public method.\r\n\r\n**Example 1:** In the following class, the method `DoWork()` can never be called.\r\n\r\n`\npublic class Dead {\n  private void DoWork() {\n    Console.Write(\"doing work\");\n  }\n  public static void Main(string[] args) {\n    Console.Write(\"running Dead\");\n  }\n}\n`\r\n\r\n**Example 2:** In the following class, two private methods call each other, but since neither one is ever invoked from anywhere else, they are both dead code.\r\n\r\n`\npublic class DoubleDead {\n  private void DoTweedledee() {\n    DoTweedledumb();\n  }\n  private void DoTweedledumb() {\n    DoTweedledee();\n  }\n  public static void Main(string[] args) {\n    Console.Write(\"running DoubleDead\");\n  }\n}\n`\r\n\r\n(In this case it is a good thing that the methods are dead: invoking either one would cause an infinite loop.)"
              },
              "defaultConfiguration": {
                "level": "note",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "561",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "1.0",
                "Probability": "1.0"
              }
            },
            {
              "id": "5C6769B2-98E7-11DF-82CE-4DECDED720850",
              "guid": "5C6769B2-98E7-11DF-82CE-4DECDED72085",
              "name": "Security Features/Privacy Violation/Heap Inspection",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} stores sensitive data in an insecure manner, making it possible to extract the data via inspecting the heap.\r\nStoring sensitive data in an insecure manner makes it possible to extract the data via inspecting the heap."
              },
              "fullDescription": {
                "text": "Sensitive data (such as passwords, social security numbers, credit card numbers etc.) stored in memory can be leaked if it is stored in a managed `String` object. `String` objects are not pinned, so the garbage collector can relocate these objects at will and leave several copies in memory. These objects are not encrypted by default, so anyone that can read the process' memory will be able to see the contents. Furthermore, if the process' memory gets swapped out to disk, the unencrypted contents of the string will be written to a swap file. Lastly, since `String` objects are immutable, removing the value of a `String` from memory can only be done by the CLR garbage collector. The garbage collector is not required to run unless the CLR is low on memory, so there is no guarantee as to when garbage collection will take place. In the event of an application crash, a memory dump of the application might reveal sensitive data.\r\n\r\n**Example 1:** The following method returns a password from the console and stores it in an insecure `String` object.\n`\npublic static String getPassword() {\n    String inputPassword = \"\";\n    ConsoleKeyInfo nextKey = Console.ReadKey(true);\n    while (nextKey.Key != Console.ReadKey(true)) {\n        inputPassword.AppendChar(nextKey.KeyChar);\n        Console.Write(\"*\");\n        nextKey = Console.ReadKey(true);\n    }\n    return inputPassword;\n}\n`"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "226",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "3.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "10F0F640-CC94-4681-8E7B-452D1CC42D5A",
              "guid": "10F0F640-CC94-4681-8E7B-452D1CC42D5A",
              "name": "Security Features/Password Management/Hardcoded Password",
              "shortDescription": {
                "text": "Hardcoded passwords may compromise system security in a way that cannot be easily remedied."
              },
              "fullDescription": {
                "text": "It is never a good idea to hardcode a password. Not only does hardcoding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. After the code is in production, the password cannot be changed without patching the software. If the account protected by the password is compromised, the owners of the system must choose between security and availability.\r\n\r\nIn this case, the password was used to access a resource at <Replace key=\"PrimaryCall.name\" link=\"PrimaryLocation\"/> in {PrimaryLocation.file} at line {PrimaryLocation.line}.\r\n\r\n**Example:** The following code uses a hardcoded password to create a network credential:\r\n\r\n`\n...\nNetworkCredential netCred =\n           new NetworkCredential(\"scott\", \"tiger\", domain);\n...\n`\r\n\r\nThis code will run successfully, but anyone who has access to it will have access to the password. After the program ships, there is likely no way to change the network credential user \"scott\" with a password of \"tiger\" unless the program is patched. An employee with access to this information can use it to break into the system. If attackers have access to the executable for the application they can disassemble the code, which will contain the values of the passwords used."
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "259",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "798",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "3.0",
                "Impact": "4.0",
                "Probability": "4.0"
              }
            },
            {
              "id": "5F677A84-EE4C-443B-830C-0DDB50FF9269",
              "guid": "5F677A84-EE4C-443B-830C-0DDB50FF9269",
              "name": "Input Validation and Representation/Cross-Site Scripting/Poor Validation",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} uses HTML, XML, or other types of encoding that is not always enough to prevent malicious code from reaching the web browser.\r\nRelying on HTML, XML, and other types of encoding to validate user input can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "The use of certain encoding functions will prevent some, but not all cross-site scripting attacks. Depending on the context in which the data appear, characters beyond the basic &lt;, &gt;, &amp;, and \" that are HTML-encoded and those beyond &lt;, &gt;, &amp;, \", and ' that are XML-encoded may take on meta-meaning. Relying on such encoding functions is equivalent to using a weak blacklist to prevent cross-site scripting and might allow an attacker to inject malicious code that will be executed in the browser. Because accurately identifying the context in which the data appear statically is not always possible, the Fortify Secure Coding Rulepacks report cross-site scripting findings even when encoding is applied and presents them as Cross-Site Scripting: Poor Validation issues.\r\n\r\nCross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of reflected XSS, the untrusted source is typically a web request, while in the case of persisted (also known as stored) XSS it is typically a database or other back-end data store.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET code segment reads an employee ID number from an HTTP request, HTML-encodes it, and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Server.HtmlEncode(Request.Form[\"Login\"]) %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment implements the same functionality as in `Example 1`, albeit programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n`\r\n\r\n`\nstring ID = Server.HtmlEncode(Request.Form[\"Login\"]);\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Server.HtmlEncode(Login.Text);\n`\r\n\r\nThe code in these examples operate correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\n**Example 3:** The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the HTML-encoded name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= Server.HtmlEncode(name) %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** Likewise, the following ASP.NET code segment is functionally equivalent to `Example 3`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + Server.HtmlEncode(name));\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = Server.HtmlEncode(name);\n`\r\n\r\nAs in `Example 1` and `Example 2`, these code segments perform correctly when the values of `name` are well-behaved, but they do nothing to prevent exploits if they are not. Again, these code examples can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- As in `Example 3` and `Example 4`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "82",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "83",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "87",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "692",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "5563055D-679E-4E41-B8E2-8EF2151A45C2",
              "guid": "5563055D-679E-4E41-B8E2-8EF2151A45C2",
              "name": "Input Validation and Representation/Log Forging",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} writes unvalidated user input to the log on line {PrimaryLocation.line}. An attacker could take advantage of this behavior to forge log entries or inject malicious content into the log.\r\nWriting unvalidated user input to log files can allow an attacker to forge log entries or inject malicious content into the logs."
              },
              "fullDescription": {
                "text": "Log forging vulnerabilities occur when:\r\n\r\n1.Data enters an application from an untrusted source.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2.The data is written to an application or system log file.\r\n\r\nIn this case, the data is logged by <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nApplications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.\r\n\r\nInterpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. If the log file is processed automatically, the attacker may be able to render the file unusable by corrupting the format of the file or injecting unexpected characters. A more subtle attack might involve skewing the log file statistics. Forged or otherwise, corrupted log files can be used to cover an attacker's tracks or even to implicate another party in the commission of a malicious act [1]. In the worst case, an attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility [2].\r\n\r\n**Example:** The following web application code attempts to read an integer value from a request object. If the value fails to parse as an integer, then the input is logged with an error message indicating what happened.\r\n\r\n`\n...\nstring val = (string)Session[\"val\"];\ntry {\nint value = Int32.Parse(val);\n}\ncatch (FormatException fe) {\nlog.Info(\"Failed to parse val= \" + val);\n}\n...\n`\r\n\r\nIf a user submits the string \"`twenty-one`\" for `val`, the following entry is logged:\r\n\r\n`\nINFO: Failed to parse val=twenty-one\n`\r\n\r\nHowever, if an attacker submits the string \"`twenty-one%0a%0aINFO:+User+logged+out%3dbadguy`\", the following entry is logged:\r\n\r\n`\nINFO: Failed to parse val=twenty-one\r\n\r\nINFO: User logged out=badguy\n`\r\n\r\nClearly, attackers may use this same mechanism to insert arbitrary log entries."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "117",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "4.0",
                "Impact": "2.5",
                "Probability": "3.0"
              }
            },
            {
              "id": "7B0F1BB3-04F9-4702-877F-9B9CBD7B0843",
              "guid": "7B0F1BB3-04F9-4702-877F-9B9CBD7B0843",
              "name": "Security Features/Access Control/Database",
              "shortDescription": {
                "text": "Without proper access control, the method {EnclosingFunction.name} in {PrimaryLocation.file} can execute a SQL statement on line {PrimaryLocation.line} that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.\r\nWithout proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records."
              },
              "fullDescription": {
                "text": "Database access control errors occur when:\r\n\r\n1. Data enters a program from an untrusted source.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is used to specify the value of a primary key in a SQL query.\r\n\r\nIn this case, the data is used by <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nSqlCommand query = new SqlCommand(\n            \"SELECT * FROM invoices WHERE id = @id\", conn);\nquery.Parameters.AddWithValue(\"@id\", id);\nSqlDataReader objReader = query.ExecuteReader();\n...\n`\n</IfNotDef>\r\n\r\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nSqlCommand query = new SqlCommand(\n            \"SELECT * FROM invoices WHERE id = @id\", conn);\nquery.Parameters.AddWithValue(\"@id\", id);\nSqlDataReader objReader = query.ExecuteReader();\n...\n`\r\n\r\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nQuery query = sess.CreateQuery(\"SELECT * FROM invoices WHERE id = ?\");\nquery.SetInt16(0, id);\nList&lt;Invoice&gt; items = query.List&lt;Invoice&gt;();\n`\r\n\r\n**Example 2:** The following code performs the analogous query using NHibernate's HQL syntax and named parameters.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nQuery query = sess.CreateQuery(\"FROM Invoice inv WHERE inv.Id = :id\");\nquery.SetInt16(\"id\", id);\nList&lt;Invoice&gt; items = query.List&lt;Invoice&gt;();\n`\r\n\r\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nstring query = new SqlCommand(\n            \"SELECT * FROM invoices WHERE id = @id\", conn);\nObject[] parameters = { id };\nIDataReader responseReader = new InlineQuery().ExecuteReader(query, parameters);\n...\n`\r\n\r\n**Example 2:** The following code uses SubSonic 2's simple query tools to achieve the same effect.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nInvoiceCollection inv = new Select().From(\"invoices\").\n            Where(\"id\").IsEqualTo(id).ExecuteAsCollection&lt;InvoiceCollection&gt;();\n`\r\n\r\n**Example 3:** The following is the ActiveRecord Fluent Query version of the preceding examples, implemented in SubSonic 3.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nList&lt;Invoice&gt; invoices = db.Select.From&lt;Invoice&gt;().\n            Where(InvoiceTable.IDColumn).IsEqualTo(id).ExecuteTypedList&lt;Invoice&gt;();\n`\r\n\r\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nstring queryString = \"SELECT * FROM invoices WHERE id = :id\";\nSimpleQuery&lt;Invoice&gt; q = new SimpleQuery(queryString);\nq.SetParameter(\"id\", id);\nInvoice[] invoices = (Invoice []) q.Execute();\n`\r\n\r\n**Example 1:** The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user.\r\n\r\n`\n...\nint16 id = System.Convert.ToInt16(invoiceID.Text);\nSqlCommand query = new SqlCommand(\n            \"SELECT * FROM invoices WHERE id = @id\", conn);\nquery.Parameters.AddWithValue(\"@id\", id);\nSqlDataReader objReader = query.ExecuteReader();\n...\n`\r\n\r\nThe problem is that the developer has failed to consider all of the possible values of `id`. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker might bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "2.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "566",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "1.0",
                "Impact": "4.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "A119F6A0-A4BC-4C78-A432-9757CAB0C5E7",
              "guid": "A119F6A0-A4BC-4C78-A432-9757CAB0C5E7",
              "name": "Input Validation and Representation/Cross-Site Scripting/Persistent",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} sends unvalidated data to a web browser on line {PrimaryLocation.line}, which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
              },
              "fullDescription": {
                "text": "Cross-site scripting (XSS) vulnerabilities occur when:\r\n\r\n1. Data enters a web application through an untrusted source. In the case of persistent (also known as stored) XSS, the untrusted source is typically a database or other back-end data store, while in the case of reflected XSS it is typically a web request.\r\n\r\nIn this case, the data enters at <Replace key=\"SourceFunction\" link=\"SourceLocation\"/> in {SourceLocation.file} at line {SourceLocation.line}.\r\n\r\n2. The data is included in dynamic content that is sent to a web user without being validated.\r\n\r\nIn this case, the data is sent at <Replace key=\"SinkFunction\" link=\"SinkLocation\"/> in {SinkLocation.file} at line {SinkLocation.line}.\r\n\r\nThe malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser executes. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\r\n\r\n**Example 1:** The following ASP.NET Web Form queries a database for an employee with a given employee ID and prints the name corresponding with the ID.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n%&gt;\n...\nEmployee Name: &lt;%= name %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n&lt;/script&gt;\n`\r\n\r\nWhere `EmployeeName` is a form control defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   ...\n   &lt;asp:Label id=\"EmployeeName\" runat=\"server\"&gt;\n   ...\n&lt;/form&gt;\n`\r\n\r\n**Example 2:** The following ASP.NET code segment is functionally equivalent to `Example 1`, but implements all of the form elements programmatically.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\n`\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nResponse.Write(\"Employee Name: \" + name);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.Label EmployeeName;\n...\nstring query = \"select * from emp where id=\" + eid;\nsda = new SqlDataAdapter(query, conn);\nDataTable dt = new DataTable();\nsda.Fill(dt);\nstring name = dt.Rows[0][\"Name\"];\n...\nEmployeeName.Text = name;\n`\r\n\r\nThese code examples function correctly when the values of `name` are well-behaved, but they do nothing to prevent exploits if they are not. This code can appear less dangerous because the value of `name` is read from a database, whose contents are apparently managed by the application. However, if the value of `name` originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker may execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a \"guestbook\" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.\r\n\r\n**Example 3:** The following ASP.NET Web Form reads an employee ID number from an HTTP request and displays it to the user.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\n</IfNotDef>\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n`\n&lt;%= Request.Form[\"Login\"] %&gt;\n`\r\n\r\n`\n&lt;script runat=\"server\"&gt;\n...\nEmployeeID.Text = Login.Text;\n...\n&lt;/script&gt;\n`\r\n\r\nWhere `Login` and `EmployeeID` are form controls defined as follows:\r\n\r\n`\n&lt;form runat=\"server\"&gt;\n   &lt;asp:TextBox runat=\"server\" id=\"Login\"/&gt;\n   ...\n   &lt;asp:Label runat=\"server\" id=\"EmployeeID\"/&gt;\n&lt;/form&gt;\n`\r\n\r\n**Example 4:** The following ASP.NET code segment shows the programmatic way to implement `Example 3`.\n<IfNotDef var=\"ConditionalDescriptions\">\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\n</IfNotDef>\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\n`\nstring ID = Request.Form[\"Login\"];\nResponse.Write(ID);\n`\r\n\r\n`\nprotected System.Web.UI.WebControls.TextBox Login;\nprotected System.Web.UI.WebControls.Label EmployeeID;\n...\nEmployeeID.Text = Login.Text;\n`\r\n\r\nAs in `Example 1` and `Example 2`, these examples operate correctly if `Login` contains only standard alphanumeric text. If `Login` has a value that includes metacharacters or source code, then the code will be executed by the web browser as it displays the HTTP response.\r\n\r\nInitially this might not appear to be much of a vulnerability. After all, why would someone enter a URL which causes malicious code to run on their own computer?  The real danger is that an attacker will create the malicious URL, then use email or social engineering tricks in order to lure victims into clicking a link. When the victims click the link, they unwittingly reflect the malicious content through the vulnerable web application and back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.\r\n\r\nAs the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:\r\n\r\n- As in `Example 1` and `Example 2`, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.\r\n\r\n- As in `Example 3` and `Example 4`, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or emailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.\r\n\r\n- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.\r\n\r\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\r\n\r\n<IfNotDef var=\"ConditionalDescriptions\">\nA number of modern web frameworks provide mechanisms to perform user input validation (including ASP.NET Request Validation and WCF). To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. With ASP.NET Request Validation, we also provide evidence for when validation is explicitly disabled. We refer to this feature as Context-Sensitive Ranking. To further assist the Fortify user with the auditing process, the Fortify Software Security Research group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.\n</IfNotDef>"
              },
              "defaultConfiguration": {
                "level": "error",
                "properties": {
                  "DefaultSeverity": "4.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "79",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "80",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "5.0",
                "Probability": "5.0"
              }
            },
            {
              "id": "E13C18A1-FFDA-4808-A5E2-AED2A76F25B9",
              "guid": "E13C18A1-FFDA-4808-A5E2-AED2A76F25B9",
              "name": "Security Features/Privacy Violation/Heap Inspection",
              "shortDescription": {
                "text": "The method {EnclosingFunction.name} in {PrimaryLocation.file} stores sensitive data in an insecure manner, making it possible to extract the data via inspecting the heap.\r\nStoring sensitive data in an insecure manner makes it possible to extract the data via inspecting the heap."
              },
              "fullDescription": {
                "text": "Sensitive data (such as passwords, social security numbers, credit card numbers, encryption keys etc.) stored in an unmanaged memory buffer can be leaked if it is not explicitly zeroed out, even if it is freed. The unmanaged buffers are often not encrypted by default, so anyone that can read the process' memory will be able to see the contents. Furthermore, if the process' memory gets swapped out to disk, the unencrypted contents of the string will be written to a swap file. In the event of an application crash, a memory dump of the application might reveal sensitive data.\r\n\r\n**Example 1:** The following example creates a symmetric key before using it.\n`\npublic static void CreateAndUseEncryptor()\n{\n  SymmetricAlgorithm aesAlgorithm = SymmetricAlgorithm.Create(\"AES\");\n  aesAlgorithm.GenerateKey();\n  aesAlgorithm.GenerateIV();\n  Encrypt(aesAlgorithm);\n}\n`\r\n\r\nSince neither `CreateAndUseEncryptor()` nor `Encrypt()` run `Clear()` or `Dispose(true)` on the `SymmetricAlgorithm` object, the key and initialization vector (IV) will not be zeroed out in memory."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "226",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "2.0",
                "Impact": "3.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "BA77577B-ACFE-4CD9-A34A-30ED01D9A9C8",
              "guid": "BA77577B-ACFE-4CD9-A34A-30ED01D9A9C8",
              "name": "Environment/ASP.NET Misconfiguration/Debug Information",
              "shortDescription": {
                "text": "Debugging messages help attackers learn about the system and plan a form of attack."
              },
              "fullDescription": {
                "text": "ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. The `debug` attribute of the `&lt;compilation&gt;` tag defines whether compiled binaries should include debugging information.\r\n\r\nIn this case, the `debug` attribute is set to `true` on the `&lt;compilation&gt;` tag defined in {PrimaryLocation.file} at line {PrimaryLocation.line}.\r\n\r\nThe use of debug binaries causes an application to provide as much information about itself as possible to the user. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production. Attackers may leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application."
              },
              "defaultConfiguration": {
                "properties": {
                  "DefaultSeverity": "3.0"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "11",
                    "toolComponent": {
                      "name": "CWE",
                      "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ],
              "properties": {
                "Accuracy": "5.0",
                "Impact": "2.0",
                "Probability": "3.0"
              }
            },
            {
              "id": "00ED6F4C-5E55-4924-B574-86DADF179153",
              "guid": "00ED6F4C-5E55-4924-B574-86DADF179153"
            },
            {
              "id": "04EE4897-6520-4745-8A57-DDEC63A9C424",
              "guid": "04EE4897-6520-4745-8A57-DDEC63A9C424"
            },
            {
              "id": "14502671-B950-42B0-9228-697394964BBC",
              "guid": "14502671-B950-42B0-9228-697394964BBC"
            },
            {
              "id": "58299F98-34F5-4C73-A2DE-BF7FFBADFD07",
              "guid": "58299F98-34F5-4C73-A2DE-BF7FFBADFD07"
            },
            {
              "id": "66084F96-667E-4913-BAA0-3898276BFF32",
              "guid": "66084F96-667E-4913-BAA0-3898276BFF32"
            },
            {
              "id": "73AC4C78-FEB3-440B-A250-3BCA6B280314",
              "guid": "73AC4C78-FEB3-440B-A250-3BCA6B280314"
            },
            {
              "id": "8DA01A32-8C03-49AA-BA8E-FF2FDED15E900",
              "guid": "8DA01A32-8C03-49AA-BA8E-FF2FDED15E90"
            },
            {
              "id": "B186FB3B-4C03-455D-BA10-2764FDA0F772",
              "guid": "B186FB3B-4C03-455D-BA10-2764FDA0F772"
            },
            {
              "id": "B7EF47C8-3CBA-41C3-9008-AF7CE21A9282",
              "guid": "B7EF47C8-3CBA-41C3-9008-AF7CE21A9282"
            },
            {
              "id": "B874A8E0-3ED7-4B7F-AD6E-D677A203FACE",
              "guid": "B874A8E0-3ED7-4B7F-AD6E-D677A203FACE"
            },
            {
              "id": "D0569C14-482C-414D-89D5-14866A57724A",
              "guid": "D0569C14-482C-414D-89D5-14866A57724A"
            },
            {
              "id": "E2445653-8A3C-4CBD-813B-2E34AAE3B2660",
              "guid": "E2445653-8A3C-4CBD-813B-2E34AAE3B266"
            },
            {
              "id": "F8E7B91F-3761-4A25-BE51-78AE78FF9B950",
              "guid": "F8E7B91F-3761-4A25-BE51-78AE78FF9B95"
            }
          ],
          "supportedTaxonomies": [
            {
              "name": "CWE",
              "index": 0,
              "guid": "25F72D7E-8A92-459D-AD67-64853F788765"
            }
          ]
        }
      },
      "originalUriBaseIds": {
        "%SRCROOT%": {
          "uri": "file:///D:/work/app/"
        }
      },
      "results": [
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [226](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "endLine": 229,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [520](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 517,
                  "endLine": 523,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [186](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "endLine": 189,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [201](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 198,
                  "endLine": 204,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [529](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 526,
                  "endLine": 532,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [492](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 489,
                  "endLine": 495,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n\n                sql = \"select * from Categories\" + catClause;\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [260](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "        public DataSet GetComments(string productCode)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Comments where productCode = @productCode\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [271](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 268,
                  "endLine": 274,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [226](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "endLine": 229,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [550](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 547,
                  "endLine": 553,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [327](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 324,
                  "endLine": 330,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [282](1) of [MySqlDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 279,
                  "endLine": 285,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [191](1) of [SqliteDbProvider.cs](1), the method [GetCustomerEmail()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 191,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 188,
                  "endLine": 194,
                  "snippet": {
                    "text": "                    connection.Open();\n\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    output = command.ExecuteScalar().ToString();\n                } \n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 191
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [321](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 318,
                  "endLine": 324,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [213](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 210,
                  "endLine": 216,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [500](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 497,
                  "endLine": 503,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [274](1) of [SqliteDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 271,
                  "endLine": 277,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.3611112"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "                \n        public DataSet GetCatalogData()\n        {\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(\"select * from Products\", connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [353](1) of [SqliteDbProvider.cs](1), the method [GetPasswordByEmail()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 353,
                  "snippet": {
                    "text": "                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 350,
                  "endLine": 356,
                  "snippet": {
                    "text": "\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 353
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [282](1) of [MySqlDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 279,
                  "endLine": 285,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [500](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 497,
                  "endLine": 503,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_FileName()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "                FileName = cmd,"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "            ProcessStartInfo startInfo = new ProcessStartInfo\n            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_Arguments()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "                Arguments = args,"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "endLine": 23,
                  "snippet": {
                    "text": "            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n                RedirectStandardError = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_Arguments()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "                Arguments = args,"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "endLine": 23,
                  "snippet": {
                    "text": "            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n                RedirectStandardError = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [282](1) of [MySqlDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 279,
                  "endLine": 285,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.3611112"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [413](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 410,
                  "endLine": 416,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [529](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 526,
                  "endLine": 532,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [449](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 446,
                  "endLine": 452,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [445](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 442,
                  "endLine": 448,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [321](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 318,
                  "endLine": 324,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [325](1) of [SqliteDbProvider.cs](1), the method [GetSecurityQuestionAndAnswer()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 325,
                  "snippet": {
                    "text": "                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 322,
                  "endLine": 328,
                  "snippet": {
                    "text": "            {\n                connection.Open();\n\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 325
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [529](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 526,
                  "endLine": 532,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [213](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 210,
                  "endLine": 216,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [302](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 299,
                  "endLine": 305,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [351](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 348,
                  "endLine": 354,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [500](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 497,
                  "endLine": 503,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [282](1) of [MySqlDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 279,
                  "endLine": 285,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [186](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "endLine": 189,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [347](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 344,
                  "endLine": 350,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [415](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 412,
                  "endLine": 418,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [226](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "endLine": 229,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [60](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "\n        public DataSet GetCatalogData()\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_FileName()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "                FileName = cmd,"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "            ProcessStartInfo startInfo = new ProcessStartInfo\n            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [550](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 547,
                  "endLine": 553,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [246](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "endLine": 249,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Offices where city = @city\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [500](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 497,
                  "endLine": 503,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "endLine": 69,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [246](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "endLine": 249,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Offices where city = @city\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "B5FE987A-0FCD-4E72-821A-BEB4E700F407",
          "ruleIndex": 33,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [orders.aspx.cs](1) sends unvalidated data to a web browser on line [77](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "snippet": {
                    "text": "                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "endLine": 80,
                  "snippet": {
                    "text": "                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n                    catch (Exception ex)\n                    {\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "187D7E8E-9941-436F-A731-8128C97BF567",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [mainpage.aspx.cs](1) sends unvalidated data to a web browser on line [42](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "snippet": {
                    "text": "                    cell2.Text = row[col].ToString();"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "endLine": 45,
                  "snippet": {
                    "text": "                    TableCell cell1 = new TableCell();\n                    TableCell cell2 = new TableCell();\n                    cell1.Text = col.ColumnName.ToString();\n                    cell2.Text = row[col].ToString();\n                    \n                    tablerow.Cells.Add(cell1);\n                    tablerow.Cells.Add(cell2);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [29](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "endLine": 32,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [26](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "endLine": 29,
                  "snippet": {
                    "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [67](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [32](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"</div>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "endLine": 35,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [31](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"</a>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "endLine": 34,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [27](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "endLine": 30,
                  "snippet": {
                    "text": "                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [26](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "endLine": 29,
                  "snippet": {
                    "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [201](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 198,
                  "endLine": 204,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [226](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "endLine": 229,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [321](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 318,
                  "endLine": 324,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [123](1) of [MySqlDbProvider.cs](1), the method [IsValidCustomerLogin()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "snippet": {
                    "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 120,
                  "endLine": 126,
                  "snippet": {
                    "text": "                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n            \n                //TODO: User reader instead (for all calls)\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [550](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 547,
                  "endLine": 553,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [351](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 348,
                  "endLine": 354,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_FileName()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "                FileName = cmd,"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "            ProcessStartInfo startInfo = new ProcessStartInfo\n            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [282](1) of [MySqlDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 279,
                  "endLine": 285,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.3611112"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [23](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "snippet": {
                    "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "endLine": 26,
                  "snippet": {
                    "text": "\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [500](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 497,
                  "endLine": 503,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [302](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 299,
                  "endLine": 305,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [302](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 299,
                  "endLine": 305,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [274](1) of [SqliteDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 271,
                  "endLine": 277,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.3611112"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [121](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "endLine": 124,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [235](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 232,
                  "endLine": 238,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [445](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 442,
                  "endLine": 448,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [186](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "endLine": 189,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [235](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 232,
                  "endLine": 238,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [327](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 324,
                  "endLine": 330,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [260](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "        public DataSet GetComments(string productCode)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Comments where productCode = @productCode\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [327](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 324,
                  "endLine": 330,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [201](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 198,
                  "endLine": 204,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [250](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 247,
                  "endLine": 253,
                  "snippet": {
                    "text": "\n        public DataSet GetComments(string productCode)\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [37](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "                using (SqliteConnection conn = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "        {   \n            try\n            {\n                using (SqliteConnection conn = new SqliteConnection(_connectionString))\n                {\n                    conn.Open();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_Arguments()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "                Arguments = args,"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "endLine": 23,
                  "snippet": {
                    "text": "            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n                RedirectStandardError = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [66](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "endLine": 69,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [orders.aspx.cs](1) sends unvalidated data to a web browser on line [83](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "snippet": {
                    "text": "                        litErrorDetailMessage.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;"
                  }
                },
                "contextRegion": {
                  "startLine": 80,
                  "endLine": 86,
                  "snippet": {
                    "text": "                    {\n                        //litOrderDetails.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;\n                        PanelShowDetailFailure.Visible = true;\n                        litErrorDetailMessage.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;\n                    }\n                }\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [LoadComments()](1) in [productdetails.aspx.cs](1) sends unvalidated data to a web browser on line [82](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            lblOutput.Text = output;"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "\n            }\n\n            lblOutput.Text = output;\n            lblComments.Text = comments;\n\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [66](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "endLine": 69,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [449](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 446,
                  "endLine": 452,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [250](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 247,
                  "endLine": 253,
                  "snippet": {
                    "text": "\n        public DataSet GetComments(string productCode)\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [282](1) of [MySqlDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 279,
                  "endLine": 285,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.3611112"
          }
        },
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [492](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 489,
                  "endLine": 495,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n\n                sql = \"select * from Categories\" + catClause;\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [246](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "endLine": 249,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Offices where city = @city\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [204](1) of [MySqlDbProvider.cs](1), the method [GetCustomerEmail()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 204,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 201,
                  "endLine": 207,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    output = command.ExecuteScalar().ToString();\n                } \n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 204
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [347](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 344,
                  "endLine": 350,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [279](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "endLine": 282,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [550](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 547,
                  "endLine": 553,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [529](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 526,
                  "endLine": 532,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [123](1) of [MySqlDbProvider.cs](1), the method [IsValidCustomerLogin()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123,
                  "snippet": {
                    "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 120,
                  "endLine": 126,
                  "snippet": {
                    "text": "                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n            \n                //TODO: User reader instead (for all calls)\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 123
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [413](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 410,
                  "endLine": 416,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [213](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 210,
                  "endLine": 216,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [415](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 412,
                  "endLine": 418,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [201](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 198,
                  "endLine": 204,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [260](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "        public DataSet GetComments(string productCode)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Comments where productCode = @productCode\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [424](1) of [SqliteDbProvider.cs](1), the method [GetProductDetails()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 424,
                  "snippet": {
                    "text": "                da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 421,
                  "endLine": 427,
                  "snippet": {
                    "text": "                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"comments\");\n\n                DataRelation dr = new DataRelation(\"prod_comments\",\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 424
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [420](1) of [SqliteDbProvider.cs](1), the method [GetProductDetails()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 420,
                  "snippet": {
                    "text": "                da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 417,
                  "endLine": 423,
                  "snippet": {
                    "text": "                connection.Open();\n\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 420
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [327](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 324,
                  "endLine": 330,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [279](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "endLine": 282,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [282](1) of [MySqlDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 279,
                  "endLine": 285,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.3611112"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [121](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "endLine": 124,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [274](1) of [SqliteDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 271,
                  "endLine": 277,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [37](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "                using (SqliteConnection conn = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "        {   \n            try\n            {\n                using (SqliteConnection conn = new SqliteConnection(_connectionString))\n                {\n                    conn.Open();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [325](1) of [SqliteDbProvider.cs](1), the method [GetSecurityQuestionAndAnswer()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 325,
                  "snippet": {
                    "text": "                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 322,
                  "endLine": 328,
                  "snippet": {
                    "text": "            {\n                connection.Open();\n\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 325
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [449](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 446,
                  "endLine": 452,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [355](1) of [MySqlDbProvider.cs](1), the method [GetPasswordByEmail()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 355,
                  "snippet": {
                    "text": "                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 352,
                  "endLine": 358,
                  "snippet": {
                    "text": "                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 355
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [413](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 410,
                  "endLine": 416,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [415](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 412,
                  "endLine": 418,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [260](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "        public DataSet GetComments(string productCode)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Comments where productCode = @productCode\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [226](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "endLine": 229,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [520](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 517,
                  "endLine": 523,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [294](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 291,
                  "endLine": 297,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [121](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "endLine": 124,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [302](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 299,
                  "endLine": 305,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "endLine": 69,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [445](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 442,
                  "endLine": 448,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [201](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 198,
                  "endLine": 204,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [226](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "endLine": 229,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [LoadComments()](1) in [storedxss.aspx.cs](1) sends unvalidated data to a web browser on line [52](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "snippet": {
                    "text": "            lblComments.Text = comments;"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "endLine": 55,
                  "snippet": {
                    "text": "                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n        }\n\n        void FixedLoadComments()\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_Arguments()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "                Arguments = args,"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "endLine": 23,
                  "snippet": {
                    "text": "            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n                RedirectStandardError = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [279](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "endLine": 282,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [ButtonCheckEmail_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [38](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "snippet": {
                    "text": "            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "endLine": 41,
                  "snippet": {
                    "text": "                \n                return;\n            }    \n            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";\n            PanelForgotPasswordStep2.Visible = true;\n            PanelForgotPasswordStep3.Visible = false;\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [27](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "endLine": 30,
                  "snippet": {
                    "text": "                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [235](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 232,
                  "endLine": 238,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [279](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "endLine": 282,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [279](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "endLine": 282,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [30](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [413](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 410,
                  "endLine": 416,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [226](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "endLine": 229,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [500](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 497,
                  "endLine": 503,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "                \n        public DataSet GetCatalogData()\n        {\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(\"select * from Products\", connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [445](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 442,
                  "endLine": 448,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [351](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 348,
                  "endLine": 354,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [30](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [verbtampering.aspx.cs](1) sends unvalidated data to a web browser on line [15](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/verbtampering.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "snippet": {
                    "text": "            lblTampered.Text = tamperedMessage;"
                  }
                },
                "contextRegion": {
                  "startLine": 12,
                  "endLine": 18,
                  "snippet": {
                    "text": "\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            lblTampered.Text = tamperedMessage;\n        } \n    }\n}\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/verbtampering.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [282](1) of [MySqlDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 279,
                  "endLine": 285,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [347](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 344,
                  "endLine": 350,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [67](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [351](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 348,
                  "endLine": 354,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [226](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 223,
                  "endLine": 229,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 226
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [351](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 348,
                  "endLine": 354,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [294](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 291,
                  "endLine": 297,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [121](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "endLine": 124,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_Arguments()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "                Arguments = args,"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "endLine": 23,
                  "snippet": {
                    "text": "            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n                RedirectStandardError = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [550](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 547,
                  "endLine": 553,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [60](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "\n        public DataSet GetCatalogData()\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [500](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 497,
                  "endLine": 503,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [186](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "endLine": 189,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [ButtonCheckEmail_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [38](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "snippet": {
                    "text": "            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "endLine": 41,
                  "snippet": {
                    "text": "                \n                return;\n            }    \n            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";\n            PanelForgotPasswordStep2.Visible = true;\n            PanelForgotPasswordStep3.Visible = false;\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [29](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "endLine": 32,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [351](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 348,
                  "endLine": 354,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [ButtonCheckEmail_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [37](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "                \n                return;\n            }    \n            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";\n            PanelForgotPasswordStep2.Visible = true;\n            PanelForgotPasswordStep3.Visible = false;\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [121](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "endLine": 124,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [32](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"</div>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "endLine": 35,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "                \n        public DataSet GetCatalogData()\n        {\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(\"select * from Products\", connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [520](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 517,
                  "endLine": 523,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [578](1) of [SqliteDbProvider.cs](1), the method [GetCustomerEmails()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 578,
                  "snippet": {
                    "text": "                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 575,
                  "endLine": 581,
                  "snippet": {
                    "text": "            {\n                connection.Open();\n\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 578
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [347](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 344,
                  "endLine": 350,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "                \n        public DataSet GetCatalogData()\n        {\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(\"select * from Products\", connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [60](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "\n        public DataSet GetCatalogData()\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [260](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "        public DataSet GetComments(string productCode)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Comments where productCode = @productCode\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [415](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 412,
                  "endLine": 418,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [250](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 247,
                  "endLine": 253,
                  "snippet": {
                    "text": "\n        public DataSet GetComments(string productCode)\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [60](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "\n        public DataSet GetCatalogData()\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [529](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 526,
                  "endLine": 532,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [28](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "endLine": 31,
                  "snippet": {
                    "text": "                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [550](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 547,
                  "endLine": 553,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [321](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 318,
                  "endLine": 324,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [217](1) of [SqliteDbProvider.cs](1), the method [GetCustomerDetails()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 217,
                  "snippet": {
                    "text": "                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 214,
                  "endLine": 220,
                  "snippet": {
                    "text": "                {\n                    connection.Open();\n\n                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                    da.Fill(ds);\n                }\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 217
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [235](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 232,
                  "endLine": 238,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [294](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 291,
                  "endLine": 297,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [415](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 412,
                  "endLine": 418,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [492](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 489,
                  "endLine": 495,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n\n                sql = \"select * from Categories\" + catClause;\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "10F0F640-CC94-4681-8E7B-452D1CC42D5A",
          "ruleIndex": 59,
          "level": "error",
          "message": {
            "text": "Hardcoded passwords may compromise system security in a way that cannot be easily remedied."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-1713376481/addnewuser.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "snippet": {
                    "text": "\t\tconst string passwordQuestion = \"What is your favorite color\";"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "endLine": 20,
                  "snippet": {
                    "text": "{\n\tpublic partial class AddNewUser : System.Web.UI.Page\n\t{\n\t\tconst string passwordQuestion = \"What is your favorite color\";\n\n\t    protected void Page_Load(object sender, EventArgs e)\n\t    {\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-1713376481/addnewuser.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [416](1) of [MySqlDbProvider.cs](1), the method [GetProductDetails()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 416,
                  "snippet": {
                    "text": "                da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 413,
                  "endLine": 419,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 416
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [420](1) of [MySqlDbProvider.cs](1), the method [GetProductDetails()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 420,
                  "snippet": {
                    "text": "                da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 417,
                  "endLine": 423,
                  "snippet": {
                    "text": "                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"comments\");\n\n                DataRelation dr = new DataRelation(\"prod_comments\",\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 420
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [321](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 318,
                  "endLine": 324,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [37](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "                using (SqliteConnection conn = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "        {   \n            try\n            {\n                using (SqliteConnection conn = new SqliteConnection(_connectionString))\n                {\n                    conn.Open();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [246](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "endLine": 249,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Offices where city = @city\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [321](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 318,
                  "endLine": 324,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [60](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "\n        public DataSet GetCatalogData()\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [32](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"</div>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "endLine": 35,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [347](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 344,
                  "endLine": 350,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [201](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 198,
                  "endLine": 204,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [302](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 299,
                  "endLine": 305,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [282](1) of [MySqlDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 279,
                  "endLine": 285,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 282
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.3611112"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [520](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 517,
                  "endLine": 523,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "F2C14D66-2F66-4D07-A84A-4A56BDDF7873",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "Hardcoded passwords may compromise system security in a way that cannot be easily remedied."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/DbConstants.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "snippet": {
                    "text": "        public const string KEY_PWD = \"pwd\";"
                  }
                },
                "contextRegion": {
                  "startLine": 13,
                  "endLine": 19,
                  "snippet": {
                    "text": "        public const string KEY_FILE_NAME = \"filename\";\n        public const string KEY_DATABASE = \"database\";\n        public const string KEY_UID = \"uid\";\n        public const string KEY_PWD = \"pwd\";\n            \n        //DB Types\n        public const string DB_TYPE_MYSQL = \"MySql\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/DbConstants.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [213](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 210,
                  "endLine": 216,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [445](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 442,
                  "endLine": 448,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [445](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 442,
                  "endLine": 448,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_FileName()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "                FileName = cmd,"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "            ProcessStartInfo startInfo = new ProcessStartInfo\n            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [186](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "endLine": 189,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [235](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 232,
                  "endLine": 238,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [529](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 526,
                  "endLine": 532,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [449](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 446,
                  "endLine": 452,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [302](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 299,
                  "endLine": 305,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_Arguments()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "                Arguments = args,"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "endLine": 23,
                  "snippet": {
                    "text": "            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n                RedirectStandardError = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [btnFind_Click()](1) in [sqlinjectiondiscovery.aspx.cs](1) sends unvalidated data to a web browser on line [30](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "                lblOutput.Text = String.IsNullOrEmpty(output) ? \"Customer Number does not exist\" : output;"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "                string name = txtID.Text.Substring(0, 3);\n                string output = du.GetEmailByCustomerNumber(name);\n\n                lblOutput.Text = String.IsNullOrEmpty(output) ? \"Customer Number does not exist\" : output;\n            }\n            catch (Exception ex)\n            {\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [355](1) of [MySqlDbProvider.cs](1), the method [GetPasswordByEmail()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 355,
                  "snippet": {
                    "text": "                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 352,
                  "endLine": 358,
                  "snippet": {
                    "text": "                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 355
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [31](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"</a>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "endLine": 34,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [274](1) of [SqliteDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 271,
                  "endLine": 277,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [250](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 247,
                  "endLine": 253,
                  "snippet": {
                    "text": "\n        public DataSet GetComments(string productCode)\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [260](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "        public DataSet GetComments(string productCode)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Comments where productCode = @productCode\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [294](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 291,
                  "endLine": 297,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [294](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 291,
                  "endLine": 297,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [pathmanipulation.aspx.cs](1) sends unvalidated data to a web browser on line [43](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "snippet": {
                    "text": "                        lblStatus.Text = \"File not found: \" + filename;   "
                  }
                },
                "contextRegion": {
                  "startLine": 40,
                  "endLine": 46,
                  "snippet": {
                    "text": "                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                        lblStatus.Text = \"File not found: \" + filename;   \n                    }\n                }\n        \t//}\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [201](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 198,
                  "endLine": 204,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [121](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "endLine": 124,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [302](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 299,
                  "endLine": 305,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [271](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 268,
                  "endLine": 274,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [274](1) of [SqliteDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 271,
                  "endLine": 277,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.3611112"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [260](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "        public DataSet GetComments(string productCode)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Comments where productCode = @productCode\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [533](1) of [SqliteDbProvider.cs](1), the method [GetEmailByName()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 533,
                  "snippet": {
                    "text": "                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 530,
                  "endLine": 536,
                  "snippet": {
                    "text": "            {\n                connection.Open();\n\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 533
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [250](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 247,
                  "endLine": 253,
                  "snippet": {
                    "text": "\n        public DataSet GetComments(string productCode)\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [260](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 257,
                  "endLine": 263,
                  "snippet": {
                    "text": "        public DataSet GetComments(string productCode)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Comments where productCode = @productCode\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 260
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_FileName()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "                FileName = cmd,"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "            ProcessStartInfo startInfo = new ProcessStartInfo\n            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [413](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 410,
                  "endLine": 416,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [LoadComments()](1) in [productdetails.aspx.cs](1) sends unvalidated data to a web browser on line [82](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            lblOutput.Text = output;"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "\n            }\n\n            lblOutput.Text = output;\n            lblComments.Text = comments;\n\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_Arguments()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "                Arguments = args,"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "endLine": 23,
                  "snippet": {
                    "text": "            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n                RedirectStandardError = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [415](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 412,
                  "endLine": 418,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [201](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 198,
                  "endLine": 204,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 201
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [67](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [550](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 547,
                  "endLine": 553,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [294](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 291,
                  "endLine": 297,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [492](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 489,
                  "endLine": 495,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n\n                sql = \"select * from Categories\" + catClause;\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "                \n        public DataSet GetCatalogData()\n        {\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(\"select * from Products\", connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [415](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 412,
                  "endLine": 418,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [271](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 268,
                  "endLine": 274,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [529](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 526,
                  "endLine": 532,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [327](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 324,
                  "endLine": 330,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [327](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 324,
                  "endLine": 330,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [302](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 299,
                  "endLine": 305,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 302
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [66](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "endLine": 69,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_FileName()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "                FileName = cmd,"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "            ProcessStartInfo startInfo = new ProcessStartInfo\n            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [60](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "\n        public DataSet GetCatalogData()\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [60](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "\n        public DataSet GetCatalogData()\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [60](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 57,
                  "endLine": 63,
                  "snippet": {
                    "text": "\n        public DataSet GetCatalogData()\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 60
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [37](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "                using (SqliteConnection conn = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "        {   \n            try\n            {\n                using (SqliteConnection conn = new SqliteConnection(_connectionString))\n                {\n                    conn.Open();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [492](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 489,
                  "endLine": 495,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n\n                sql = \"select * from Categories\" + catClause;\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [522](1) of [MySqlDbProvider.cs](1), the method [GetEmailByName()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 522,
                  "snippet": {
                    "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 519,
                  "endLine": 525,
                  "snippet": {
                    "text": "            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 522
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [37](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "                using (SqliteConnection conn = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "        {   \n            try\n            {\n                using (SqliteConnection conn = new SqliteConnection(_connectionString))\n                {\n                    conn.Open();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [26](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "endLine": 29,
                  "snippet": {
                    "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [LoadComments()](1) in [productdetails.aspx.cs](1) sends unvalidated data to a web browser on line [82](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            lblOutput.Text = output;"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "\n            }\n\n            lblOutput.Text = output;\n            lblComments.Text = comments;\n\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [186](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "endLine": 189,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [ButtonCheckEmail_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [37](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "                \n                return;\n            }    \n            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";\n            PanelForgotPasswordStep2.Visible = true;\n            PanelForgotPasswordStep3.Visible = false;\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [213](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 210,
                  "endLine": 216,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_FileName()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "                FileName = cmd,"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "            ProcessStartInfo startInfo = new ProcessStartInfo\n            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [28](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "endLine": 31,
                  "snippet": {
                    "text": "                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [449](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 446,
                  "endLine": 452,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [213](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 210,
                  "endLine": 216,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [298](1) of [SqliteDbProvider.cs](1), the method [UpdateCustomerPassword()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 295,
                  "endLine": 301,
                  "snippet": {
                    "text": "                {\n                    connection.Open();\n\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                \n                    int rows_added = command.ExecuteNonQuery();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [351](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 348,
                  "endLine": 354,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D29C2116-BD82-455D-A506-7179C66D2123",
          "ruleIndex": 36,
          "level": "error",
          "message": {
            "text": "On line [539](1) of [MySqlDbProvider.cs](1), the method [GetEmailByCustomerNumber()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 539,
                  "snippet": {
                    "text": "                output = (String)MySqlHelper.ExecuteScalar(_connectionString, \"select email from CustomerLogin where customerNumber = \" + num);"
                  }
                },
                "contextRegion": {
                  "startLine": 536,
                  "endLine": 542,
                  "snippet": {
                    "text": "            try\n            {\n            \n                output = (String)MySqlHelper.ExecuteScalar(_connectionString, \"select email from CustomerLogin where customerNumber = \" + num);\n                /*using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + num;\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 539
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [520](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 517,
                  "endLine": 523,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [304](1) of [MySqlDbProvider.cs](1), the method [UpdateCustomerPassword()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 304,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 301,
                  "endLine": 307,
                  "snippet": {
                    "text": "            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                \n                    int rows_added = command.ExecuteNonQuery();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 304
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "endLine": 69,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [492](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 489,
                  "endLine": 495,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n\n                sql = \"select * from Categories\" + catClause;\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [520](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 517,
                  "endLine": 523,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "0228E151-63CC-40C0-A202-62C6CE513473",
          "ruleIndex": 43,
          "level": "error",
          "message": {
            "text": "The function [IsValidCustomerLogin()](1) in [SqliteDbProvider.cs](1) sometimes fails to release a system resource allocated by [SqliteConnection()](1) on line [82](1).\r\nThe program can potentially fail to release a system resource."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "snippet": {
                    "text": "                connection.Open();"
                  }
                },
                "contextRegion": {
                  "startLine": 81,
                  "endLine": 87,
                  "snippet": {
                    "text": "                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [27](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "endLine": 30,
                  "snippet": {
                    "text": "                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "3F9B0D26-E122-4770-BF9B-F0D11A026495",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "XML parser configured in [xmlinjection.aspx.cs](1):[52](1) does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack\r\nUsing XML parsers configured to not prevent nor limit external entities resolution can expose the parser to an XML External Entities attack\r\n."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/xmlinjection.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "snippet": {
                    "text": "            doc.Load(Server.MapPath(\"/App_Data/XmlInjectionUsers.xml\"));"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "endLine": 55,
                  "snippet": {
                    "text": "        {\n            users = new List<XmlUser>();\n            XmlDocument doc = new XmlDocument();\n            doc.Load(Server.MapPath(\"/App_Data/XmlInjectionUsers.xml\"));\n            foreach (XmlNode node in doc.ChildNodes[1].ChildNodes)\n            {\n                if (node.Name == \"user\")\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/xmlinjection.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [186](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "endLine": 189,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [27](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "endLine": 30,
                  "snippet": {
                    "text": "                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [327](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 324,
                  "endLine": 330,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [32](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"</div>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 29,
                  "endLine": 35,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [550](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 547,
                  "endLine": 553,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 550
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [271](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 268,
                  "endLine": 274,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [445](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 442,
                  "endLine": 448,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [449](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 446,
                  "endLine": 452,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [LoadComments()](1) in [productdetails.aspx.cs](1) sends unvalidated data to a web browser on line [82](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            lblOutput.Text = output;"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "\n            }\n\n            lblOutput.Text = output;\n            lblComments.Text = comments;\n\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [271](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 268,
                  "endLine": 274,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [28](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "endLine": 31,
                  "snippet": {
                    "text": "                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [246](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "endLine": 249,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Offices where city = @city\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [529](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 526,
                  "endLine": 532,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [271](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 268,
                  "endLine": 274,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [235](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 232,
                  "endLine": 238,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [413](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 410,
                  "endLine": 416,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [449](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 446,
                  "endLine": 452,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [445](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 442,
                  "endLine": 448,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "                \n        public DataSet GetCatalogData()\n        {\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(\"select * from Products\", connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [279](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "endLine": 282,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [246](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "endLine": 249,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Offices where city = @city\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [500](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 497,
                  "endLine": 503,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 500
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [246](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "endLine": 249,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Offices where city = @city\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [addnewuser.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-1713376481/addnewuser.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "snippet": {
                    "text": "\t            SecurityQuestion.Text = passwordQuestion;"
                  }
                },
                "contextRegion": {
                  "startLine": 19,
                  "endLine": 25,
                  "snippet": {
                    "text": "\t    protected void Page_Load(object sender, EventArgs e)\n\t    {\n\t        if (!Page.IsPostBack)\n\t            SecurityQuestion.Text = passwordQuestion;\n\t    }\n\n\t    protected void CreateAccountButton_Click(object sender, EventArgs e)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-1713376481/addnewuser.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [28](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 25,
                  "endLine": 31,
                  "snippet": {
                    "text": "                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [86](1) of [SqliteDbProvider.cs](1), the method [IsValidCustomerLogin()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "snippet": {
                    "text": "                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 83,
                  "endLine": 89,
                  "snippet": {
                    "text": "            {\n                connection.Open();\n\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n            \n                //TODO: User reader instead (for all calls)\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [250](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 247,
                  "endLine": 253,
                  "snippet": {
                    "text": "\n        public DataSet GetComments(string productCode)\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [26](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "endLine": 29,
                  "snippet": {
                    "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "B5FE987A-0FCD-4E72-821A-BEB4E700F407",
          "ruleIndex": 33,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [orders.aspx.cs](1) sends unvalidated data to a web browser on line [77](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "snippet": {
                    "text": "                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "endLine": 80,
                  "snippet": {
                    "text": "                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n                    catch (Exception ex)\n                    {\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [228](1) of [MySqlDbProvider.cs](1), the method [GetCustomerDetails()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 228,
                  "snippet": {
                    "text": "                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 225,
                  "endLine": 231,
                  "snippet": {
                    "text": "            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n                }\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 228
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [30](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [413](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 410,
                  "endLine": 416,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [213](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 210,
                  "endLine": 216,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [327](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 324,
                  "endLine": 330,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 327
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [headerinjection.aspx.cs](1) sends unvalidated data to a web browser on line [33](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/headerinjection.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "snippet": {
                    "text": "            lblHeaders.Text = Request.Headers.ToString().Replace(\"&\", \"<br />\");"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "endLine": 36,
                  "snippet": {
                    "text": "\n\n            //Headers\n            lblHeaders.Text = Request.Headers.ToString().Replace(\"&\", \"<br />\");\n\n            //Cookies\n            ArrayList colCookies = new ArrayList();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/headerinjection.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [351](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 348,
                  "endLine": 354,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 351
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [btnReverse_Click()](1) in [proxysetup.aspx.cs](1) sends unvalidated data to a web browser on line [17](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-1713376481/proxysetup.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "snippet": {
                    "text": "            lblOutput.Text = \"Thank you for using WebGoat.NET \" + reverse(name);"
                  }
                },
                "contextRegion": {
                  "startLine": 14,
                  "endLine": 20,
                  "snippet": {
                    "text": "        \n            var name = txtName.Text;\n            txtName.Text = \"\";\n            lblOutput.Text = \"Thank you for using WebGoat.NET \" + reverse(name);\n        \n        }\n        \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-1713376481/proxysetup.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [347](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 344,
                  "endLine": 350,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "187D7E8E-9941-436F-A731-8128C97BF567",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "The method [MakeRow()](1) in [encryptvsencode.aspx.cs](1) sends unvalidated data to a web browser on line [67](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "            t2.Text = val;"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "            row.Cells.Add(t1);\n            \n            TableCell t2 = new TableCell();\n            t2.Text = val;\n            row.Cells.Add(t2);\n            return row;\n        }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [31](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"</a>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "endLine": 34,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [294](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 291,
                  "endLine": 297,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [347](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 344,
                  "endLine": 350,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [271](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 268,
                  "endLine": 274,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_Arguments()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "snippet": {
                    "text": "                Arguments = args,"
                  }
                },
                "contextRegion": {
                  "startLine": 17,
                  "endLine": 23,
                  "snippet": {
                    "text": "            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n                RedirectStandardError = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [415](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 412,
                  "endLine": 418,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 415
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [LoadComments()](1) in [storedxss.aspx.cs](1) sends unvalidated data to a web browser on line [52](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "snippet": {
                    "text": "            lblComments.Text = comments;"
                  }
                },
                "contextRegion": {
                  "startLine": 49,
                  "endLine": 55,
                  "snippet": {
                    "text": "                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n        }\n\n        void FixedLoadComments()\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [250](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 247,
                  "endLine": 253,
                  "snippet": {
                    "text": "\n        public DataSet GetComments(string productCode)\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [121](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "endLine": 124,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [274](1) of [SqliteDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 271,
                  "endLine": 277,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [37](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "                using (SqliteConnection conn = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "        {   \n            try\n            {\n                using (SqliteConnection conn = new SqliteConnection(_connectionString))\n                {\n                    conn.Open();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [23](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "snippet": {
                    "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "endLine": 26,
                  "snippet": {
                    "text": "\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [274](1) of [SqliteDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 271,
                  "endLine": 277,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [274](1) of [SqliteDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 271,
                  "endLine": 277,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.3611112"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [321](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 318,
                  "endLine": 324,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [271](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 268,
                  "endLine": 274,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 271
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [23](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "snippet": {
                    "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "endLine": 26,
                  "snippet": {
                    "text": "\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [520](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 517,
                  "endLine": 523,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "73FA2402-ADE4-435E-930C-99CAE22288A9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "The method [RunProcessWithInput()](1) in [Util.cs](1) calls [set_FileName()](1) to execute a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.\r\nExecuting commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "snippet": {
                    "text": "                FileName = cmd,"
                  }
                },
                "contextRegion": {
                  "startLine": 16,
                  "endLine": 22,
                  "snippet": {
                    "text": "            ProcessStartInfo startInfo = new ProcessStartInfo\n            {\n                WorkingDirectory = Settings.RootDir,\n                FileName = cmd,\n                Arguments = args,\n                UseShellExecute = false,\n                RedirectStandardInput = true,\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/Util.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "7B0F1BB3-04F9-4702-877F-9B9CBD7B0843",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "Without proper access control, the method [GetOrders()](1) in [SqliteDbProvider.cs](1) can execute a SQL statement on line [397](1) that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.\r\nWithout proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 397,
                  "snippet": {
                    "text": "                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 394,
                  "endLine": 400,
                  "snippet": {
                    "text": "                connection.Open();\n\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 397
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "7B0F1BB3-04F9-4702-877F-9B9CBD7B0843",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "Without proper access control, the method [GetOrders()](1) in [MySqlDbProvider.cs](1) can execute a SQL statement on line [395](1) that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.\r\nWithout proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 395,
                  "snippet": {
                    "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 392,
                  "endLine": 398,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 395
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [250](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 247,
                  "endLine": 253,
                  "snippet": {
                    "text": "\n        public DataSet GetComments(string productCode)\n        {\n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 250
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [392](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 389,
                  "endLine": 395,
                  "snippet": {
                    "text": "        public DataSet GetOrders(int customerID)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 392
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [274](1) of [SqliteDbProvider.cs](1), the method [AddComment()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 271,
                  "endLine": 277,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    command.ExecuteNonQuery();\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.3611112"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [30](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 27,
                  "endLine": 33,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [492](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 489,
                  "endLine": 495,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n\n                sql = \"select * from Categories\" + catClause;\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [246](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 243,
                  "endLine": 249,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Offices where city = @city\";\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 246
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [LoadComments()](1) in [productdetails.aspx.cs](1) sends unvalidated data to a web browser on line [82](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            lblOutput.Text = output;"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "\n            }\n\n            lblOutput.Text = output;\n            lblComments.Text = comments;\n\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [86](1) of [SqliteDbProvider.cs](1), the method [IsValidCustomerLogin()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "snippet": {
                    "text": "                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 83,
                  "endLine": 89,
                  "snippet": {
                    "text": "            {\n                connection.Open();\n\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n            \n                //TODO: User reader instead (for all calls)\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "endLine": 69,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "                \n        public DataSet GetCatalogData()\n        {\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(\"select * from Products\", connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [LoadCity()](1) in [reflectedxss.aspx.cs](1) sends unvalidated data to a web browser on line [26](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "snippet": {
                    "text": "            lblOutput.Text = \"Here are the details for our \" + city + \" Office\";"
                  }
                },
                "contextRegion": {
                  "startLine": 23,
                  "endLine": 29,
                  "snippet": {
                    "text": "\t\tvoid LoadCity (String city)\n\t\t{\n            DataSet ds = du.GetOffice(city);\n            lblOutput.Text = \"Here are the details for our \" + city + \" Office\";\n            dtlView.DataSource = ds.Tables[0];\n            dtlView.DataBind();\n\t\t}\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [413](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 410,
                  "endLine": 416,
                  "snippet": {
                    "text": "            DataSet ds = new DataSet();\n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 413
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "45736FF1-7342-4ABC-9C14-BA72A9023121",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "On line [555](1) of [SqliteDbProvider.cs](1), the method [GetEmailByCustomerNumber()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 555,
                  "snippet": {
                    "text": "                    SqliteCommand cmd = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 552,
                  "endLine": 558,
                  "snippet": {
                    "text": "                    connection.Open();\n\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + num;\n                    SqliteCommand cmd = new SqliteCommand(sql, connection);\n                    output = (string)cmd.ExecuteScalar();\n                }\n                \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 555
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [449](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 446,
                  "endLine": 452,
                  "snippet": {
                    "text": "                \"and OrderDetails.orderNumber = \" + orderNumber;\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [279](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "endLine": 282,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [520](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 517,
                  "endLine": 523,
                  "snippet": {
                    "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 520
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "567FBBA9-5FAC-445C-A87A-05BEBAA7813B",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "The method [ButtonCheckEmail_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [37](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "                \n                return;\n            }    \n            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";\n            PanelForgotPasswordStep2.Visible = true;\n            PanelForgotPasswordStep3.Visible = false;\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 63,
                  "endLine": 69,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "3F9B0D26-E122-4770-BF9B-F0D11A026495",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "XML parser configured in [xpathinjection.aspx.cs](1):[27](1) does not prevent nor limit external entities resolution. This can expose the parser to an XML External Entities attack\r\nUsing XML parsers configured to not prevent nor limit external entities resolution can expose the parser to an XML External Entities attack\r\n."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/xpathinjection.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "snippet": {
                    "text": "            xDoc.LoadXml(xml);"
                  }
                },
                "contextRegion": {
                  "startLine": 24,
                  "endLine": 30,
                  "snippet": {
                    "text": "        private void FindSalesPerson(string state)\n        {\n            XmlDocument xDoc = new XmlDocument();\n            xDoc.LoadXml(xml);\n            XmlNodeList list = xDoc.SelectNodes(\"//salesperson[state='\" + state + \"']\");\n            if (list.Count > 0)\n            {\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/1894963386/xpathinjection.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "A232C1F9-8B44-43A4-89DE-835653DC5803",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "The file [customerlogin.aspx.cs](1) passes unvalidated data to an HTTP redirect on line [72](1). Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.\r\nAllowing unvalidated input to control the URL used in a redirect can aid phishing attacks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "snippet": {
                    "text": "            Response.Redirect(returnUrl);        "
                  }
                },
                "contextRegion": {
                  "startLine": 69,
                  "endLine": 75,
                  "snippet": {
                    "text": "            if (returnUrl == null) \n                returnUrl = \"/WebGoatCoins/MainPage.aspx\";\n                \n            Response.Redirect(returnUrl);        \n        }\n    }\n}\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "7B0F1BB3-04F9-4702-877F-9B9CBD7B0843",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "Without proper access control, the method [GetOrderDetails()](1) in [SqliteDbProvider.cs](1) can execute a SQL statement on line [453](1) that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.\r\nWithout proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 453,
                  "snippet": {
                    "text": "                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 450,
                  "endLine": 456,
                  "snippet": {
                    "text": "            {\n                connection.Open();\n\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 453
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [564](1) of [MySqlDbProvider.cs](1), the method [GetCustomerEmails()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 564,
                  "snippet": {
                    "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 561,
                  "endLine": 567,
                  "snippet": {
                    "text": "            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 564
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [ButtonCheckEmail_Click()](1) in [forgotpassword.aspx.cs](1) sends unvalidated data to a web browser on line [38](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "snippet": {
                    "text": "            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";"
                  }
                },
                "contextRegion": {
                  "startLine": 35,
                  "endLine": 41,
                  "snippet": {
                    "text": "                \n                return;\n            }    \n            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";\n            PanelForgotPasswordStep2.Visible = true;\n            PanelForgotPasswordStep3.Visible = false;\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [321](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 318,
                  "endLine": 324,
                  "snippet": {
                    "text": "                \n            string[] qAndA = new string[2];\n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 321
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [492](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 489,
                  "endLine": 495,
                  "snippet": {
                    "text": "                catClause += \" where catNumber = \" + catNumber; \n\n\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n\n                sql = \"select * from Categories\" + catClause;\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 492
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [186](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 183,
                  "endLine": 189,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 186
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [235](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 232,
                  "endLine": 238,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [121](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 118,
                  "endLine": 124,
                  "snippet": {
                    "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n            \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 121
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [29](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "endLine": 32,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [23](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "snippet": {
                    "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 20,
                  "endLine": 26,
                  "snippet": {
                    "text": "\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [294](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 291,
                  "endLine": 297,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 294
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [329](1) of [MySqlDbProvider.cs](1), the method [GetSecurityQuestionAndAnswer()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 329,
                  "snippet": {
                    "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 326,
                  "endLine": 332,
                  "snippet": {
                    "text": "            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 329
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [329](1) of [MySqlDbProvider.cs](1), the method [GetSecurityQuestionAndAnswer()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 329,
                  "snippet": {
                    "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 326,
                  "endLine": 332,
                  "snippet": {
                    "text": "            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 329
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "7B0F1BB3-04F9-4702-877F-9B9CBD7B0843",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "Without proper access control, the method [GetOrderDetails()](1) in [MySqlDbProvider.cs](1) can execute a SQL statement on line [447](1) that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.\r\nWithout proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 447,
                  "snippet": {
                    "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 444,
                  "endLine": 450,
                  "snippet": {
                    "text": "            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 447
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [347](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 344,
                  "endLine": 350,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 347
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [37](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "                using (SqliteConnection conn = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "        {   \n            try\n            {\n                using (SqliteConnection conn = new SqliteConnection(_connectionString))\n                {\n                    conn.Open();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "07DBD527-E760-4840-A573-6DC6BAE07078",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "The method [ButtonRecoverPassword_Click()](1) in [forgotpassword.aspx.cs](1) mishandles confidential information, which can compromise user privacy and is often illegal.\r\nMishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "snippet": {
                    "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                  }
                },
                "contextRegion": {
                  "startLine": 64,
                  "endLine": 70,
                  "snippet": {
                    "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "3.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [213](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213,
                  "snippet": {
                    "text": "                using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 210,
                  "endLine": 216,
                  "snippet": {
                    "text": "            try\n            {\n            \n                using (SqliteConnection connection = new SqliteConnection(_connectionString))\n                {\n                    connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 213
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [37](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37,
                  "snippet": {
                    "text": "                using (SqliteConnection conn = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 34,
                  "endLine": 40,
                  "snippet": {
                    "text": "        {   \n            try\n            {\n                using (SqliteConnection conn = new SqliteConnection(_connectionString))\n                {\n                    conn.Open();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 37
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "2.1433332"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [29](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 26,
                  "endLine": 32,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "D4D51883-B20F-4A92-9E3F-69E2B0C46EC0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [catalog.aspx.cs](1) sends unvalidated data to a web browser on line [31](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"</a>\\n\";"
                  }
                },
                "contextRegion": {
                  "startLine": 28,
                  "endLine": 34,
                  "snippet": {
                    "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 31
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [SqliteDbProvider.cs](1) passes unvalidated data to a database connection string on line [235](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235,
                  "snippet": {
                    "text": "            using (SqliteConnection connection = new SqliteConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 232,
                  "endLine": 238,
                  "snippet": {
                    "text": "        public DataSet GetOffice(string city)\n        {\n        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n            {\n                connection.Open();\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 235
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [279](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279,
                  "snippet": {
                    "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 276,
                  "endLine": 282,
                  "snippet": {
                    "text": "            try\n            {\n\n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    connection.Open();\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 279
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "9441E78A-8736-46EC-96D9-26F03C02276C",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "The file [MySqlDbProvider.cs](1) passes unvalidated data to a database connection string on line [82](1). An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.\r\nConcatenating unvalidated input into a database connection may allow an attacker to override the value of a request parameter. An attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "snippet": {
                    "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))"
                  }
                },
                "contextRegion": {
                  "startLine": 79,
                  "endLine": 85,
                  "snippet": {
                    "text": "                \n        public DataSet GetCatalogData()\n        {\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(\"select * from Products\", connection);\n                DataSet ds = new DataSet();\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "1.8003333"
          }
        },
        {
          "ruleId": "747FB4C7-7B55-4F8C-9784-9D67BB375130",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "On line [353](1) of [SqliteDbProvider.cs](1), the method [GetPasswordByEmail()](1) invokes a SQL query built with input that comes from an untrusted source. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.\r\nConstructing a dynamic SQL statement with input that comes from an untrusted source might allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 353,
                  "snippet": {
                    "text": "                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 350,
                  "endLine": 356,
                  "snippet": {
                    "text": "\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 353
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "199C43B1-BFFE-45BA-A217-717C412EE8F0",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [mainpage.aspx.cs](1) sends unvalidated data to a web browser on line [42](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "snippet": {
                    "text": "                    cell2.Text = row[col].ToString();"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "endLine": 45,
                  "snippet": {
                    "text": "                    TableCell cell1 = new TableCell();\n                    TableCell cell2 = new TableCell();\n                    cell1.Text = col.ColumnName.ToString();\n                    cell2.Text = row[col].ToString();\n                    \n                    tablerow.Cells.Add(cell1);\n                    tablerow.Cells.Add(cell2);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "199C43B1-BFFE-45BA-A217-717C412EE8F0",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [mainpage.aspx.cs](1) sends unvalidated data to a web browser on line [42](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "snippet": {
                    "text": "                    cell2.Text = row[col].ToString();"
                  }
                },
                "contextRegion": {
                  "startLine": 39,
                  "endLine": 45,
                  "snippet": {
                    "text": "                    TableCell cell1 = new TableCell();\n                    TableCell cell2 = new TableCell();\n                    cell1.Text = col.ColumnName.ToString();\n                    cell2.Text = row[col].ToString();\n                    \n                    tablerow.Cells.Add(cell1);\n                    tablerow.Cells.Add(cell2);\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "C629C488-679C-489B-95F4-4C9BD0D8CAEE",
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "Without proper access control, the method [UpdateCustomerPassword()](1) in [SqliteDbProvider.cs](1) can execute a SQL statement on line [298](1) that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.\r\nWithout proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298,
                  "snippet": {
                    "text": "                    SqliteCommand command = new SqliteCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 295,
                  "endLine": 301,
                  "snippet": {
                    "text": "                {\n                    connection.Open();\n\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                \n                    int rows_added = command.ExecuteNonQuery();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 298
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "C629C488-679C-489B-95F4-4C9BD0D8CAEE",
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "Without proper access control, the method [UpdateCustomerPassword()](1) in [MySqlDbProvider.cs](1) can execute a SQL statement on line [304](1) that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.\r\nWithout proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 304,
                  "snippet": {
                    "text": "                    MySqlCommand command = new MySqlCommand(sql, connection);"
                  }
                },
                "contextRegion": {
                  "startLine": 301,
                  "endLine": 307,
                  "snippet": {
                    "text": "            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                \n                    int rows_added = command.ExecuteNonQuery();\n                    \n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 304
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "2.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "680C3A0E-90C1-4907-BE37-34C0F0777444",
          "ruleIndex": 32,
          "level": "error",
          "message": {
            "text": "The method [Page_Load()](1) in [orders.aspx.cs](1) sends unvalidated data to a web browser on line [77](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "snippet": {
                    "text": "                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;"
                  }
                },
                "contextRegion": {
                  "startLine": 74,
                  "endLine": 80,
                  "snippet": {
                    "text": "                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n                    catch (Exception ex)\n                    {\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        },
        {
          "ruleId": "A119F6A0-A4BC-4C78-A432-9757CAB0C5E7",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "The method [ProcessRequest()](1) in [autocomplete.ashx.cs](1) sends unvalidated data to a web browser on line [33](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "snippet": {
                    "text": "                context.Response.Write(json);"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "endLine": 36,
                  "snippet": {
                    "text": "            if (json != null && json.Length > 0)\n            {\n                context.Response.ContentType = \"text/plain\";\n                context.Response.Write(json);\n            }\n            else\n            {\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "A119F6A0-A4BC-4C78-A432-9757CAB0C5E7",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "The method [ProcessRequest()](1) in [autocomplete.ashx.cs](1) sends unvalidated data to a web browser on line [33](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "snippet": {
                    "text": "                context.Response.Write(json);"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "endLine": 36,
                  "snippet": {
                    "text": "            if (json != null && json.Length > 0)\n            {\n                context.Response.ContentType = \"text/plain\";\n                context.Response.Write(json);\n            }\n            else\n            {\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "3.3333333"
          }
        },
        {
          "ruleId": "50F5AB4A-6BA7-46AB-B1C0-09355D265681",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "The method [ProcessRequest()](1) in [autocomplete.ashx.cs](1) sends unvalidated data to a web browser on line [33](1), which can result in the browser executing malicious code.\r\nSending unvalidated data to a web browser can result in the browser executing malicious code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33,
                  "snippet": {
                    "text": "                context.Response.Write(json);"
                  }
                },
                "contextRegion": {
                  "startLine": 30,
                  "endLine": 36,
                  "snippet": {
                    "text": "            if (json != null && json.Length > 0)\n            {\n                context.Response.ContentType = \"text/plain\";\n                context.Response.Write(json);\n            }\n            else\n            {\n"
                  }
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "id": 1,
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 33
                }
              },
              "message": {
                "text": "[No message provided.]"
              }
            }
          ],
          "properties": {
            "InstanceSeverity": "4.0",
            "Confidence": "5.0"
          }
        }
      ],
      "automationDetails": {
        "id": "925676-566264-FortifyPS/"
      },
      "columnKind": "utf16CodeUnits",
      "threadFlowLocations": [
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 122,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_DATABASE, txtDatabase.Text);"
                }
              },
              "contextRegion": {
                "startLine": 119,
                "endLine": 125,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtDatabase.Text))\n                configFile.Remove(DbConstants.KEY_DATABASE);\n            else\n                configFile.Set(DbConstants.KEY_DATABASE, txtDatabase.Text);\n            \n            if (string.IsNullOrEmpty(txtUserName.Text))\n                configFile.Remove(DbConstants.KEY_UID);\n"
                }
              }
            },
            "message": {
              "text": "Set(1 : this._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "            labelUpload.Visible = false;\n            if (Request.Cookies[\"customerNumber\"] != null)\n            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n"
                }
              }
            },
            "message": {
              "text": "get_Cookies(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 455,
                "snippet": {
                  "text": "                da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 452,
                "endLine": 458,
                "snippet": {
                  "text": "\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n                if (ds.Tables[0].Rows.Count == 0)\n                    return null;\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 84,
                "snippet": {
                  "text": "            return password;"
                }
              },
              "contextRegion": {
                "startLine": 81,
                "endLine": 87,
                "snippet": {
                  "text": "        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n    }\n"
                }
              }
            },
            "message": {
              "text": "Read password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 510,
                "snippet": {
                  "text": "                da.Fill(ds, \"products\");"
                }
              },
              "contextRegion": {
                "startLine": 507,
                "endLine": 513,
                "snippet": {
                  "text": "\n                sql = \"select * from Products\" + catClause;\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n\n                //category / products relationship\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 112,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_PORT, txtPort.Text);"
                }
              },
              "contextRegion": {
                "startLine": 109,
                "endLine": 115,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtPort.Text))\n                configFile.Remove(DbConstants.KEY_PORT);\n            else\n                configFile.Set(DbConstants.KEY_PORT, txtPort.Text);\n\n            if (string.IsNullOrEmpty(txtClientExecutable.Text))\n                configFile.Remove(DbConstants.KEY_CLIENT_EXEC);\n"
                }
              }
            },
            "message": {
              "text": "Set(1 : this._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 51,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 48,
                "endLine": 54,
                "snippet": {
                  "text": "            ConfigFile configFile = Settings.CurrentConfigFile;\n\n            //TODO: Need to provide interface for saving multiple configs need VS for it.\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n"
                }
              }
            },
            "message": {
              "text": "UpdateConfigFile(0._settings['?'])"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 122,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_DATABASE, txtDatabase.Text);"
                }
              },
              "contextRegion": {
                "startLine": 119,
                "endLine": 125,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtDatabase.Text))\n                configFile.Remove(DbConstants.KEY_DATABASE);\n            else\n                configFile.Set(DbConstants.KEY_DATABASE, txtDatabase.Text);\n            \n            if (string.IsNullOrEmpty(txtUserName.Text))\n                configFile.Remove(DbConstants.KEY_UID);\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 112,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_PORT, txtPort.Text);"
                }
              },
              "contextRegion": {
                "startLine": 109,
                "endLine": 115,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtPort.Text))\n                configFile.Remove(DbConstants.KEY_PORT);\n            else\n                configFile.Set(DbConstants.KEY_PORT, txtPort.Text);\n\n            if (string.IsNullOrEmpty(txtClientExecutable.Text))\n                configFile.Remove(DbConstants.KEY_CLIENT_EXEC);\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 89,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 86,
                "endLine": 92,
                "snippet": {
                  "text": "            //Fill in the email address of authenticated users\n            if (Request.Cookies[\"customerNumber\"] != null)\n            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                string email = du.GetCustomerEmail(customerNumber);\n                txtEmail.Text = email;\n"
                }
              }
            },
            "message": {
              "text": "get_Cookies(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/ConfigFile.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 98,
                "snippet": {
                  "text": "            _settings[key.ToLower()] = value;"
                }
              },
              "contextRegion": {
                "startLine": 95,
                "endLine": 101,
                "snippet": {
                  "text": "            \n        public void Set(string key, string value)\n        {\n            _settings[key.ToLower()] = value;\n        }\n\n        public void Remove(string key)\n"
                }
              }
            },
            "message": {
              "text": "set_Item(1 : this['?'])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 460,
                "snippet": {
                  "text": "                    return ds;"
                }
              },
              "contextRegion": {
                "startLine": 457,
                "endLine": 463,
                "snippet": {
                  "text": "                if (ds.Tables[0].Rows.Count == 0)\n                    return null;\n                else\n                    return ds;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            //TODO: Need to provide interface for saving multiple configs need VS for it.\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "Create(0._settings['?'] : return._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 84,
                "snippet": {
                  "text": "            return password;"
                }
              },
              "contextRegion": {
                "startLine": 81,
                "endLine": 87,
                "snippet": {
                  "text": "        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n    }\n"
                }
              }
            },
            "message": {
              "text": "Return password"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 89,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 86,
                "endLine": 92,
                "snippet": {
                  "text": "            //Fill in the email address of authenticated users\n            if (Request.Cookies[\"customerNumber\"] != null)\n            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                string email = du.GetCustomerEmail(customerNumber);\n                txtEmail.Text = email;\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['customerNumber'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            //TODO: Need to provide interface for saving multiple configs need VS for it.\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "set_CurrentDbProvider(0 : {OWASP.WebGoat.NET.App_Code.Settings.CurrentDbProvider})"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Settings.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 73,
                "snippet": {
                  "text": "        public static IDbProvider CurrentDbProvider { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 70,
                "endLine": 76,
                "snippet": {
                  "text": "\n        public static string RootDir { get; private set; }\n\n        public static IDbProvider CurrentDbProvider { get; set; }\n\n        public static string DefaultConfigPath { get; private set; }\n\n"
                }
              }
            },
            "message": {
              "text": "Read OWASP.WebGoat.NET.App_Code.Settings.CurrentDbProvider"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 520,
                "snippet": {
                  "text": "                return ds;"
                }
              },
              "contextRegion": {
                "startLine": 517,
                "endLine": 523,
                "snippet": {
                  "text": "                false);\n\n                ds.Relations.Add(dr);\n                return ds;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "                    return new MySqlDbProvider(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "            switch (dbType)\n            {\n                case DbConstants.DB_TYPE_MYSQL:\n                    return new MySqlDbProvider(configFile);\n                case DbConstants.DB_TYPE_SQLITE:\n                    return new SqliteDbProvider(configFile);\n                default:\n"
                }
              }
            },
            "message": {
              "text": "MySqlDbProvider(0._settings['?'] : this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "                    try\n                    {\n                        //lblOutput.Text = orderNumber;\n                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));\n                        DetailsView1.DataSource = dsOrderDetails.Tables[0];\n                        DetailsView1.DataBind();\n                        //litOrderDetails.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "GetOrderDetails(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 484,
                "snippet": {
                  "text": "            return GetProductsAndCategories(0);"
                }
              },
              "contextRegion": {
                "startLine": 481,
                "endLine": 487,
                "snippet": {
                  "text": "\n        public DataSet GetProductsAndCategories()\n        {\n            return GetProductsAndCategories(0);\n        }\n\n        public DataSet GetProductsAndCategories(int catNumber)\n"
                }
              }
            },
            "message": {
              "text": "GetProductsAndCategories(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Settings.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 73,
                "snippet": {
                  "text": "        public static IDbProvider CurrentDbProvider { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 70,
                "endLine": 76,
                "snippet": {
                  "text": "\n        public static string RootDir { get; private set; }\n\n        public static IDbProvider CurrentDbProvider { get; set; }\n\n        public static string DefaultConfigPath { get; private set; }\n\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                                                  configFile.Get(DbConstants.KEY_HOST),"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "            else\n            {\n                 _connectionString = string.Format(\"SERVER={0};PORT={1};DATABASE={2};UID={3}\",\n                                                  configFile.Get(DbConstants.KEY_HOST),\n                                                  configFile.Get(DbConstants.KEY_PORT),\n                                                  configFile.Get(DbConstants.KEY_DATABASE),\n                                                  configFile.Get(DbConstants.KEY_UID));\n"
                }
              }
            },
            "message": {
              "text": "Get(this._settings['?'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Settings.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 73,
                "snippet": {
                  "text": "        public static IDbProvider CurrentDbProvider { get; set; }"
                }
              },
              "contextRegion": {
                "startLine": 70,
                "endLine": 76,
                "snippet": {
                  "text": "\n        public static string RootDir { get; private set; }\n\n        public static IDbProvider CurrentDbProvider { get; set; }\n\n        public static string DefaultConfigPath { get; private set; }\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to OWASP.WebGoat.NET.App_Code.Settings.CurrentDbProvider"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 484,
                "snippet": {
                  "text": "            return GetProductsAndCategories(0);"
                }
              },
              "contextRegion": {
                "startLine": 481,
                "endLine": 487,
                "snippet": {
                  "text": "\n        public DataSet GetProductsAndCategories()\n        {\n            return GetProductsAndCategories(0);\n        }\n\n        public DataSet GetProductsAndCategories(int catNumber)\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "{\n    public partial class Catalog : System.Web.UI.Page\n    {\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/ConfigFile.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 91,
                "snippet": {
                  "text": "                return _settings[key];"
                }
              },
              "contextRegion": {
                "startLine": 88,
                "endLine": 94,
                "snippet": {
                  "text": "            key = key.ToLower();\n            \n            if (_settings.ContainsKey(key))\n                return _settings[key];\n                    \n            return string.Empty;\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['?'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/WebGoatCoins/Web.config",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 1
              }
            },
            "message": {
              "text": "Default Validation Enabled for Application"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "getPassword(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 19,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductsAndCategories();"
                }
              },
              "contextRegion": {
                "startLine": 16,
                "endLine": 22,
                "snippet": {
                  "text": "        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n            DataSet ds = du.GetProductsAndCategories();\n\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetProductsAndCategories(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 16,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 13,
                "endLine": 19,
                "snippet": {
                  "text": "    public partial class ProductDetails : System.Web.UI.Page\n    {\n\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "{\n    public partial class Catalog : System.Web.UI.Page\n    {\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 16,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 13,
                "endLine": 19,
                "snippet": {
                  "text": "    public partial class ProductDetails : System.Web.UI.Page\n    {\n\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "            labelUpload.Visible = false;\n            if (Request.Cookies[\"customerNumber\"] != null)\n            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['customerNumber'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "            labelUpload.Visible = false;\n            if (Request.Cookies[\"customerNumber\"] != null)\n            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n"
                }
              }
            },
            "message": {
              "text": "get_Value(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 16,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 13,
                "endLine": 19,
                "snippet": {
                  "text": "\tpublic partial class SQLInjection : System.Web.UI.Page\n\t{\n    \n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n\t\tprotected void Page_Load (object sender, EventArgs e)\n\t\t{\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 89,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 86,
                "endLine": 92,
                "snippet": {
                  "text": "            //Fill in the email address of authenticated users\n            if (Request.Cookies[\"customerNumber\"] != null)\n            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                string email = du.GetCustomerEmail(customerNumber);\n                txtEmail.Text = email;\n"
                }
              }
            },
            "message": {
              "text": "get_Value(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "            labelUpload.Visible = false;\n            if (Request.Cookies[\"customerNumber\"] != null)\n            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n"
                }
              }
            },
            "message": {
              "text": "Assignment to customerNumber"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                DataSet ds = du.GetCustomerDetails(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n\n                Image1.ImageUrl = \"images/logos/\" + row[\"logoFileName\"];\n"
                }
              }
            },
            "message": {
              "text": "GetCustomerDetails(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 89,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 86,
                "endLine": 92,
                "snippet": {
                  "text": "            //Fill in the email address of authenticated users\n            if (Request.Cookies[\"customerNumber\"] != null)\n            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                string email = du.GetCustomerEmail(customerNumber);\n                txtEmail.Text = email;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to customerNumber"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 16,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 13,
                "endLine": 19,
                "snippet": {
                  "text": "\tpublic partial class SQLInjection : System.Web.UI.Page\n\t{\n    \n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n\t\tprotected void Page_Load (object sender, EventArgs e)\n\t\t{\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 91,
                "snippet": {
                  "text": "                string email = du.GetCustomerEmail(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 88,
                "endLine": 94,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                string email = du.GetCustomerEmail(customerNumber);\n                txtEmail.Text = email;\n                txtEmail.ReadOnly = true;\n            }\n"
                }
              }
            },
            "message": {
              "text": "GetCustomerEmail(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 19,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductsAndCategories();"
                }
              },
              "contextRegion": {
                "startLine": 16,
                "endLine": 22,
                "snippet": {
                  "text": "        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n            DataSet ds = du.GetProductsAndCategories();\n\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 91,
                "snippet": {
                  "text": "                string email = du.GetCustomerEmail(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 88,
                "endLine": 94,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                string email = du.GetCustomerEmail(customerNumber);\n                txtEmail.Text = email;\n                txtEmail.ReadOnly = true;\n            }\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 19,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductsAndCategories();"
                }
              },
              "contextRegion": {
                "startLine": 16,
                "endLine": 22,
                "snippet": {
                  "text": "        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n            DataSet ds = du.GetProductsAndCategories();\n\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to ds"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "                    try\n                    {\n                        //lblOutput.Text = orderNumber;\n                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));\n                        DetailsView1.DataSource = dsOrderDetails.Tables[0];\n                        DetailsView1.DataBind();\n                        //litOrderDetails.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to dsOrderDetails"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 26,
                "snippet": {
                  "text": "            DataSet ds = du.GetEmailByName(name);"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 29,
                "snippet": {
                  "text": "\t\tprotected void btnFind_Click(object sender, EventArgs e)\n        {\n            string name = txtName.Text;\n            DataSet ds = du.GetEmailByName(name);\n\n            if (ds != null)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/ConfigFile.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 91,
                "snippet": {
                  "text": "                return _settings[key];"
                }
              },
              "contextRegion": {
                "startLine": 88,
                "endLine": 94,
                "snippet": {
                  "text": "            key = key.ToLower();\n            \n            if (_settings.ContainsKey(key))\n                return _settings[key];\n                    \n            return string.Empty;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 190,
                "snippet": {
                  "text": "                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 187,
                "endLine": 193,
                "snippet": {
                  "text": "                {\n                    connection.Open();\n\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    output = command.ExecuteScalar().ToString();\n                } \n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 217,
                "snippet": {
                  "text": "            string sql = \"select Customers.customerNumber, Customers.customerName, Customers.logoFileName, Customers.contactLastName, Customers.contactFirstName, \" +"
                }
              },
              "contextRegion": {
                "startLine": 214,
                "endLine": 220,
                "snippet": {
                  "text": "\n        public DataSet GetCustomerDetails(string customerNumber)\n        {\n            string sql = \"select Customers.customerNumber, Customers.customerName, Customers.logoFileName, Customers.contactLastName, Customers.contactFirstName, \" +\n                \"Customers.phone, Customers.addressLine1, Customers.addressLine2, Customers.city, Customers.state, Customers.postalCode, Customers.country, \" +\n                \"Customers.salesRepEmployeeNumber, Customers.creditLimit, CustomerLogin.email, CustomerLogin.password, CustomerLogin.question_id, CustomerLogin.answer \" +\n                \"From Customers, CustomerLogin where Customers.customerNumber = CustomerLogin.customerNumber and Customers.customerNumber = \" + customerNumber;\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 91,
                "snippet": {
                  "text": "                string email = du.GetCustomerEmail(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 88,
                "endLine": 94,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                string email = du.GetCustomerEmail(customerNumber);\n                txtEmail.Text = email;\n                txtEmail.ReadOnly = true;\n            }\n"
                }
              }
            },
            "message": {
              "text": "GetCustomerEmail(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 75,
                "snippet": {
                  "text": "                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 72,
                "endLine": 78,
                "snippet": {
                  "text": "                        PanelShowDetailSuccess.Visible = true;\n\n                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 26,
                "snippet": {
                  "text": "            DataSet ds = du.GetEmailByName(name);"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 29,
                "snippet": {
                  "text": "\t\tprotected void btnFind_Click(object sender, EventArgs e)\n        {\n            string name = txtName.Text;\n            DataSet ds = du.GetEmailByName(name);\n\n            if (ds != null)\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetEmailByName(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 190,
                "snippet": {
                  "text": "                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 187,
                "endLine": 193,
                "snippet": {
                  "text": "                {\n                    connection.Open();\n\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    SqliteCommand command = new SqliteCommand(sql, connection);\n                    output = command.ExecuteScalar().ToString();\n                } \n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 40,
                "snippet": {
                  "text": "                 _connectionString = string.Format(\"SERVER={0};PORT={1};DATABASE={2};UID={3}\","
                }
              },
              "contextRegion": {
                "startLine": 37,
                "endLine": 43,
                "snippet": {
                  "text": "            }\n            else\n            {\n                 _connectionString = string.Format(\"SERVER={0};PORT={1};DATABASE={2};UID={3}\",\n                                                  configFile.Get(DbConstants.KEY_HOST),\n                                                  configFile.Get(DbConstants.KEY_PORT),\n                                                  configFile.Get(DbConstants.KEY_DATABASE),\n"
                }
              }
            },
            "message": {
              "text": "Format(1[] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 217,
                "snippet": {
                  "text": "            string sql = \"select Customers.customerNumber, Customers.customerName, Customers.logoFileName, Customers.contactLastName, Customers.contactFirstName, \" +"
                }
              },
              "contextRegion": {
                "startLine": 214,
                "endLine": 220,
                "snippet": {
                  "text": "\n        public DataSet GetCustomerDetails(string customerNumber)\n        {\n            string sql = \"select Customers.customerNumber, Customers.customerName, Customers.logoFileName, Customers.contactLastName, Customers.contactFirstName, \" +\n                \"Customers.phone, Customers.addressLine1, Customers.addressLine2, Customers.city, Customers.state, Customers.postalCode, Customers.country, \" +\n                \"Customers.salesRepEmployeeNumber, Customers.creditLimit, CustomerLogin.email, CustomerLogin.password, CustomerLogin.question_id, CustomerLogin.answer \" +\n                \"From Customers, CustomerLogin where Customers.customerNumber = CustomerLogin.customerNumber and Customers.customerNumber = \" + customerNumber;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 75,
                "snippet": {
                  "text": "                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 72,
                "endLine": 78,
                "snippet": {
                  "text": "                        PanelShowDetailSuccess.Visible = true;\n\n                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 40,
                "snippet": {
                  "text": "                 _connectionString = string.Format(\"SERVER={0};PORT={1};DATABASE={2};UID={3}\","
                }
              },
              "contextRegion": {
                "startLine": 37,
                "endLine": 43,
                "snippet": {
                  "text": "            }\n            else\n            {\n                 _connectionString = string.Format(\"SERVER={0};PORT={1};DATABASE={2};UID={3}\",\n                                                  configFile.Get(DbConstants.KEY_HOST),\n                                                  configFile.Get(DbConstants.KEY_PORT),\n                                                  configFile.Get(DbConstants.KEY_DATABASE),\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this._connectionString"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 228,
                "snippet": {
                  "text": "                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                }
              },
              "contextRegion": {
                "startLine": 225,
                "endLine": 231,
                "snippet": {
                  "text": "            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n                }\n\n"
                }
              }
            },
            "message": {
              "text": "MySqlDataAdapter(0 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 75,
                "snippet": {
                  "text": "                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 72,
                "endLine": 78,
                "snippet": {
                  "text": "                        PanelShowDetailSuccess.Visible = true;\n\n                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 21,
                "snippet": {
                  "text": "            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 18,
                "endLine": 24,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetProductsAndCategories();\n\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 19,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductsAndCategories();"
                }
              },
              "contextRegion": {
                "startLine": 16,
                "endLine": 22,
                "snippet": {
                  "text": "        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n            DataSet ds = du.GetProductsAndCategories();\n\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetProductsAndCategories(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            //TODO: Need to provide interface for saving multiple configs need VS for it.\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "Create(0._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 228,
                "snippet": {
                  "text": "                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                }
              },
              "contextRegion": {
                "startLine": 225,
                "endLine": 231,
                "snippet": {
                  "text": "            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n                }\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to da"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "                    return new MySqlDbProvider(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "            switch (dbType)\n            {\n                case DbConstants.DB_TYPE_MYSQL:\n                    return new MySqlDbProvider(configFile);\n                case DbConstants.DB_TYPE_SQLITE:\n                    return new SqliteDbProvider(configFile);\n                default:\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 229,
                "snippet": {
                  "text": "                    da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 226,
                "endLine": 232,
                "snippet": {
                  "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n                }\n\n            }\n"
                }
              }
            },
            "message": {
              "text": "Fill(this : 0)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 18,
                "snippet": {
                  "text": "            string dbType = configFile.Get(DbConstants.KEY_DB_TYPE);"
                }
              },
              "contextRegion": {
                "startLine": 15,
                "endLine": 21,
                "snippet": {
                  "text": "        {\n            configFile.Load();\n\n            string dbType = configFile.Get(DbConstants.KEY_DB_TYPE);\n\n            log.Info(\"Creating provider for\" + dbType);\n\n"
                }
              }
            },
            "message": {
              "text": "Get(this._settings['?'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 75,
                "snippet": {
                  "text": "                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 72,
                "endLine": 78,
                "snippet": {
                  "text": "                        PanelShowDetailSuccess.Visible = true;\n\n                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 18,
                "snippet": {
                  "text": "            string dbType = configFile.Get(DbConstants.KEY_DB_TYPE);"
                }
              },
              "contextRegion": {
                "startLine": 15,
                "endLine": 21,
                "snippet": {
                  "text": "        {\n            configFile.Load();\n\n            string dbType = configFile.Get(DbConstants.KEY_DB_TYPE);\n\n            log.Info(\"Creating provider for\" + dbType);\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to dbType"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 239,
                "snippet": {
                  "text": "            return ds;"
                }
              },
              "contextRegion": {
                "startLine": 236,
                "endLine": 242,
                "snippet": {
                  "text": "                \n                throw new ApplicationException(\"Error getting customer details\", ex);\n            }\n            return ds;\n\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 75,
                "snippet": {
                  "text": "                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 72,
                "endLine": 78,
                "snippet": {
                  "text": "                        PanelShowDetailSuccess.Visible = true;\n\n                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to image"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                DataSet ds = du.GetCustomerDetails(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n\n                Image1.ImageUrl = \"images/logos/\" + row[\"logoFileName\"];\n"
                }
              }
            },
            "message": {
              "text": "Assignment to ds"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 77,
                "snippet": {
                  "text": "                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;"
                }
              },
              "contextRegion": {
                "startLine": 74,
                "endLine": 80,
                "snippet": {
                  "text": "                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n                    catch (Exception ex)\n                    {\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                DataRow row = ds.Tables[0].Rows[0]; //customer row"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n\n                Image1.ImageUrl = \"images/logos/\" + row[\"logoFileName\"];\n\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 20,
                "snippet": {
                  "text": "            log.Info(\"Creating provider for\" + dbType);"
                }
              },
              "contextRegion": {
                "startLine": 17,
                "endLine": 23,
                "snippet": {
                  "text": "\n            string dbType = configFile.Get(DbConstants.KEY_DB_TYPE);\n\n            log.Info(\"Creating provider for\" + dbType);\n\n            switch (dbType)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                DataRow row = ds.Tables[0].Rows[0]; //customer row"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n\n                Image1.ImageUrl = \"images/logos/\" + row[\"logoFileName\"];\n\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 21,
                "snippet": {
                  "text": "            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 18,
                "endLine": 24,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetProductsAndCategories();\n\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                DataRow row = ds.Tables[0].Rows[0]; //customer row"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n\n                Image1.ImageUrl = \"images/logos/\" + row[\"logoFileName\"];\n\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 73,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 70,
                "endLine": 76,
                "snippet": {
                  "text": "        {\n            ConfigFile configFile = Settings.CurrentConfigFile;\n\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n"
                }
              }
            },
            "message": {
              "text": "UpdateConfigFile(0._settings['?'])"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 476,
                "snippet": {
                  "text": "            return GetProductsAndCategories(0);"
                }
              },
              "contextRegion": {
                "startLine": 473,
                "endLine": 479,
                "snippet": {
                  "text": "\n        public DataSet GetProductsAndCategories()\n        {\n            return GetProductsAndCategories(0);\n        }\n\n        public DataSet GetProductsAndCategories(int catNumber)\n"
                }
              }
            },
            "message": {
              "text": "GetProductsAndCategories(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 75,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 72,
                "endLine": 78,
                "snippet": {
                  "text": "\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n"
                }
              }
            },
            "message": {
              "text": "Create(0._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 21,
                "snippet": {
                  "text": "            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 18,
                "endLine": 24,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetProductsAndCategories();\n\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 42,
                "snippet": {
                  "text": "                    cell2.Text = row[col].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 39,
                "endLine": 45,
                "snippet": {
                  "text": "                    TableCell cell1 = new TableCell();\n                    TableCell cell2 = new TableCell();\n                    cell1.Text = col.ColumnName.ToString();\n                    cell2.Text = row[col].ToString();\n                    \n                    tablerow.Cells.Add(cell1);\n                    tablerow.Cells.Add(cell2);\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                DataRow row = ds.Tables[0].Rows[0]; //customer row"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n\n                Image1.ImageUrl = \"images/logos/\" + row[\"logoFileName\"];\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to row"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 21,
                "snippet": {
                  "text": "            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 18,
                "endLine": 24,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetProductsAndCategories();\n\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n"
                }
              }
            },
            "message": {
              "text": "GetEnumerator(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 42,
                "snippet": {
                  "text": "                    cell2.Text = row[col].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 39,
                "endLine": 45,
                "snippet": {
                  "text": "                    TableCell cell1 = new TableCell();\n                    TableCell cell2 = new TableCell();\n                    cell1.Text = col.ColumnName.ToString();\n                    cell2.Text = row[col].ToString();\n                    \n                    tablerow.Cells.Add(cell1);\n                    tablerow.Cells.Add(cell2);\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 21,
                "snippet": {
                  "text": "            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 18,
                "endLine": 24,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetProductsAndCategories();\n\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n"
                }
              }
            },
            "message": {
              "text": "get_Current(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 21,
                "snippet": {
                  "text": "            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 18,
                "endLine": 24,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetProductsAndCategories();\n\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n"
                }
              }
            },
            "message": {
              "text": "Assignment to catRow"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 117,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_CLIENT_EXEC, txtClientExecutable.Text);"
                }
              },
              "contextRegion": {
                "startLine": 114,
                "endLine": 120,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtClientExecutable.Text))\n                configFile.Remove(DbConstants.KEY_CLIENT_EXEC);\n            else\n                configFile.Set(DbConstants.KEY_CLIENT_EXEC, txtClientExecutable.Text);\n\n            if (string.IsNullOrEmpty(txtDatabase.Text))\n                configFile.Remove(DbConstants.KEY_DATABASE);\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 23,
                "snippet": {
                  "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 20,
                "endLine": 26,
                "snippet": {
                  "text": "\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 117,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_CLIENT_EXEC, txtClientExecutable.Text);"
                }
              },
              "contextRegion": {
                "startLine": 114,
                "endLine": 120,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtClientExecutable.Text))\n                configFile.Remove(DbConstants.KEY_CLIENT_EXEC);\n            else\n                configFile.Set(DbConstants.KEY_CLIENT_EXEC, txtClientExecutable.Text);\n\n            if (string.IsNullOrEmpty(txtDatabase.Text))\n                configFile.Remove(DbConstants.KEY_DATABASE);\n"
                }
              }
            },
            "message": {
              "text": "Set(1 : this._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 23,
                "snippet": {
                  "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 20,
                "endLine": 26,
                "snippet": {
                  "text": "\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 23,
                "snippet": {
                  "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 20,
                "endLine": 26,
                "snippet": {
                  "text": "\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 23,
                "snippet": {
                  "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 20,
                "endLine": 26,
                "snippet": {
                  "text": "\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 23,
                "snippet": {
                  "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 20,
                "endLine": 26,
                "snippet": {
                  "text": "\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "set_Text(0 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 26,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 29,
                "snippet": {
                  "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "get_Text(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 26,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 29,
                "snippet": {
                  "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 20,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 17,
                "endLine": 23,
                "snippet": {
                  "text": "        //TODO: Take out monthly special, add \"hear what our customers are saying\" - with the latest comments.  Add date field to comments??\n\n\n        private IDbProvider du = Settings.CurrentDbProvider;\n\n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 20,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 17,
                "endLine": 23,
                "snippet": {
                  "text": "        //TODO: Take out monthly special, add \"hear what our customers are saying\" - with the latest comments.  Add date field to comments??\n\n\n        private IDbProvider du = Settings.CurrentDbProvider;\n\n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                DataSet ds = du.GetCustomerDetails(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n\n                Image1.ImageUrl = \"images/logos/\" + row[\"logoFileName\"];\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                DataSet ds = du.GetCustomerDetails(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n\n                Image1.ImageUrl = \"images/logos/\" + row[\"logoFileName\"];\n"
                }
              }
            },
            "message": {
              "text": "GetCustomerDetails(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 506,
                "snippet": {
                  "text": "                da.Fill(ds, \"categories\");"
                }
              },
              "contextRegion": {
                "startLine": 503,
                "endLine": 509,
                "snippet": {
                  "text": "\n                sql = \"select * from Categories\" + catClause;\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"categories\");\n\n                sql = \"select * from Products\" + catClause;\n                da = new SqliteDataAdapter(sql, connection);\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n"
                }
              }
            },
            "message": {
              "text": "get_Text(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "\t\t{\n            try\n            {\n                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "\t\t{\n            try\n            {\n                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "AddComment(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 273,
                "snippet": {
                  "text": "            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";"
                }
              },
              "contextRegion": {
                "startLine": 270,
                "endLine": 276,
                "snippet": {
                  "text": "\n        public string AddComment(string productCode, string email, string comment)\n        {\n            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";\n            string output = null;\n            \n            try\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 273,
                "snippet": {
                  "text": "            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";"
                }
              },
              "contextRegion": {
                "startLine": 270,
                "endLine": 276,
                "snippet": {
                  "text": "\n        public string AddComment(string productCode, string email, string comment)\n        {\n            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";\n            string output = null;\n            \n            try\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 273,
                "snippet": {
                  "text": "            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";"
                }
              },
              "contextRegion": {
                "startLine": 270,
                "endLine": 276,
                "snippet": {
                  "text": "\n        public string AddComment(string productCode, string email, string comment)\n        {\n            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";\n            string output = null;\n            \n            try\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 355,
                "snippet": {
                  "text": "                    da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 352,
                "endLine": 358,
                "snippet": {
                  "text": "                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n\n                    //check if email address exists\n                    if (ds.Tables[0].Rows.Count == 0)\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 363,
                "snippet": {
                  "text": "                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 360,
                "endLine": 366,
                "snippet": {
                  "text": "                        result = \"Email Address Not Found!\";\n                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 363,
                "snippet": {
                  "text": "                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 360,
                "endLine": 366,
                "snippet": {
                  "text": "                        result = \"Email Address Not Found!\";\n                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 363,
                "snippet": {
                  "text": "                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 360,
                "endLine": 366,
                "snippet": {
                  "text": "                        result = \"Email Address Not Found!\";\n                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 363,
                "snippet": {
                  "text": "                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 360,
                "endLine": 366,
                "snippet": {
                  "text": "                        result = \"Email Address Not Found!\";\n                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 363,
                "snippet": {
                  "text": "                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 360,
                "endLine": 366,
                "snippet": {
                  "text": "                        result = \"Email Address Not Found!\";\n                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to encoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 364,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 361,
                "endLine": 367,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Decode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 152,
                "snippet": {
                  "text": "            byte[] bytes = System.Convert.FromBase64String(s);"
                }
              },
              "contextRegion": {
                "startLine": 149,
                "endLine": 155,
                "snippet": {
                  "text": "        /// <returns></returns>\n        public static String Decode(string s)\n        {\n            byte[] bytes = System.Convert.FromBase64String(s);\n            string output = System.Text.Encoding.UTF8.GetString(bytes);\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "FromBase64String(0 : return[])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 152,
                "snippet": {
                  "text": "            byte[] bytes = System.Convert.FromBase64String(s);"
                }
              },
              "contextRegion": {
                "startLine": 149,
                "endLine": 155,
                "snippet": {
                  "text": "        /// <returns></returns>\n        public static String Decode(string s)\n        {\n            byte[] bytes = System.Convert.FromBase64String(s);\n            string output = System.Text.Encoding.UTF8.GetString(bytes);\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to bytes"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 153,
                "snippet": {
                  "text": "            string output = System.Text.Encoding.UTF8.GetString(bytes);"
                }
              },
              "contextRegion": {
                "startLine": 150,
                "endLine": 156,
                "snippet": {
                  "text": "        public static String Decode(string s)\n        {\n            byte[] bytes = System.Convert.FromBase64String(s);\n            string output = System.Text.Encoding.UTF8.GetString(bytes);\n            return output;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "GetString(0[] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 153,
                "snippet": {
                  "text": "            string output = System.Text.Encoding.UTF8.GetString(bytes);"
                }
              },
              "contextRegion": {
                "startLine": 150,
                "endLine": 156,
                "snippet": {
                  "text": "        public static String Decode(string s)\n        {\n            byte[] bytes = System.Convert.FromBase64String(s);\n            string output = System.Text.Encoding.UTF8.GetString(bytes);\n            return output;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 154,
                "snippet": {
                  "text": "            return output;"
                }
              },
              "contextRegion": {
                "startLine": 151,
                "endLine": 157,
                "snippet": {
                  "text": "        {\n            byte[] bytes = System.Convert.FromBase64String(s);\n            string output = System.Text.Encoding.UTF8.GetString(bytes);\n            return output;\n        }\n\n\n"
                }
              }
            },
            "message": {
              "text": "Return output"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 364,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 361,
                "endLine": 367,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to decoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 365,
                "snippet": {
                  "text": "                    result = decoded_password;"
                }
              },
              "contextRegion": {
                "startLine": 362,
                "endLine": 368,
                "snippet": {
                  "text": "\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "Assignment to result"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 372,
                "snippet": {
                  "text": "            return result;"
                }
              },
              "contextRegion": {
                "startLine": 369,
                "endLine": 375,
                "snippet": {
                  "text": "            {\n                result = ex.Message;\n            }\n            return result;\n        }\n\n        public DataSet GetUsers()\n"
                }
              }
            },
            "message": {
              "text": "Return result"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "        {\n            try\n            {\n                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "GetPasswordByEmail(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "        {\n            try\n            {\n                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "AddComment(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "{\n\tpublic partial class StoredXSS : System.Web.UI.Page\n\t{\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n\t\tprotected void Page_Load (object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "{\n\tpublic partial class StoredXSS : System.Web.UI.Page\n\t{\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n\t\tprotected void Page_Load (object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "\t\t{\n            try\n            {\n                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "\t\t{\n            try\n            {\n                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "AddComment(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "getPassword(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "GetPasswordByEmail(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 352,
                "snippet": {
                  "text": "                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";"
                }
              },
              "contextRegion": {
                "startLine": 349,
                "endLine": 355,
                "snippet": {
                  "text": "                    connection.Open();\n\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 352,
                "snippet": {
                  "text": "                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";"
                }
              },
              "contextRegion": {
                "startLine": 349,
                "endLine": 355,
                "snippet": {
                  "text": "                    connection.Open();\n\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 352,
                "snippet": {
                  "text": "                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";"
                }
              },
              "contextRegion": {
                "startLine": 349,
                "endLine": 355,
                "snippet": {
                  "text": "                    connection.Open();\n\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 44,
                "snippet": {
                  "text": "            DataSet ds = du.GetComments(\"user_cmt\");"
                }
              },
              "contextRegion": {
                "startLine": 41,
                "endLine": 47,
                "snippet": {
                  "text": "\n        void LoadComments()\n        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 44,
                "snippet": {
                  "text": "            DataSet ds = du.GetComments(\"user_cmt\");"
                }
              },
              "contextRegion": {
                "startLine": 41,
                "endLine": 47,
                "snippet": {
                  "text": "\n        void LoadComments()\n        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetComments(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "            DataSet ds = du.GetComments(\"user_cmt\");"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "\n        void FixedLoadComments()\n        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "            DataSet ds = du.GetComments(\"user_cmt\");"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "\n        void FixedLoadComments()\n        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetComments(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 102,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_FILE_NAME, txtFilePath.Text);"
                }
              },
              "contextRegion": {
                "startLine": 99,
                "endLine": 105,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtFilePath.Text))\n                configFile.Remove(DbConstants.KEY_FILE_NAME);\n            else\n                configFile.Set(DbConstants.KEY_FILE_NAME, txtFilePath.Text);\n\n            if (string.IsNullOrEmpty(dropDownDataProvider.Text))\n                configFile.Remove(DbConstants.KEY_DB_TYPE);\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 102,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_FILE_NAME, txtFilePath.Text);"
                }
              },
              "contextRegion": {
                "startLine": 99,
                "endLine": 105,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtFilePath.Text))\n                configFile.Remove(DbConstants.KEY_FILE_NAME);\n            else\n                configFile.Set(DbConstants.KEY_FILE_NAME, txtFilePath.Text);\n\n            if (string.IsNullOrEmpty(dropDownDataProvider.Text))\n                configFile.Remove(DbConstants.KEY_DB_TYPE);\n"
                }
              }
            },
            "message": {
              "text": "Set(1 : this._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 297,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 294,
                "endLine": 300,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Read password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 297,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 294,
                "endLine": 300,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Encode(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 140,
                "snippet": {
                  "text": "            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(s);"
                }
              },
              "contextRegion": {
                "startLine": 137,
                "endLine": 143,
                "snippet": {
                  "text": "        /// <returns></returns>\n        public static string Encode(string s)\n        {\n            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(s);\n            string output = System.Convert.ToBase64String(bytes);\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "GetBytes(0 : return[])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 140,
                "snippet": {
                  "text": "            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(s);"
                }
              },
              "contextRegion": {
                "startLine": 137,
                "endLine": 143,
                "snippet": {
                  "text": "        /// <returns></returns>\n        public static string Encode(string s)\n        {\n            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(s);\n            string output = System.Convert.ToBase64String(bytes);\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to bytes"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 141,
                "snippet": {
                  "text": "            string output = System.Convert.ToBase64String(bytes);"
                }
              },
              "contextRegion": {
                "startLine": 138,
                "endLine": 144,
                "snippet": {
                  "text": "        public static string Encode(string s)\n        {\n            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(s);\n            string output = System.Convert.ToBase64String(bytes);\n            return output;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "ToBase64String(0[] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 43,
                "snippet": {
                  "text": "            lblOutput.Text = Settings.CurrentDbProvider.TestConnection() ? \"Works!\" : \"Problem\";"
                }
              },
              "contextRegion": {
                "startLine": 40,
                "endLine": 46,
                "snippet": {
                  "text": "\n\t\tprotected void btnTest_Click (object sender, EventArgs e)\n\t\t{\t\t\t\n            lblOutput.Text = Settings.CurrentDbProvider.TestConnection() ? \"Works!\" : \"Problem\";\n\t\t}\n\n        protected void btnTestConfiguration_Click(object sender, EventArgs e)\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 43,
                "snippet": {
                  "text": "            lblOutput.Text = Settings.CurrentDbProvider.TestConnection() ? \"Works!\" : \"Problem\";"
                }
              },
              "contextRegion": {
                "startLine": 40,
                "endLine": 46,
                "snippet": {
                  "text": "\n\t\tprotected void btnTest_Click (object sender, EventArgs e)\n\t\t{\t\t\t\n            lblOutput.Text = Settings.CurrentDbProvider.TestConnection() ? \"Works!\" : \"Problem\";\n\t\t}\n\n        protected void btnTestConfiguration_Click(object sender, EventArgs e)\n"
                }
              }
            },
            "message": {
              "text": "TestConnection(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 55,
                "snippet": {
                  "text": "            if (Settings.CurrentDbProvider.TestConnection())"
                }
              },
              "contextRegion": {
                "startLine": 52,
                "endLine": 58,
                "snippet": {
                  "text": "\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n                labelSuccess.Text = \"Connection to Database Successful!\";\n                PanelSuccess.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 55,
                "snippet": {
                  "text": "            if (Settings.CurrentDbProvider.TestConnection())"
                }
              },
              "contextRegion": {
                "startLine": 52,
                "endLine": 58,
                "snippet": {
                  "text": "\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n                labelSuccess.Text = \"Connection to Database Successful!\";\n                PanelSuccess.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "TestConnection(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 78,
                "snippet": {
                  "text": "            if (Settings.CurrentDbProvider.TestConnection())"
                }
              },
              "contextRegion": {
                "startLine": 75,
                "endLine": 81,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n                labelRebuildSuccess.Text = \"Database Rebuild Successful!\";\n                PanelRebuildSuccess.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 78,
                "snippet": {
                  "text": "            if (Settings.CurrentDbProvider.TestConnection())"
                }
              },
              "contextRegion": {
                "startLine": 75,
                "endLine": 81,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n                labelRebuildSuccess.Text = \"Database Rebuild Successful!\";\n                PanelRebuildSuccess.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "TestConnection(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/default.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 11,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 8,
                "endLine": 14,
                "snippet": {
                  "text": "{\n\tpublic partial class Default : System.Web.UI.Page\n\t{\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void ButtonProceed_Click(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/default.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 11,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 8,
                "endLine": 14,
                "snippet": {
                  "text": "{\n\tpublic partial class Default : System.Web.UI.Page\n\t{\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void ButtonProceed_Click(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/default.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 21,
                "snippet": {
                  "text": "            if (du.TestConnection())"
                }
              },
              "contextRegion": {
                "startLine": 18,
                "endLine": 24,
                "snippet": {
                  "text": "        protected void Page_Load(object sender, EventArgs e)\n        {\n            //do a quick test.  If the database connects, inform the user the database seems to be working.\n            if (du.TestConnection())\n            {\n                lblOutput.Text = string.Format(\"You appear to be connected to a valid {0} provider. \" +\n                                               \"If you want to reconfigure or rebuild the database, click on the button below!\", du.Name);\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/default.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 21,
                "snippet": {
                  "text": "            if (du.TestConnection())"
                }
              },
              "contextRegion": {
                "startLine": 18,
                "endLine": 24,
                "snippet": {
                  "text": "        protected void Page_Load(object sender, EventArgs e)\n        {\n            //do a quick test.  If the database connects, inform the user the database seems to be working.\n            if (du.TestConnection())\n            {\n                lblOutput.Text = string.Format(\"You appear to be connected to a valid {0} provider. \" +\n                                               \"If you want to reconfigure or rebuild the database, click on the button below!\", du.Name);\n"
                }
              }
            },
            "message": {
              "text": "TestConnection(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 107,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_DB_TYPE, dropDownDataProvider.Text);"
                }
              },
              "contextRegion": {
                "startLine": 104,
                "endLine": 110,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(dropDownDataProvider.Text))\n                configFile.Remove(DbConstants.KEY_DB_TYPE);\n            else\n                configFile.Set(DbConstants.KEY_DB_TYPE, dropDownDataProvider.Text);\n\n            if (string.IsNullOrEmpty(txtPort.Text))\n                configFile.Remove(DbConstants.KEY_PORT);\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 107,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_DB_TYPE, dropDownDataProvider.Text);"
                }
              },
              "contextRegion": {
                "startLine": 104,
                "endLine": 110,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(dropDownDataProvider.Text))\n                configFile.Remove(DbConstants.KEY_DB_TYPE);\n            else\n                configFile.Set(DbConstants.KEY_DB_TYPE, dropDownDataProvider.Text);\n\n            if (string.IsNullOrEmpty(txtPort.Text))\n                configFile.Remove(DbConstants.KEY_PORT);\n"
                }
              }
            },
            "message": {
              "text": "Set(1 : this._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 16,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 13,
                "endLine": 19,
                "snippet": {
                  "text": "\tpublic partial class SQLInjectionDiscovery : System.Web.UI.Page\n\t{\n    \n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n\t\tprotected void Page_Load (object sender, EventArgs e)\n\t\t{\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 16,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 13,
                "endLine": 19,
                "snippet": {
                  "text": "\tpublic partial class SQLInjectionDiscovery : System.Web.UI.Page\n\t{\n    \n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n\t\tprotected void Page_Load (object sender, EventArgs e)\n\t\t{\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "                string output = du.GetEmailByCustomerNumber(name);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "            try\n            {\n                string name = txtID.Text.Substring(0, 3);\n                string output = du.GetEmailByCustomerNumber(name);\n\n                lblOutput.Text = String.IsNullOrEmpty(output) ? \"Customer Number does not exist\" : output;\n            }\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "                string output = du.GetEmailByCustomerNumber(name);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "            try\n            {\n                string name = txtID.Text.Substring(0, 3);\n                string output = du.GetEmailByCustomerNumber(name);\n\n                lblOutput.Text = String.IsNullOrEmpty(output) ? \"Customer Number does not exist\" : output;\n            }\n"
                }
              }
            },
            "message": {
              "text": "GetEmailByCustomerNumber(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 127,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_UID, txtUserName.Text);"
                }
              },
              "contextRegion": {
                "startLine": 124,
                "endLine": 130,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtUserName.Text))\n                configFile.Remove(DbConstants.KEY_UID);\n            else\n                configFile.Set(DbConstants.KEY_UID, txtUserName.Text);\n\n            if (string.IsNullOrEmpty(txtPassword.Text))\n                configFile.Remove(DbConstants.KEY_PWD);\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 127,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_UID, txtUserName.Text);"
                }
              },
              "contextRegion": {
                "startLine": 124,
                "endLine": 130,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtUserName.Text))\n                configFile.Remove(DbConstants.KEY_UID);\n            else\n                configFile.Set(DbConstants.KEY_UID, txtUserName.Text);\n\n            if (string.IsNullOrEmpty(txtPassword.Text))\n                configFile.Remove(DbConstants.KEY_PWD);\n"
                }
              }
            },
            "message": {
              "text": "Set(1 : this._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            //TODO: Need to provide interface for saving multiple configs need VS for it.\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "Create(0._settings['?'] : return._uid)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "                    return new MySqlDbProvider(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "            switch (dbType)\n            {\n                case DbConstants.DB_TYPE_MYSQL:\n                    return new MySqlDbProvider(configFile);\n                case DbConstants.DB_TYPE_SQLITE:\n                    return new SqliteDbProvider(configFile);\n                default:\n"
                }
              }
            },
            "message": {
              "text": "MySqlDbProvider(0._settings['?'] : this._uid)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 47,
                "snippet": {
                  "text": "            _uid = configFile.Get(DbConstants.KEY_UID);"
                }
              },
              "contextRegion": {
                "startLine": 44,
                "endLine": 50,
                "snippet": {
                  "text": "                                                  configFile.Get(DbConstants.KEY_UID));\n            }\n\n            _uid = configFile.Get(DbConstants.KEY_UID);\n            _pwd = configFile.Get(DbConstants.KEY_PWD);\n            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n"
                }
              }
            },
            "message": {
              "text": "Get(this._settings['?'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 47,
                "snippet": {
                  "text": "            _uid = configFile.Get(DbConstants.KEY_UID);"
                }
              },
              "contextRegion": {
                "startLine": 44,
                "endLine": 50,
                "snippet": {
                  "text": "                                                  configFile.Get(DbConstants.KEY_UID));\n            }\n\n            _uid = configFile.Get(DbConstants.KEY_UID);\n            _pwd = configFile.Get(DbConstants.KEY_PWD);\n            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this._uid"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._uid)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "RecreateGoatDb(this._uid)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 101,
                "snippet": {
                  "text": "                args = string.Format(\"--user={0} --password={1} --database={2} --host={3} --port={4} -f\","
                }
              },
              "contextRegion": {
                "startLine": 98,
                "endLine": 104,
                "snippet": {
                  "text": "                args = string.Format(\"--user={0} --database={1} --host={2} --port={3} -f\",\n                        _uid, _database, _host, _port);\n            else\n                args = string.Format(\"--user={0} --password={1} --database={2} --host={3} --port={4} -f\",\n                        _uid, _pwd, _database, _host, _port);\n\n            log.Info(\"Running recreate\");\n"
                }
              }
            },
            "message": {
              "text": "Format(1[] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 101,
                "snippet": {
                  "text": "                args = string.Format(\"--user={0} --password={1} --database={2} --host={3} --port={4} -f\","
                }
              },
              "contextRegion": {
                "startLine": 98,
                "endLine": 104,
                "snippet": {
                  "text": "                args = string.Format(\"--user={0} --database={1} --host={2} --port={3} -f\",\n                        _uid, _database, _host, _port);\n            else\n                args = string.Format(\"--user={0} --password={1} --database={2} --host={3} --port={4} -f\",\n                        _uid, _pwd, _database, _host, _port);\n\n            log.Info(\"Running recreate\");\n"
                }
              }
            },
            "message": {
              "text": "Assignment to args"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 106,
                "snippet": {
                  "text": "            int retVal1 = Math.Abs(Util.RunProcessWithInput(_clientExec, args, DbConstants.DB_CREATE_MYSQL_SCRIPT));"
                }
              },
              "contextRegion": {
                "startLine": 103,
                "endLine": 109,
                "snippet": {
                  "text": "\n            log.Info(\"Running recreate\");\n\n            int retVal1 = Math.Abs(Util.RunProcessWithInput(_clientExec, args, DbConstants.DB_CREATE_MYSQL_SCRIPT));\n            int retVal2 = Math.Abs(Util.RunProcessWithInput(_clientExec, args, DbConstants.DB_LOAD_MYSQL_SCRIPT));\n            \n            return Math.Abs(retVal1) + Math.Abs(retVal2) == 0;\n"
                }
              }
            },
            "message": {
              "text": "RunProcessWithInput(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            //TODO: Need to provide interface for saving multiple configs need VS for it.\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "Create(0._settings['?'] : return._pwd)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "                    return new MySqlDbProvider(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "            switch (dbType)\n            {\n                case DbConstants.DB_TYPE_MYSQL:\n                    return new MySqlDbProvider(configFile);\n                case DbConstants.DB_TYPE_SQLITE:\n                    return new SqliteDbProvider(configFile);\n                default:\n"
                }
              }
            },
            "message": {
              "text": "MySqlDbProvider(0._settings['?'] : this._pwd)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 48,
                "snippet": {
                  "text": "            _pwd = configFile.Get(DbConstants.KEY_PWD);"
                }
              },
              "contextRegion": {
                "startLine": 45,
                "endLine": 51,
                "snippet": {
                  "text": "            }\n\n            _uid = configFile.Get(DbConstants.KEY_UID);\n            _pwd = configFile.Get(DbConstants.KEY_PWD);\n            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n"
                }
              }
            },
            "message": {
              "text": "Get(this._settings['?'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 48,
                "snippet": {
                  "text": "            _pwd = configFile.Get(DbConstants.KEY_PWD);"
                }
              },
              "contextRegion": {
                "startLine": 45,
                "endLine": 51,
                "snippet": {
                  "text": "            }\n\n            _uid = configFile.Get(DbConstants.KEY_UID);\n            _pwd = configFile.Get(DbConstants.KEY_PWD);\n            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this._pwd"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._pwd)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "RecreateGoatDb(this._pwd)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            //TODO: Need to provide interface for saving multiple configs need VS for it.\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "Create(0._settings['?'] : return._database)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "                    return new MySqlDbProvider(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "            switch (dbType)\n            {\n                case DbConstants.DB_TYPE_MYSQL:\n                    return new MySqlDbProvider(configFile);\n                case DbConstants.DB_TYPE_SQLITE:\n                    return new SqliteDbProvider(configFile);\n                default:\n"
                }
              }
            },
            "message": {
              "text": "MySqlDbProvider(0._settings['?'] : this._database)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 49,
                "snippet": {
                  "text": "            _database = configFile.Get(DbConstants.KEY_DATABASE);"
                }
              },
              "contextRegion": {
                "startLine": 46,
                "endLine": 52,
                "snippet": {
                  "text": "\n            _uid = configFile.Get(DbConstants.KEY_UID);\n            _pwd = configFile.Get(DbConstants.KEY_PWD);\n            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n            _port = configFile.Get(DbConstants.KEY_PORT);\n"
                }
              }
            },
            "message": {
              "text": "Get(this._settings['?'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 49,
                "snippet": {
                  "text": "            _database = configFile.Get(DbConstants.KEY_DATABASE);"
                }
              },
              "contextRegion": {
                "startLine": 46,
                "endLine": 52,
                "snippet": {
                  "text": "\n            _uid = configFile.Get(DbConstants.KEY_UID);\n            _pwd = configFile.Get(DbConstants.KEY_PWD);\n            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n            _port = configFile.Get(DbConstants.KEY_PORT);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this._database"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._database)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "RecreateGoatDb(this._database)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            //TODO: Need to provide interface for saving multiple configs need VS for it.\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "Create(0._settings['?'] : return._host)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "                    return new MySqlDbProvider(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "            switch (dbType)\n            {\n                case DbConstants.DB_TYPE_MYSQL:\n                    return new MySqlDbProvider(configFile);\n                case DbConstants.DB_TYPE_SQLITE:\n                    return new SqliteDbProvider(configFile);\n                default:\n"
                }
              }
            },
            "message": {
              "text": "MySqlDbProvider(0._settings['?'] : this._host)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 50,
                "snippet": {
                  "text": "            _host = configFile.Get(DbConstants.KEY_HOST);"
                }
              },
              "contextRegion": {
                "startLine": 47,
                "endLine": 53,
                "snippet": {
                  "text": "            _uid = configFile.Get(DbConstants.KEY_UID);\n            _pwd = configFile.Get(DbConstants.KEY_PWD);\n            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n            _port = configFile.Get(DbConstants.KEY_PORT);\n        }\n"
                }
              }
            },
            "message": {
              "text": "Get(this._settings['?'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 50,
                "snippet": {
                  "text": "            _host = configFile.Get(DbConstants.KEY_HOST);"
                }
              },
              "contextRegion": {
                "startLine": 47,
                "endLine": 53,
                "snippet": {
                  "text": "            _uid = configFile.Get(DbConstants.KEY_UID);\n            _pwd = configFile.Get(DbConstants.KEY_PWD);\n            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n            _port = configFile.Get(DbConstants.KEY_PORT);\n        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this._host"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._host)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "RecreateGoatDb(this._host)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            //TODO: Need to provide interface for saving multiple configs need VS for it.\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "Create(0._settings['?'] : return._port)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "                    return new MySqlDbProvider(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "            switch (dbType)\n            {\n                case DbConstants.DB_TYPE_MYSQL:\n                    return new MySqlDbProvider(configFile);\n                case DbConstants.DB_TYPE_SQLITE:\n                    return new SqliteDbProvider(configFile);\n                default:\n"
                }
              }
            },
            "message": {
              "text": "MySqlDbProvider(0._settings['?'] : this._port)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 52,
                "snippet": {
                  "text": "            _port = configFile.Get(DbConstants.KEY_PORT);"
                }
              },
              "contextRegion": {
                "startLine": 49,
                "endLine": 55,
                "snippet": {
                  "text": "            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n            _port = configFile.Get(DbConstants.KEY_PORT);\n        }\n\n        public string Name { get { return DbConstants.DB_TYPE_MYSQL; } }\n"
                }
              }
            },
            "message": {
              "text": "Get(this._settings['?'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 52,
                "snippet": {
                  "text": "            _port = configFile.Get(DbConstants.KEY_PORT);"
                }
              },
              "contextRegion": {
                "startLine": 49,
                "endLine": 55,
                "snippet": {
                  "text": "            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n            _port = configFile.Get(DbConstants.KEY_PORT);\n        }\n\n        public string Name { get { return DbConstants.DB_TYPE_MYSQL; } }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this._port"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._port)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "RecreateGoatDb(this._port)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "    public partial class ForgotPassword : System.Web.UI.Page\n    {\n    \n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "    public partial class ForgotPassword : System.Web.UI.Page\n    {\n    \n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 14,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 11,
                "endLine": 17,
                "snippet": {
                  "text": "{\n    public partial class ForgotPassword : System.Web.UI.Page\n    {\n        private IDbProvider du = Settings.CurrentDbProvider;\n\n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 14,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 11,
                "endLine": 17,
                "snippet": {
                  "text": "{\n    public partial class ForgotPassword : System.Web.UI.Page\n    {\n        private IDbProvider du = Settings.CurrentDbProvider;\n\n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "        public bool IsValidCustomerLogin(string email, string password)\n        {\n            //encode password\n            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n"
                }
              }
            },
            "message": {
              "text": "Read password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "        public bool IsValidCustomerLogin(string email, string password)\n        {\n            //encode password\n            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n"
                }
              }
            },
            "message": {
              "text": "Encode(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 281,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 278,
                "endLine": 284,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error adding comment\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 281,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 278,
                "endLine": 284,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error adding comment\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 281,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 278,
                "endLine": 284,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error adding comment\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 284,
                "snippet": {
                  "text": "            return output;"
                }
              },
              "contextRegion": {
                "startLine": 281,
                "endLine": 287,
                "snippet": {
                  "text": "                output = ex.Message;\n            }\n            \n            return output;\n        }\n\n        public string UpdateCustomerPassword(int customerNumber, string password)\n"
                }
              }
            },
            "message": {
              "text": "Return output"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "\t\t{\n            try\n            {\n                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "AddComment(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "\t\t{\n            try\n            {\n                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "Assignment to error_message"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 372,
                "snippet": {
                  "text": "                result = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 369,
                "endLine": 375,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                result = ex.Message;\n            }\n            return result;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 372,
                "snippet": {
                  "text": "                result = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 369,
                "endLine": 375,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                result = ex.Message;\n            }\n            return result;\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 372,
                "snippet": {
                  "text": "                result = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 369,
                "endLine": 375,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                result = ex.Message;\n            }\n            return result;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to result"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 374,
                "snippet": {
                  "text": "            return result;"
                }
              },
              "contextRegion": {
                "startLine": 371,
                "endLine": 377,
                "snippet": {
                  "text": "            {\n                result = ex.Message;\n            }\n            return result;\n        }\n\n        public DataSet GetUsers()\n"
                }
              }
            },
            "message": {
              "text": "Return result"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 132,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_PWD, txtPassword.Text);"
                }
              },
              "contextRegion": {
                "startLine": 129,
                "endLine": 135,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtPassword.Text))\n                configFile.Remove(DbConstants.KEY_PWD);\n            else\n                configFile.Set(DbConstants.KEY_PWD, txtPassword.Text);\n            \n            configFile.Save();\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 132,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_PWD, txtPassword.Text);"
                }
              },
              "contextRegion": {
                "startLine": 129,
                "endLine": 135,
                "snippet": {
                  "text": "            if (string.IsNullOrEmpty(txtPassword.Text))\n                configFile.Remove(DbConstants.KEY_PWD);\n            else\n                configFile.Set(DbConstants.KEY_PWD, txtPassword.Text);\n            \n            configFile.Save();\n        }\n"
                }
              }
            },
            "message": {
              "text": "Set(1 : this._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 484,
                "snippet": {
                  "text": "            return GetProductsAndCategories(0);"
                }
              },
              "contextRegion": {
                "startLine": 481,
                "endLine": 487,
                "snippet": {
                  "text": "\n        public DataSet GetProductsAndCategories()\n        {\n            return GetProductsAndCategories(0);\n        }\n\n        public DataSet GetProductsAndCategories(int catNumber)\n"
                }
              }
            },
            "message": {
              "text": "GetProductsAndCategories(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 66,
                "snippet": {
                  "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 63,
                "endLine": 69,
                "snippet": {
                  "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 66,
                "snippet": {
                  "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 63,
                "endLine": 69,
                "snippet": {
                  "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "getPassword(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 77,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 74,
                "endLine": 80,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "GetPasswordByEmail(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 354,
                "snippet": {
                  "text": "                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";"
                }
              },
              "contextRegion": {
                "startLine": 351,
                "endLine": 357,
                "snippet": {
                  "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 354,
                "snippet": {
                  "text": "                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";"
                }
              },
              "contextRegion": {
                "startLine": 351,
                "endLine": 357,
                "snippet": {
                  "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 354,
                "snippet": {
                  "text": "                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";"
                }
              },
              "contextRegion": {
                "startLine": 351,
                "endLine": 357,
                "snippet": {
                  "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 355,
                "snippet": {
                  "text": "                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                }
              },
              "contextRegion": {
                "startLine": 352,
                "endLine": 358,
                "snippet": {
                  "text": "                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n\n"
                }
              }
            },
            "message": {
              "text": "MySqlDataAdapter(0 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 355,
                "snippet": {
                  "text": "                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                }
              },
              "contextRegion": {
                "startLine": 352,
                "endLine": 358,
                "snippet": {
                  "text": "                {\n                    //get data\n                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to da"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 357,
                "snippet": {
                  "text": "                    da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 354,
                "endLine": 360,
                "snippet": {
                  "text": "                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n\n                    //check if email address exists\n                    if (ds.Tables[0].Rows.Count == 0)\n"
                }
              }
            },
            "message": {
              "text": "Fill(this : 0)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 365,
                "snippet": {
                  "text": "                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 362,
                "endLine": 368,
                "snippet": {
                  "text": "                        result = \"Email Address Not Found!\";\n                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 365,
                "snippet": {
                  "text": "                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 362,
                "endLine": 368,
                "snippet": {
                  "text": "                        result = \"Email Address Not Found!\";\n                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 365,
                "snippet": {
                  "text": "                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 362,
                "endLine": 368,
                "snippet": {
                  "text": "                        result = \"Email Address Not Found!\";\n                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 365,
                "snippet": {
                  "text": "                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 362,
                "endLine": 368,
                "snippet": {
                  "text": "                        result = \"Email Address Not Found!\";\n                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 365,
                "snippet": {
                  "text": "                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 362,
                "endLine": 368,
                "snippet": {
                  "text": "                        result = \"Email Address Not Found!\";\n                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to encoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 366,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 363,
                "endLine": 369,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Decode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 366,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 363,
                "endLine": 369,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to decoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 367,
                "snippet": {
                  "text": "                    result = decoded_password;"
                }
              },
              "contextRegion": {
                "startLine": 364,
                "endLine": 370,
                "snippet": {
                  "text": "\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "Assignment to result"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 77,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 74,
                "endLine": 80,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 78,
                "snippet": {
                  "text": "            return password;"
                }
              },
              "contextRegion": {
                "startLine": 75,
                "endLine": 81,
                "snippet": {
                  "text": "        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n    }\n"
                }
              }
            },
            "message": {
              "text": "Return password"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 66,
                "snippet": {
                  "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 63,
                "endLine": 69,
                "snippet": {
                  "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 288,
                "snippet": {
                  "text": "                log.Error(\"Error adding comment\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 285,
                "endLine": 291,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                log.Error(\"Error adding comment\", ex);\n                output = ex.Message;\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 364,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 361,
                "endLine": 367,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Read encoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 365,
                "snippet": {
                  "text": "                    result = decoded_password;"
                }
              },
              "contextRegion": {
                "startLine": 362,
                "endLine": 368,
                "snippet": {
                  "text": "\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "Read decoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 77,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 74,
                "endLine": 80,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "GetPasswordByEmail(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 417,
                "snippet": {
                  "text": "                da.Fill(ds, \"products\");"
                }
              },
              "contextRegion": {
                "startLine": 414,
                "endLine": 420,
                "snippet": {
                  "text": "            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 429,
                "snippet": {
                  "text": "                return ds;"
                }
              },
              "contextRegion": {
                "startLine": 426,
                "endLine": 432,
                "snippet": {
                  "text": "                false);\n\n                ds.Relations.Add(dr);\n                return ds;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "        {\n            string id = Request[\"productNumber\"];\n            if (id == null) id = \"S18_2795\"; //this month's special    \n            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n"
                }
              }
            },
            "message": {
              "text": "GetProductDetails(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "        {\n            string id = Request[\"productNumber\"];\n            if (id == null) id = \"S18_2795\"; //this month's special    \n            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n"
                }
              }
            },
            "message": {
              "text": "Assignment to ds"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n            {\n                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n            {\n                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n            {\n                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n            {\n                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n"
                }
              }
            },
            "message": {
              "text": "GetEnumerator(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n            {\n                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Current(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n            {\n                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n"
                }
              }
            },
            "message": {
              "text": "Assignment to prodRow"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";\n                output += \"</div>\";\n\n                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();\n\n                DataRow[] childrows = prodRow.GetChildRows(\"prod_comments\");\n                if (childrows.Length > 0)\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";\n                output += \"</div>\";\n\n                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();\n\n                DataRow[] childrows = prodRow.GetChildRows(\"prod_comments\");\n                if (childrows.Length > 0)\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";\n                output += \"</div>\";\n\n                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();\n\n                DataRow[] childrows = prodRow.GetChildRows(\"prod_comments\");\n                if (childrows.Length > 0)\n"
                }
              }
            },
            "message": {
              "text": "set_Value(0 : this.value)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "        {\n            try\n            {\n                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "get_Value(this.value : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "        {\n            try\n            {\n                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "AddComment(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 265,
                "snippet": {
                  "text": "            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";"
                }
              },
              "contextRegion": {
                "startLine": 262,
                "endLine": 268,
                "snippet": {
                  "text": "\n        public string AddComment(string productCode, string email, string comment)\n        {\n            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";\n            string output = null;\n            \n            try\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 265,
                "snippet": {
                  "text": "            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";"
                }
              },
              "contextRegion": {
                "startLine": 262,
                "endLine": 268,
                "snippet": {
                  "text": "\n        public string AddComment(string productCode, string email, string comment)\n        {\n            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";\n            string output = null;\n            \n            try\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 265,
                "snippet": {
                  "text": "            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";"
                }
              },
              "contextRegion": {
                "startLine": 262,
                "endLine": 268,
                "snippet": {
                  "text": "\n        public string AddComment(string productCode, string email, string comment)\n        {\n            string sql = \"insert into Comments(productCode, email, comment) values ('\" + productCode + \"','\" + email + \"','\" + comment + \"');\";\n            string output = null;\n            \n            try\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 97,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_HOST, txtServer.Text);"
                }
              },
              "contextRegion": {
                "startLine": 94,
                "endLine": 100,
                "snippet": {
                  "text": "           if (string.IsNullOrEmpty(txtServer.Text))\n                configFile.Remove(DbConstants.KEY_HOST);\n            else\n                configFile.Set(DbConstants.KEY_HOST, txtServer.Text);\n\n            if (string.IsNullOrEmpty(txtFilePath.Text))\n                configFile.Remove(DbConstants.KEY_FILE_NAME);\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 97,
                "snippet": {
                  "text": "                configFile.Set(DbConstants.KEY_HOST, txtServer.Text);"
                }
              },
              "contextRegion": {
                "startLine": 94,
                "endLine": 100,
                "snippet": {
                  "text": "           if (string.IsNullOrEmpty(txtServer.Text))\n                configFile.Remove(DbConstants.KEY_HOST);\n            else\n                configFile.Set(DbConstants.KEY_HOST, txtServer.Text);\n\n            if (string.IsNullOrEmpty(txtFilePath.Text))\n                configFile.Remove(DbConstants.KEY_FILE_NAME);\n"
                }
              }
            },
            "message": {
              "text": "Set(1 : this._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                DataSet ds = du.GetCatalogData();"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "            if (!Page.IsPostBack) \n            {\n                \n                DataSet ds = du.GetCatalogData();\n                ddlItems.DataSource = ds.Tables[0];\n                ddlItems.DataTextField = \"productName\";\n                ddlItems.DataValueField = \"productCode\";\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                DataSet ds = du.GetCatalogData();"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "            if (!Page.IsPostBack) \n            {\n                \n                DataSet ds = du.GetCatalogData();\n                ddlItems.DataSource = ds.Tables[0];\n                ddlItems.DataTextField = \"productName\";\n                ddlItems.DataValueField = \"productCode\";\n"
                }
              }
            },
            "message": {
              "text": "GetCatalogData(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 18,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 15,
                "endLine": 21,
                "snippet": {
                  "text": "    public partial class Orders : System.Web.UI.Page\n    {\n    \n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 18,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 15,
                "endLine": 21,
                "snippet": {
                  "text": "    public partial class Orders : System.Web.UI.Page\n    {\n    \n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "                ds = du.GetOrders(id);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "                lblOutput.Text = \"Sorry, an unspecified problem regarding your Customer ID has occurred.  Are your cookies enabled?\";\n            else\n            {\n                ds = du.GetOrders(id);\n\n                if (!Page.IsPostBack) //generate the data grid\n                {\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "                ds = du.GetOrders(id);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "                lblOutput.Text = \"Sorry, an unspecified problem regarding your Customer ID has occurred.  Are your cookies enabled?\";\n            else\n            {\n                ds = du.GetOrders(id);\n\n                if (!Page.IsPostBack) //generate the data grid\n                {\n"
                }
              }
            },
            "message": {
              "text": "GetOrders(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 235,
                "snippet": {
                  "text": "                log.Error(\"Error getting customer details\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 232,
                "endLine": 238,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                log.Error(\"Error getting customer details\", ex);\n                \n                throw new ApplicationException(\"Error getting customer details\", ex);\n            }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 17,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 14,
                "endLine": 20,
                "snippet": {
                  "text": "{\n    public partial class CustomerLogin : System.Web.UI.Page\n    {\n        private IDbProvider du = Settings.CurrentDbProvider;\n        ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);\n        \n        protected void Page_Load(object sender, EventArgs e)\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 17,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 14,
                "endLine": 20,
                "snippet": {
                  "text": "{\n    public partial class CustomerLogin : System.Web.UI.Page\n    {\n        private IDbProvider du = Settings.CurrentDbProvider;\n        ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);\n        \n        protected void Page_Load(object sender, EventArgs e)\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 38,
                "snippet": {
                  "text": "            if (!du.IsValidCustomerLogin(email, pwd))"
                }
              },
              "contextRegion": {
                "startLine": 35,
                "endLine": 41,
                "snippet": {
                  "text": "\n            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);\n\n            if (!du.IsValidCustomerLogin(email, pwd))\n            {\n                labelError.Text = \"Incorrect username/password\"; \n                PanelError.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 38,
                "snippet": {
                  "text": "            if (!du.IsValidCustomerLogin(email, pwd))"
                }
              },
              "contextRegion": {
                "startLine": 35,
                "endLine": 41,
                "snippet": {
                  "text": "\n            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);\n\n            if (!du.IsValidCustomerLogin(email, pwd))\n            {\n                labelError.Text = \"Incorrect username/password\"; \n                PanelError.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "IsValidCustomerLogin(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "\t\t{\n            try\n            {\n                string error_message = du.AddComment(\"user_cmt\", txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "AddComment(2)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 314,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 311,
                "endLine": 317,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error updating customer password\", ex);\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 314,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 311,
                "endLine": 317,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error updating customer password\", ex);\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 314,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 311,
                "endLine": 317,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error updating customer password\", ex);\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 316,
                "snippet": {
                  "text": "            return output;"
                }
              },
              "contextRegion": {
                "startLine": 313,
                "endLine": 319,
                "snippet": {
                  "text": "                log.Error(\"Error updating customer password\", ex);\n                output = ex.Message;\n            }\n            return output;\n        }\n\n        public string[] GetSecurityQuestionAndAnswer(string email)\n"
                }
              }
            },
            "message": {
              "text": "Return output"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 32,
                "snippet": {
                  "text": "                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);"
                }
              },
              "contextRegion": {
                "startLine": 29,
                "endLine": 35,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n                labelMessage.Text = output;\n            }\n            else\n"
                }
              }
            },
            "message": {
              "text": "UpdateCustomerPassword(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 32,
                "snippet": {
                  "text": "                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);"
                }
              },
              "contextRegion": {
                "startLine": 29,
                "endLine": 35,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n                labelMessage.Text = output;\n            }\n            else\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 497,
                "snippet": {
                  "text": "                da.Fill(ds, \"categories\");"
                }
              },
              "contextRegion": {
                "startLine": 494,
                "endLine": 500,
                "snippet": {
                  "text": "\n                sql = \"select * from Categories\" + catClause;\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"categories\");\n\n                sql = \"select * from Products\" + catClause;\n                da = new MySqlDataAdapter(sql, connection);\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 511,
                "snippet": {
                  "text": "                return ds;"
                }
              },
              "contextRegion": {
                "startLine": 508,
                "endLine": 514,
                "snippet": {
                  "text": "                false);\n\n                ds.Relations.Add(dr);\n                return ds;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 476,
                "snippet": {
                  "text": "            return GetProductsAndCategories(0);"
                }
              },
              "contextRegion": {
                "startLine": 473,
                "endLine": 479,
                "snippet": {
                  "text": "\n        public DataSet GetProductsAndCategories()\n        {\n            return GetProductsAndCategories(0);\n        }\n\n        public DataSet GetProductsAndCategories(int catNumber)\n"
                }
              }
            },
            "message": {
              "text": "GetProductsAndCategories(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 476,
                "snippet": {
                  "text": "            return GetProductsAndCategories(0);"
                }
              },
              "contextRegion": {
                "startLine": 473,
                "endLine": 479,
                "snippet": {
                  "text": "\n        public DataSet GetProductsAndCategories()\n        {\n            return GetProductsAndCategories(0);\n        }\n\n        public DataSet GetProductsAndCategories(int catNumber)\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 32,
                "snippet": {
                  "text": "                    lblOutput.Text += \"</div>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 29,
                "endLine": 35,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "get_Text(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 32,
                "snippet": {
                  "text": "                    lblOutput.Text += \"</div>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 29,
                "endLine": 35,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 55,
                "snippet": {
                  "text": "            string id = Request[\"productNumber\"];"
                }
              },
              "contextRegion": {
                "startLine": 52,
                "endLine": 58,
                "snippet": {
                  "text": "\n        void LoadComments()\n        {\n            string id = Request[\"productNumber\"];\n            if (id == null) id = \"S18_2795\"; //this month's special    \n            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n"
                }
              }
            },
            "message": {
              "text": "get_Item(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 55,
                "snippet": {
                  "text": "            string id = Request[\"productNumber\"];"
                }
              },
              "contextRegion": {
                "startLine": 52,
                "endLine": 58,
                "snippet": {
                  "text": "\n        void LoadComments()\n        {\n            string id = Request[\"productNumber\"];\n            if (id == null) id = \"S18_2795\"; //this month's special    \n            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to id"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "        {\n            string id = Request[\"productNumber\"];\n            if (id == null) id = \"S18_2795\"; //this month's special    \n            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n"
                }
              }
            },
            "message": {
              "text": "GetProductDetails(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 415,
                "snippet": {
                  "text": "                sql = \"select * from Products where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 412,
                "endLine": 418,
                "snippet": {
                  "text": "\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 415,
                "snippet": {
                  "text": "                sql = \"select * from Products where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 412,
                "endLine": 418,
                "snippet": {
                  "text": "\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 415,
                "snippet": {
                  "text": "                sql = \"select * from Products where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 412,
                "endLine": 418,
                "snippet": {
                  "text": "\n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 416,
                "snippet": {
                  "text": "                da = new MySqlDataAdapter(sql, connection);"
                }
              },
              "contextRegion": {
                "startLine": 413,
                "endLine": 419,
                "snippet": {
                  "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n"
                }
              }
            },
            "message": {
              "text": "MySqlDataAdapter(0 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 416,
                "snippet": {
                  "text": "                da = new MySqlDataAdapter(sql, connection);"
                }
              },
              "contextRegion": {
                "startLine": 413,
                "endLine": 419,
                "snippet": {
                  "text": "            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n"
                }
              }
            },
            "message": {
              "text": "Assignment to da"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 417,
                "snippet": {
                  "text": "                da.Fill(ds, \"products\");"
                }
              },
              "contextRegion": {
                "startLine": 414,
                "endLine": 420,
                "snippet": {
                  "text": "            {\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n"
                }
              }
            },
            "message": {
              "text": "Fill(this : 0)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 53,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 50,
                "endLine": 56,
                "snippet": {
                  "text": "            //TODO: Need to provide interface for saving multiple configs need VS for it.\n            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "Create(0._settings['?'] : return._clientExec)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "                    return new MySqlDbProvider(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "            switch (dbType)\n            {\n                case DbConstants.DB_TYPE_MYSQL:\n                    return new MySqlDbProvider(configFile);\n                case DbConstants.DB_TYPE_SQLITE:\n                    return new SqliteDbProvider(configFile);\n                default:\n"
                }
              }
            },
            "message": {
              "text": "MySqlDbProvider(0._settings['?'] : this._clientExec)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 51,
                "snippet": {
                  "text": "            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);"
                }
              },
              "contextRegion": {
                "startLine": 48,
                "endLine": 54,
                "snippet": {
                  "text": "            _pwd = configFile.Get(DbConstants.KEY_PWD);\n            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n            _port = configFile.Get(DbConstants.KEY_PORT);\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Get(this._settings['?'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 51,
                "snippet": {
                  "text": "            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);"
                }
              },
              "contextRegion": {
                "startLine": 48,
                "endLine": 54,
                "snippet": {
                  "text": "            _pwd = configFile.Get(DbConstants.KEY_PWD);\n            _database = configFile.Get(DbConstants.KEY_DATABASE);\n            _host = configFile.Get(DbConstants.KEY_HOST);\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n            _port = configFile.Get(DbConstants.KEY_PORT);\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this._clientExec"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._clientExec)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/dbtest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            Settings.CurrentDbProvider.RecreateGoatDb();"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "            UpdateConfigFile(configFile);\n\n            Settings.CurrentDbProvider = DbProviderFactory.Create(configFile);\n            Settings.CurrentDbProvider.RecreateGoatDb();\n\n            if (Settings.CurrentDbProvider.TestConnection())\n            {\n"
                }
              }
            },
            "message": {
              "text": "RecreateGoatDb(this._clientExec)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 289,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 286,
                "endLine": 292,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error adding comment\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 289,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 286,
                "endLine": 292,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error adding comment\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 289,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 286,
                "endLine": 292,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error adding comment\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 106,
                "snippet": {
                  "text": "            int retVal1 = Math.Abs(Util.RunProcessWithInput(_clientExec, args, DbConstants.DB_CREATE_MYSQL_SCRIPT));"
                }
              },
              "contextRegion": {
                "startLine": 103,
                "endLine": 109,
                "snippet": {
                  "text": "\n            log.Info(\"Running recreate\");\n\n            int retVal1 = Math.Abs(Util.RunProcessWithInput(_clientExec, args, DbConstants.DB_CREATE_MYSQL_SCRIPT));\n            int retVal2 = Math.Abs(Util.RunProcessWithInput(_clientExec, args, DbConstants.DB_LOAD_MYSQL_SCRIPT));\n            \n            return Math.Abs(retVal1) + Math.Abs(retVal2) == 0;\n"
                }
              }
            },
            "message": {
              "text": "RunProcessWithInput(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 292,
                "snippet": {
                  "text": "            return output;"
                }
              },
              "contextRegion": {
                "startLine": 289,
                "endLine": 295,
                "snippet": {
                  "text": "                output = ex.Message;\n            }\n            \n            return output;\n        }\n\n        public string UpdateCustomerPassword(int customerNumber, string password)\n"
                }
              }
            },
            "message": {
              "text": "Return output"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 114,
                "snippet": {
                  "text": "                int retVal1 = Math.Abs(Util.RunProcessWithInput(_clientExec, args, script));"
                }
              },
              "contextRegion": {
                "startLine": 111,
                "endLine": 117,
                "snippet": {
                  "text": "                log.Info(\"Running recreate\");\n                string args = string.Format(\"\\\"{0}\\\"\", _dbFileName);\n                string script = Path.Combine(Settings.RootDir, DbConstants.DB_CREATE_SQLITE_SCRIPT);\n                int retVal1 = Math.Abs(Util.RunProcessWithInput(_clientExec, args, script));\n\n                script = Path.Combine(Settings.RootDir, DbConstants.DB_LOAD_SQLITE_SCRIPT);\n                int retVal2 = Math.Abs(Util.RunProcessWithInput(_clientExec, args, script));\n"
                }
              }
            },
            "message": {
              "text": "RunProcessWithInput(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "        {\n            string id = Request[\"productNumber\"];\n            if (id == null) id = \"S18_2795\"; //this month's special    \n            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "        {\n            string id = Request[\"productNumber\"];\n            if (id == null) id = \"S18_2795\"; //this month's special    \n            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n"
                }
              }
            },
            "message": {
              "text": "GetProductDetails(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 65,
                "snippet": {
                  "text": "                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";"
                }
              },
              "contextRegion": {
                "startLine": 62,
                "endLine": 68,
                "snippet": {
                  "text": "                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n                output += \"<strong>\" + prodRow[\"productName\"].ToString() + \"</strong><br/>\";\n                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";\n                output += \"</div>\";\n\n                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 65,
                "snippet": {
                  "text": "                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";"
                }
              },
              "contextRegion": {
                "startLine": 62,
                "endLine": 68,
                "snippet": {
                  "text": "                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n                output += \"<strong>\" + prodRow[\"productName\"].ToString() + \"</strong><br/>\";\n                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";\n                output += \"</div>\";\n\n                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 65,
                "snippet": {
                  "text": "                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";"
                }
              },
              "contextRegion": {
                "startLine": 62,
                "endLine": 68,
                "snippet": {
                  "text": "                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n                output += \"<strong>\" + prodRow[\"productName\"].ToString() + \"</strong><br/>\";\n                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";\n                output += \"</div>\";\n\n                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 65,
                "snippet": {
                  "text": "                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";"
                }
              },
              "contextRegion": {
                "startLine": 62,
                "endLine": 68,
                "snippet": {
                  "text": "                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n                output += \"<strong>\" + prodRow[\"productName\"].ToString() + \"</strong><br/>\";\n                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";\n                output += \"</div>\";\n\n                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 65,
                "snippet": {
                  "text": "                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";"
                }
              },
              "contextRegion": {
                "startLine": 62,
                "endLine": 68,
                "snippet": {
                  "text": "                output += \"<div class='product2' align='center'>\";\n                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n                output += \"<strong>\" + prodRow[\"productName\"].ToString() + \"</strong><br/>\";\n                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";\n                output += \"</div>\";\n\n                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 66,
                "snippet": {
                  "text": "                output += \"</div>\";"
                }
              },
              "contextRegion": {
                "startLine": 63,
                "endLine": 69,
                "snippet": {
                  "text": "                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n                output += \"<strong>\" + prodRow[\"productName\"].ToString() + \"</strong><br/>\";\n                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";\n                output += \"</div>\";\n\n                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 66,
                "snippet": {
                  "text": "                output += \"</div>\";"
                }
              },
              "contextRegion": {
                "startLine": 63,
                "endLine": 69,
                "snippet": {
                  "text": "                output += \"<img src='./images/products/\" + prodRow[\"productImage\"] + \"'/><br/>\";\n                output += \"<strong>\" + prodRow[\"productName\"].ToString() + \"</strong><br/>\";\n                output += \"<hr/>\" + prodRow[\"productDescription\"].ToString() + \"<br/>\";\n                output += \"</div>\";\n\n                hiddenFieldProductID.Value = prodRow[\"productCode\"].ToString();\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 425,
                "snippet": {
                  "text": "                da.Fill(ds, \"comments\");"
                }
              },
              "contextRegion": {
                "startLine": 422,
                "endLine": 428,
                "snippet": {
                  "text": "\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"comments\");\n\n                DataRelation dr = new DataRelation(\"prod_comments\",\n                ds.Tables[\"products\"].Columns[\"productCode\"], //category table\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 433,
                "snippet": {
                  "text": "                return ds;"
                }
              },
              "contextRegion": {
                "startLine": 430,
                "endLine": 436,
                "snippet": {
                  "text": "                false);\n\n                ds.Relations.Add(dr);\n                return ds;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "                    try\n                    {\n                        //lblOutput.Text = orderNumber;\n                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));\n                        DetailsView1.DataSource = dsOrderDetails.Tables[0];\n                        DetailsView1.DataBind();\n                        //litOrderDetails.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "                    try\n                    {\n                        //lblOutput.Text = orderNumber;\n                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));\n                        DetailsView1.DataSource = dsOrderDetails.Tables[0];\n                        DetailsView1.DataBind();\n                        //litOrderDetails.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "GetOrderDetails(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 289,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 286,
                "endLine": 292,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Read password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 289,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 286,
                "endLine": 292,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Encode(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 315,
                "snippet": {
                  "text": "            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + "
                }
              },
              "contextRegion": {
                "startLine": 312,
                "endLine": 318,
                "snippet": {
                  "text": "\n        public string[] GetSecurityQuestionAndAnswer(string email)\n        {\n            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + \n                \"SecurityQuestions where CustomerLogin.email = '\" + email + \"' and CustomerLogin.question_id = \" +\n                \"SecurityQuestions.question_id;\";\n                \n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 315,
                "snippet": {
                  "text": "            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + "
                }
              },
              "contextRegion": {
                "startLine": 312,
                "endLine": 318,
                "snippet": {
                  "text": "\n        public string[] GetSecurityQuestionAndAnswer(string email)\n        {\n            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + \n                \"SecurityQuestions where CustomerLogin.email = '\" + email + \"' and CustomerLogin.question_id = \" +\n                \"SecurityQuestions.question_id;\";\n                \n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 315,
                "snippet": {
                  "text": "            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + "
                }
              },
              "contextRegion": {
                "startLine": 312,
                "endLine": 318,
                "snippet": {
                  "text": "\n        public string[] GetSecurityQuestionAndAnswer(string email)\n        {\n            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + \n                \"SecurityQuestions where CustomerLogin.email = '\" + email + \"' and CustomerLogin.question_id = \" +\n                \"SecurityQuestions.question_id;\";\n                \n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 98,
                "snippet": {
                  "text": "\t            \tConsole.WriteLine(ex.Message);"
                }
              },
              "contextRegion": {
                "startLine": 95,
                "endLine": 101,
                "snippet": {
                  "text": "\t\t\t\t}\n\t            catch(Exception ex)\n\t            {\n\t            \tConsole.WriteLine(ex.Message);\n\t                return false;\n\t            }\n\t            finally\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 98,
                "snippet": {
                  "text": "\t            \tConsole.WriteLine(ex.Message);"
                }
              },
              "contextRegion": {
                "startLine": 95,
                "endLine": 101,
                "snippet": {
                  "text": "\t\t\t\t}\n\t            catch(Exception ex)\n\t            {\n\t            \tConsole.WriteLine(ex.Message);\n\t                return false;\n\t            }\n\t            finally\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 109,
                "snippet": {
                  "text": "\t        \tConsole.WriteLine(ex.Message);"
                }
              },
              "contextRegion": {
                "startLine": 106,
                "endLine": 112,
                "snippet": {
                  "text": "\t        }\n\t        catch(Exception ex)\n\t        {\n\t        \tConsole.WriteLine(ex.Message);\n\t            return false;\n\t        }\n\t        return true;\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 109,
                "snippet": {
                  "text": "\t        \tConsole.WriteLine(ex.Message);"
                }
              },
              "contextRegion": {
                "startLine": 106,
                "endLine": 112,
                "snippet": {
                  "text": "\t        }\n\t        catch(Exception ex)\n\t        {\n\t        \tConsole.WriteLine(ex.Message);\n\t            return false;\n\t        }\n\t        return true;\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 14,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 11,
                "endLine": 17,
                "snippet": {
                  "text": "{\n    public partial class ChangePassword : System.Web.UI.Page\n    {\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 14,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 11,
                "endLine": 17,
                "snippet": {
                  "text": "{\n    public partial class ChangePassword : System.Web.UI.Page\n    {\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 32,
                "snippet": {
                  "text": "                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);"
                }
              },
              "contextRegion": {
                "startLine": 29,
                "endLine": 35,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n                labelMessage.Text = output;\n            }\n            else\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 32,
                "snippet": {
                  "text": "                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);"
                }
              },
              "contextRegion": {
                "startLine": 29,
                "endLine": 35,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n                labelMessage.Text = output;\n            }\n            else\n"
                }
              }
            },
            "message": {
              "text": "UpdateCustomerPassword(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "GetPasswordByEmail(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 77,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 74,
                "endLine": 80,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 77,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 74,
                "endLine": 80,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "GetPasswordByEmail(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "        {\n            try\n            {\n                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "        {\n            try\n            {\n                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "AddComment(2)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 501,
                "snippet": {
                  "text": "                da.Fill(ds, \"products\");"
                }
              },
              "contextRegion": {
                "startLine": 498,
                "endLine": 504,
                "snippet": {
                  "text": "\n                sql = \"select * from Products\" + catClause;\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n\n                //category / products relationship\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "{\n\tpublic partial class ReflectedXSS : System.Web.UI.Page\n\t{\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDbProvider(return._connectionString)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "        private IDbProvider du = Settings.CurrentDbProvider;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "{\n\tpublic partial class ReflectedXSS : System.Web.UI.Page\n\t{\n        private IDbProvider du = Settings.CurrentDbProvider;\n        \n        protected void Page_Load(object sender, EventArgs e)\n        {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "            DataSet ds = du.GetOffice(city);"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "\n\t\tvoid LoadCity (String city)\n\t\t{\n            DataSet ds = du.GetOffice(city);\n            lblOutput.Text = \"Here are the details for our \" + city + \" Office\";\n            dtlView.DataSource = ds.Tables[0];\n            dtlView.DataBind();\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "            DataSet ds = du.GetOffice(city);"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "\n\t\tvoid LoadCity (String city)\n\t\t{\n            DataSet ds = du.GetOffice(city);\n            lblOutput.Text = \"Here are the details for our \" + city + \" Office\";\n            dtlView.DataSource = ds.Tables[0];\n            dtlView.DataBind();\n"
                }
              }
            },
            "message": {
              "text": "GetOffice(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "            DataSet ds = du.GetOffice(city);"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "\n        void FixedLoadCity (String city)\n        {\n            DataSet ds = du.GetOffice(city);\n            lblOutput.Text = \"Here are the details for our \" + Server.HtmlEncode(city) + \" Office\";\n            dtlView.DataSource = ds.Tables[0];\n            dtlView.DataBind();\n"
                }
              }
            },
            "message": {
              "text": "Read this.du"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "            DataSet ds = du.GetOffice(city);"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "\n        void FixedLoadCity (String city)\n        {\n            DataSet ds = du.GetOffice(city);\n            lblOutput.Text = \"Here are the details for our \" + Server.HtmlEncode(city) + \" Office\";\n            dtlView.DataSource = ds.Tables[0];\n            dtlView.DataBind();\n"
                }
              }
            },
            "message": {
              "text": "GetOffice(this._connectionString)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/messagedigest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "            log.Info(string.Format(\"Result for {0} is: {1}\", txtBoxMsg.Text, result));"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "        {\n            string result = WeakMessageDigest.GenerateWeakDigest(txtBoxMsg.Text);\n\n            log.Info(string.Format(\"Result for {0} is: {1}\", txtBoxMsg.Text, result));\n            lblResultDigest.Text = result;\n        }\n    }    \n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/messagedigest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "            log.Info(string.Format(\"Result for {0} is: {1}\", txtBoxMsg.Text, result));"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "        {\n            string result = WeakMessageDigest.GenerateWeakDigest(txtBoxMsg.Text);\n\n            log.Info(string.Format(\"Result for {0} is: {1}\", txtBoxMsg.Text, result));\n            lblResultDigest.Text = result;\n        }\n    }    \n"
                }
              }
            },
            "message": {
              "text": "Format(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 366,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 363,
                "endLine": 369,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Read encoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 367,
                "snippet": {
                  "text": "                    result = decoded_password;"
                }
              },
              "contextRegion": {
                "startLine": 364,
                "endLine": 370,
                "snippet": {
                  "text": "\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "Read decoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 66,
                "snippet": {
                  "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 63,
                "endLine": 69,
                "snippet": {
                  "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "getPassword(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 550,
                "snippet": {
                  "text": "                log.Error(\"Error getting email by customer number\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 547,
                "endLine": 553,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                log.Error(\"Error getting email by customer number\", ex);\n                output = ex.Message;\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 31,
                "snippet": {
                  "text": "                    lblOutput.Text += \"</a>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 28,
                "endLine": 34,
                "snippet": {
                  "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "get_Text(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 31,
                "snippet": {
                  "text": "                    lblOutput.Text += \"</a>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 28,
                "endLine": 34,
                "snippet": {
                  "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 62,
                "snippet": {
                  "text": "                string orderNumber = Request[\"orderNumber\"];"
                }
              },
              "contextRegion": {
                "startLine": 59,
                "endLine": 65,
                "snippet": {
                  "text": "                    GridView1.DataBind();\n                }\n                //check if orderNumber exists\n                string orderNumber = Request[\"orderNumber\"];\n                if (orderNumber != null)\n                {\n                    try\n"
                }
              }
            },
            "message": {
              "text": "get_Item(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 62,
                "snippet": {
                  "text": "                string orderNumber = Request[\"orderNumber\"];"
                }
              },
              "contextRegion": {
                "startLine": 59,
                "endLine": 65,
                "snippet": {
                  "text": "                    GridView1.DataBind();\n                }\n                //check if orderNumber exists\n                string orderNumber = Request[\"orderNumber\"];\n                if (orderNumber != null)\n                {\n                    try\n"
                }
              }
            },
            "message": {
              "text": "Assignment to orderNumber"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "                        litErrorDetailMessage.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "                    {\n                        //litOrderDetails.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;\n                        PanelShowDetailFailure.Visible = true;\n                        litErrorDetailMessage.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;\n                    }\n                }\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "                        litErrorDetailMessage.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "                    {\n                        //litOrderDetails.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;\n                        PanelShowDetailFailure.Visible = true;\n                        litErrorDetailMessage.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;\n                    }\n                }\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "get_Text(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Settings.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                log.Debug(\"PWD: \" + Environment.CurrentDirectory);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "                RootDir = server.MapPath(\".\");\n\n                log.Debug(\"DYLD_FALLBACK_LIBRARY_PATH: \" + Environment.GetEnvironmentVariable(\"DYLD_FALLBACK_LIBRARY_PATH\"));\n                log.Debug(\"PWD: \" + Environment.CurrentDirectory);\n\n                //By default if there's no config let's create a sqlite db.\n                string defaultConfigPath = DefaultConfigPath;\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDirectory(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Settings.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                log.Debug(\"PWD: \" + Environment.CurrentDirectory);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "                RootDir = server.MapPath(\".\");\n\n                log.Debug(\"DYLD_FALLBACK_LIBRARY_PATH: \" + Environment.GetEnvironmentVariable(\"DYLD_FALLBACK_LIBRARY_PATH\"));\n                log.Debug(\"PWD: \" + Environment.CurrentDirectory);\n\n                //By default if there's no config let's create a sqlite db.\n                string defaultConfigPath = DefaultConfigPath;\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 23,
                "snippet": {
                  "text": "                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 20,
                "endLine": 26,
                "snippet": {
                  "text": "\n            foreach (DataRow catRow in ds.Tables[\"categories\"].Rows)\n            {\n                lblOutput.Text += \"<p/><h2 class='title-regular-2 clearfix'>Category: \" + catRow[\"catName\"].ToString() + \"</h2><hr/><p/>\\n\";\n                foreach (DataRow prodRow in catRow.GetChildRows(\"cat_prods\"))\n                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "get_Text(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 421,
                "snippet": {
                  "text": "                da.Fill(ds, \"products\");"
                }
              },
              "contextRegion": {
                "startLine": 418,
                "endLine": 424,
                "snippet": {
                  "text": "\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 34,
                "snippet": {
                  "text": "            string pwd = txtPassword.Text;"
                }
              },
              "contextRegion": {
                "startLine": 31,
                "endLine": 37,
                "snippet": {
                  "text": "        protected void ButtonLogOn_Click(object sender, EventArgs e)\n        {\n            string email = txtUserName.Text;\n            string pwd = txtPassword.Text;\n\n            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);\n\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 34,
                "snippet": {
                  "text": "            string pwd = txtPassword.Text;"
                }
              },
              "contextRegion": {
                "startLine": 31,
                "endLine": 37,
                "snippet": {
                  "text": "        protected void ButtonLogOn_Click(object sender, EventArgs e)\n        {\n            string email = txtUserName.Text;\n            string pwd = txtPassword.Text;\n\n            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to pwd"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 38,
                "snippet": {
                  "text": "            if (!du.IsValidCustomerLogin(email, pwd))"
                }
              },
              "contextRegion": {
                "startLine": 35,
                "endLine": 41,
                "snippet": {
                  "text": "\n            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);\n\n            if (!du.IsValidCustomerLogin(email, pwd))\n            {\n                labelError.Text = \"Incorrect username/password\"; \n                PanelError.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "IsValidCustomerLogin(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 115,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);"
                }
              },
              "contextRegion": {
                "startLine": 112,
                "endLine": 118,
                "snippet": {
                  "text": "        public bool IsValidCustomerLogin(string email, string password)\n        {\n            //encode password\n            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \n"
                }
              }
            },
            "message": {
              "text": "Encode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 141,
                "snippet": {
                  "text": "            string output = System.Convert.ToBase64String(bytes);"
                }
              },
              "contextRegion": {
                "startLine": 138,
                "endLine": 144,
                "snippet": {
                  "text": "        public static string Encode(string s)\n        {\n            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(s);\n            string output = System.Convert.ToBase64String(bytes);\n            return output;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 142,
                "snippet": {
                  "text": "            return output;"
                }
              },
              "contextRegion": {
                "startLine": 139,
                "endLine": 145,
                "snippet": {
                  "text": "        {\n            byte[] bytes = System.Text.Encoding.UTF8.GetBytes(s);\n            string output = System.Convert.ToBase64String(bytes);\n            return output;\n        }\n\n        /// <summary>\n"
                }
              }
            },
            "message": {
              "text": "Return output"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 115,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);"
                }
              },
              "contextRegion": {
                "startLine": 112,
                "endLine": 118,
                "snippet": {
                  "text": "        public bool IsValidCustomerLogin(string email, string password)\n        {\n            //encode password\n            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \n"
                }
              }
            },
            "message": {
              "text": "Assignment to encoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 118,
                "snippet": {
                  "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + "
                }
              },
              "contextRegion": {
                "startLine": 115,
                "endLine": 121,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 118,
                "snippet": {
                  "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + "
                }
              },
              "contextRegion": {
                "startLine": 115,
                "endLine": 121,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 118,
                "snippet": {
                  "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + "
                }
              },
              "contextRegion": {
                "startLine": 115,
                "endLine": 121,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "        public bool IsValidCustomerLogin(string email, string password)\n        {\n            //encode password\n            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n"
                }
              }
            },
            "message": {
              "text": "Encode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 562,
                "snippet": {
                  "text": "                log.Error(\"Error getting email by customer number\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 559,
                "endLine": 565,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                log.Error(\"Error getting email by customer number\", ex);\n                output = ex.Message;\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 37,
                "snippet": {
                  "text": "                lblMessage.Text = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 34,
                "endLine": 40,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                lblMessage.Text = ex.Message;\n                lblMessage.Visible = true;\n            }\n\t\t}\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 37,
                "snippet": {
                  "text": "                lblMessage.Text = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 34,
                "endLine": 40,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                lblMessage.Text = ex.Message;\n                lblMessage.Visible = true;\n            }\n\t\t}\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/uploadpathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 31,
                "snippet": {
                  "text": "                    labelUpload.Text = \"<div class='error' style='text-align:center'>Upload Failed: \" + ex.Message + \"</div>\";"
                }
              },
              "contextRegion": {
                "startLine": 28,
                "endLine": 34,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    labelUpload.Text = \"<div class='error' style='text-align:center'>Upload Failed: \" + ex.Message + \"</div>\";\n                }\n                finally\n                {\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/uploadpathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 31,
                "snippet": {
                  "text": "                    labelUpload.Text = \"<div class='error' style='text-align:center'>Upload Failed: \" + ex.Message + \"</div>\";"
                }
              },
              "contextRegion": {
                "startLine": 28,
                "endLine": 34,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    labelUpload.Text = \"<div class='error' style='text-align:center'>Upload Failed: \" + ex.Message + \"</div>\";\n                }\n                finally\n                {\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/uploadpathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 31,
                "snippet": {
                  "text": "                    labelUpload.Text = \"<div class='error' style='text-align:center'>Upload Failed: \" + ex.Message + \"</div>\";"
                }
              },
              "contextRegion": {
                "startLine": 28,
                "endLine": 34,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    labelUpload.Text = \"<div class='error' style='text-align:center'>Upload Failed: \" + ex.Message + \"</div>\";\n                }\n                finally\n                {\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/uploadpathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 31,
                "snippet": {
                  "text": "                    labelUpload.Text = \"<div class='error' style='text-align:center'>Upload Failed: \" + ex.Message + \"</div>\";"
                }
              },
              "contextRegion": {
                "startLine": 28,
                "endLine": 34,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    labelUpload.Text = \"<div class='error' style='text-align:center'>Upload Failed: \" + ex.Message + \"</div>\";\n                }\n                finally\n                {\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "                        litErrorDetailMessage.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "                    {\n                        //litOrderDetails.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;\n                        PanelShowDetailFailure.Visible = true;\n                        litErrorDetailMessage.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;\n                    }\n                }\n\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "                        litErrorDetailMessage.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "                    {\n                        //litOrderDetails.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;\n                        PanelShowDetailFailure.Visible = true;\n                        litErrorDetailMessage.Text = \"Error finding order number \" + orderNumber + \". Details: \" + ex.Message;\n                    }\n                }\n\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 38,
                "snippet": {
                  "text": "            string secret = txtString.Text;"
                }
              },
              "contextRegion": {
                "startLine": 35,
                "endLine": 41,
                "snippet": {
                  "text": "            //sha1\n            //encryption with password\n            \n            string secret = txtString.Text;\n            string key = String.IsNullOrEmpty(txtPassword.Text) ? hardCodedKey : txtPassword.Text;\n            \n            Table t = new Table();\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 38,
                "snippet": {
                  "text": "            string secret = txtString.Text;"
                }
              },
              "contextRegion": {
                "startLine": 35,
                "endLine": 41,
                "snippet": {
                  "text": "            //sha1\n            //encryption with password\n            \n            string secret = txtString.Text;\n            string key = String.IsNullOrEmpty(txtPassword.Text) ? hardCodedKey : txtPassword.Text;\n            \n            Table t = new Table();\n"
                }
              }
            },
            "message": {
              "text": "Assignment to secret"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 45,
                "snippet": {
                  "text": "            t.Rows.Add(MakeRow(\"URL Encoded:\", Server.UrlEncode(secret)));"
                }
              },
              "contextRegion": {
                "startLine": 42,
                "endLine": 48,
                "snippet": {
                  "text": "            t.Width = new Unit(\"100%\");\n            \n            t.Rows.Add(MakeRow(\"Custom Crypto\", CustomCryptoEncrypt(secret)));\n            t.Rows.Add(MakeRow(\"URL Encoded:\", Server.UrlEncode(secret)));\n            t.Rows.Add(MakeRow(\"Base64 Encoded:\", Base64(secret)));\n            t.Rows.Add(MakeRow(\"SHA1 Hashed:\", SHA(secret, WG_Hash.Sha1)));\n            t.Rows.Add(MakeRow(\"SHA256 Hashed:\", SHA(secret, WG_Hash.Sha256)));\n"
                }
              }
            },
            "message": {
              "text": "UrlEncode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 45,
                "snippet": {
                  "text": "            t.Rows.Add(MakeRow(\"URL Encoded:\", Server.UrlEncode(secret)));"
                }
              },
              "contextRegion": {
                "startLine": 42,
                "endLine": 48,
                "snippet": {
                  "text": "            t.Width = new Unit(\"100%\");\n            \n            t.Rows.Add(MakeRow(\"Custom Crypto\", CustomCryptoEncrypt(secret)));\n            t.Rows.Add(MakeRow(\"URL Encoded:\", Server.UrlEncode(secret)));\n            t.Rows.Add(MakeRow(\"Base64 Encoded:\", Base64(secret)));\n            t.Rows.Add(MakeRow(\"SHA1 Hashed:\", SHA(secret, WG_Hash.Sha1)));\n            t.Rows.Add(MakeRow(\"SHA256 Hashed:\", SHA(secret, WG_Hash.Sha256)));\n"
                }
              }
            },
            "message": {
              "text": "MakeRow(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 357,
                "snippet": {
                  "text": "                    da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 354,
                "endLine": 360,
                "snippet": {
                  "text": "                    string sql = \"select * from CustomerLogin where email = '\" + email + \"';\";\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    DataSet ds = new DataSet();\n                    da.Fill(ds);\n\n                    //check if email address exists\n                    if (ds.Tables[0].Rows.Count == 0)\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 48,
                "snippet": {
                  "text": "                lblMessage.Text = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 45,
                "endLine": 51,
                "snippet": {
                  "text": "            }\n            catch(Exception ex)\n            {\n                lblMessage.Text = ex.Message;\n                lblMessage.Visible = true;\n            }\n        }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 48,
                "snippet": {
                  "text": "                lblMessage.Text = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 45,
                "endLine": 51,
                "snippet": {
                  "text": "            }\n            catch(Exception ex)\n            {\n                lblMessage.Text = ex.Message;\n                lblMessage.Visible = true;\n            }\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 169,
                "snippet": {
                  "text": "                log.Error(\"Error with custom customer login\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 166,
                "endLine": 172,
                "snippet": {
                  "text": "            }\n            catch (SqliteException ex)\n            {\n                log.Error(\"Error with custom customer login\", ex);\n                error_message = ex.Message;\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 174,
                "snippet": {
                  "text": "                log.Error(\"Error with custom customer login\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 171,
                "endLine": 177,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                log.Error(\"Error with custom customer login\", ex);\n            }\n\n            return error_message;    \n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 153,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 150,
                "endLine": 156,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n\n                    if (password.Trim().ToLower() != decoded_password.Trim().ToLower())\n                    {\n"
                }
              }
            },
            "message": {
              "text": "Read encoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 153,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 150,
                "endLine": 156,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n\n                    if (password.Trim().ToLower() != decoded_password.Trim().ToLower())\n                    {\n"
                }
              }
            },
            "message": {
              "text": "Decode(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 203,
                "snippet": {
                  "text": "                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 200,
                "endLine": 206,
                "snippet": {
                  "text": "            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    output = command.ExecuteScalar().ToString();\n                } \n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 203,
                "snippet": {
                  "text": "                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 200,
                "endLine": 206,
                "snippet": {
                  "text": "            \n                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + customerNumber;\n                    MySqlCommand command = new MySqlCommand(sql, connection);\n                    output = command.ExecuteScalar().ToString();\n                } \n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "            string email = txtUserName.Text;"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "\n        protected void ButtonLogOn_Click(object sender, EventArgs e)\n        {\n            string email = txtUserName.Text;\n            string pwd = txtPassword.Text;\n\n            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "            string email = txtUserName.Text;"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "\n        protected void ButtonLogOn_Click(object sender, EventArgs e)\n        {\n            string email = txtUserName.Text;\n            string pwd = txtPassword.Text;\n\n            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to email"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 38,
                "snippet": {
                  "text": "            if (!du.IsValidCustomerLogin(email, pwd))"
                }
              },
              "contextRegion": {
                "startLine": 35,
                "endLine": 41,
                "snippet": {
                  "text": "\n            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);\n\n            if (!du.IsValidCustomerLogin(email, pwd))\n            {\n                labelError.Text = \"Incorrect username/password\"; \n                PanelError.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "IsValidCustomerLogin(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 370,
                "snippet": {
                  "text": "                result = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 367,
                "endLine": 373,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                result = ex.Message;\n            }\n            return result;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 370,
                "snippet": {
                  "text": "                result = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 367,
                "endLine": 373,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                result = ex.Message;\n            }\n            return result;\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 370,
                "snippet": {
                  "text": "                result = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 367,
                "endLine": 373,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                result = ex.Message;\n            }\n            return result;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to result"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "            DataSet ds = du.GetProductDetails(id);"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "        {\n            string id = Request[\"productNumber\"];\n            if (id == null) id = \"S18_2795\"; //this month's special    \n            DataSet ds = du.GetProductDetails(id);\n            string output = string.Empty;\n            string comments = string.Empty;\n            foreach (DataRow prodRow in ds.Tables[\"products\"].Rows)\n"
                }
              }
            },
            "message": {
              "text": "GetProductDetails(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 419,
                "snippet": {
                  "text": "                sql = \"select * from Products where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 416,
                "endLine": 422,
                "snippet": {
                  "text": "            {\n                connection.Open();\n\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 419,
                "snippet": {
                  "text": "                sql = \"select * from Products where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 416,
                "endLine": 422,
                "snippet": {
                  "text": "            {\n                connection.Open();\n\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 419,
                "snippet": {
                  "text": "                sql = \"select * from Products where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 416,
                "endLine": 422,
                "snippet": {
                  "text": "            {\n                connection.Open();\n\n                sql = \"select * from Products where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 423,
                "snippet": {
                  "text": "                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 420,
                "endLine": 426,
                "snippet": {
                  "text": "                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"comments\");\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 423,
                "snippet": {
                  "text": "                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 420,
                "endLine": 426,
                "snippet": {
                  "text": "                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"comments\");\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 423,
                "snippet": {
                  "text": "                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 420,
                "endLine": 426,
                "snippet": {
                  "text": "                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new SqliteDataAdapter(sql, connection);\n                da.Fill(ds, \"comments\");\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 421,
                "snippet": {
                  "text": "                da.Fill(ds, \"comments\");"
                }
              },
              "contextRegion": {
                "startLine": 418,
                "endLine": 424,
                "snippet": {
                  "text": "\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"comments\");\n\n                DataRelation dr = new DataRelation(\"prod_comments\",\n                ds.Tables[\"products\"].Columns[\"productCode\"], //category table\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 308,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 305,
                "endLine": 311,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error updating customer password\", ex);\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 308,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 305,
                "endLine": 311,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error updating customer password\", ex);\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 308,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 305,
                "endLine": 311,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error updating customer password\", ex);\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 310,
                "snippet": {
                  "text": "            return output;"
                }
              },
              "contextRegion": {
                "startLine": 307,
                "endLine": 313,
                "snippet": {
                  "text": "                log.Error(\"Error updating customer password\", ex);\n                output = ex.Message;\n            }\n            return output;\n        }\n\n        public string[] GetSecurityQuestionAndAnswer(string email)\n"
                }
              }
            },
            "message": {
              "text": "Return output"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 66,
                "snippet": {
                  "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 63,
                "endLine": 69,
                "snippet": {
                  "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "getPassword(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 77,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 74,
                "endLine": 80,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "GetPasswordByEmail(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "\t                if (_Request.Headers[\"Range\"] != null)\n\t                {\n\t                    _Response.StatusCode = 206;\n\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });\n\t                    startBytes = Convert.ToInt64(range[1]);\n\t                }\n\t                _Response.AddHeader(\"Content-Length\", (fileLength - startBytes).ToString());\n"
                }
              }
            },
            "message": {
              "text": "get_Headers(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "\t                if (_Request.Headers[\"Range\"] != null)\n\t                {\n\t                    _Response.StatusCode = 206;\n\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });\n\t                    startBytes = Convert.ToInt64(range[1]);\n\t                }\n\t                _Response.AddHeader(\"Content-Length\", (fileLength - startBytes).ToString());\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['Range'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "\t                if (_Request.Headers[\"Range\"] != null)\n\t                {\n\t                    _Response.StatusCode = 206;\n\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });\n\t                    startBytes = Convert.ToInt64(range[1]);\n\t                }\n\t                _Response.AddHeader(\"Content-Length\", (fileLength - startBytes).ToString());\n"
                }
              }
            },
            "message": {
              "text": "Split(this : return[])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "\t                if (_Request.Headers[\"Range\"] != null)\n\t                {\n\t                    _Response.StatusCode = 206;\n\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });\n\t                    startBytes = Convert.ToInt64(range[1]);\n\t                }\n\t                _Response.AddHeader(\"Content-Length\", (fileLength - startBytes).ToString());\n"
                }
              }
            },
            "message": {
              "text": "Assignment to range"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "\t                    startBytes = Convert.ToInt64(range[1]);"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "\t                {\n\t                    _Response.StatusCode = 206;\n\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });\n\t                    startBytes = Convert.ToInt64(range[1]);\n\t                }\n\t                _Response.AddHeader(\"Content-Length\", (fileLength - startBytes).ToString());\n\t        \n"
                }
              }
            },
            "message": {
              "text": "ToInt64(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "\t                    startBytes = Convert.ToInt64(range[1]);"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "\t                {\n\t                    _Response.StatusCode = 206;\n\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });\n\t                    startBytes = Convert.ToInt64(range[1]);\n\t                }\n\t                _Response.AddHeader(\"Content-Length\", (fileLength - startBytes).ToString());\n\t        \n"
                }
              }
            },
            "message": {
              "text": "Assignment to startBytes"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 70,
                "snippet": {
                  "text": "\t                _Response.AddHeader(\"Content-Length\", (fileLength - startBytes).ToString());"
                }
              },
              "contextRegion": {
                "startLine": 67,
                "endLine": 73,
                "snippet": {
                  "text": "\t                    string[] range = _Request.Headers[\"Range\"].Split(new char[] { '=', '-' });\n\t                    startBytes = Convert.ToInt64(range[1]);\n\t                }\n\t                _Response.AddHeader(\"Content-Length\", (fileLength - startBytes).ToString());\n\t        \n\t                if (startBytes != 0)\n\t                {\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "                string encrypted_password = Request.Cookies[\"encr_sec_qu_ans\"].Value.ToString();\n                \n                //decode it (twice for extra security!)\n                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));\n                \n                if (security_answer.Trim().ToLower().Equals(txtAnswer.Text.Trim().ToLower()))\n                {\n"
                }
              }
            },
            "message": {
              "text": "Read encrypted_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "                string encrypted_password = Request.Cookies[\"encr_sec_qu_ans\"].Value.ToString();\n                \n                //decode it (twice for extra security!)\n                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));\n                \n                if (security_answer.Trim().ToLower().Equals(txtAnswer.Text.Trim().ToLower()))\n                {\n"
                }
              }
            },
            "message": {
              "text": "Decode(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 60,
                "snippet": {
                  "text": "                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));"
                }
              },
              "contextRegion": {
                "startLine": 57,
                "endLine": 63,
                "snippet": {
                  "text": "                string encrypted_password = Request.Cookies[\"encr_sec_qu_ans\"].Value.ToString();\n                \n                //decode it (twice for extra security!)\n                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));\n                \n                if (security_answer.Trim().ToLower().Equals(txtAnswer.Text.Trim().ToLower()))\n                {\n"
                }
              }
            },
            "message": {
              "text": "Decode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 36,
                "snippet": {
                  "text": "            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);"
                }
              },
              "contextRegion": {
                "startLine": 33,
                "endLine": 39,
                "snippet": {
                  "text": "            string email = txtUserName.Text;\n            string pwd = txtPassword.Text;\n\n            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);\n\n            if (!du.IsValidCustomerLogin(email, pwd))\n            {\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 328,
                "snippet": {
                  "text": "                da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 325,
                "endLine": 331,
                "snippet": {
                  "text": "                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 332,
                "snippet": {
                  "text": "                    DataRow row = ds.Tables[0].Rows[0];"
                }
              },
              "contextRegion": {
                "startLine": 329,
                "endLine": 335,
                "snippet": {
                  "text": "\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 332,
                "snippet": {
                  "text": "                    DataRow row = ds.Tables[0].Rows[0];"
                }
              },
              "contextRegion": {
                "startLine": 329,
                "endLine": 335,
                "snippet": {
                  "text": "\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 332,
                "snippet": {
                  "text": "                    DataRow row = ds.Tables[0].Rows[0];"
                }
              },
              "contextRegion": {
                "startLine": 329,
                "endLine": 335,
                "snippet": {
                  "text": "\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 332,
                "snippet": {
                  "text": "                    DataRow row = ds.Tables[0].Rows[0];"
                }
              },
              "contextRegion": {
                "startLine": 329,
                "endLine": 335,
                "snippet": {
                  "text": "\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to row"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 334,
                "snippet": {
                  "text": "                    qAndA[1] = row[1].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 331,
                "endLine": 337,
                "snippet": {
                  "text": "                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 334,
                "snippet": {
                  "text": "                    qAndA[1] = row[1].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 331,
                "endLine": 337,
                "snippet": {
                  "text": "                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 334,
                "snippet": {
                  "text": "                    qAndA[1] = row[1].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 331,
                "endLine": 337,
                "snippet": {
                  "text": "                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "Assignment to qAndA[1]"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 338,
                "snippet": {
                  "text": "            return qAndA;"
                }
              },
              "contextRegion": {
                "startLine": 335,
                "endLine": 341,
                "snippet": {
                  "text": "                }\n            }\n            \n            return qAndA;\n        }\n\n        public string GetPasswordByEmail(string email)\n"
                }
              }
            },
            "message": {
              "text": "Return qAndA"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(return[1])"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to result"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 46,
                "snippet": {
                  "text": "            cookie.Value = Encoder.Encode(Encoder.Encode(result[1]));"
                }
              },
              "contextRegion": {
                "startLine": 43,
                "endLine": 49,
                "snippet": {
                  "text": "\n            //encode twice for more security!\n\n            cookie.Value = Encoder.Encode(Encoder.Encode(result[1]));\n\n            Response.Cookies.Add(cookie); \n        }\n"
                }
              }
            },
            "message": {
              "text": "Encode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 258,
                "snippet": {
                  "text": "                da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 255,
                "endLine": 261,
                "snippet": {
                  "text": "                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                da.SelectCommand.Parameters.AddWithValue(\"@productCode\", productCode); \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n                return ds;\n            }\n        }\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 259,
                "snippet": {
                  "text": "                return ds;"
                }
              },
              "contextRegion": {
                "startLine": 256,
                "endLine": 262,
                "snippet": {
                  "text": "                da.SelectCommand.Parameters.AddWithValue(\"@productCode\", productCode); \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n                return ds;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 44,
                "snippet": {
                  "text": "            DataSet ds = du.GetComments(\"user_cmt\");"
                }
              },
              "contextRegion": {
                "startLine": 41,
                "endLine": 47,
                "snippet": {
                  "text": "\n        void LoadComments()\n        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetComments(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 44,
                "snippet": {
                  "text": "            DataSet ds = du.GetComments(\"user_cmt\");"
                }
              },
              "contextRegion": {
                "startLine": 41,
                "endLine": 47,
                "snippet": {
                  "text": "\n        void LoadComments()\n        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to ds"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 46,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 43,
                "endLine": 49,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + row[\"email\"] + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 46,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 43,
                "endLine": 49,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + row[\"email\"] + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 46,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 43,
                "endLine": 49,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + row[\"email\"] + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 46,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 43,
                "endLine": 49,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + row[\"email\"] + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "GetEnumerator(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 46,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 43,
                "endLine": 49,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + row[\"email\"] + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Current(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 46,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 43,
                "endLine": 49,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + row[\"email\"] + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "Assignment to row"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 49,
                "snippet": {
                  "text": "                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";"
                }
              },
              "contextRegion": {
                "startLine": 46,
                "endLine": 52,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + row[\"email\"] + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 49,
                "snippet": {
                  "text": "                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";"
                }
              },
              "contextRegion": {
                "startLine": 46,
                "endLine": 52,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + row[\"email\"] + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 49,
                "snippet": {
                  "text": "                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";"
                }
              },
              "contextRegion": {
                "startLine": 46,
                "endLine": 52,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + row[\"email\"] + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 49,
                "snippet": {
                  "text": "                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";"
                }
              },
              "contextRegion": {
                "startLine": 46,
                "endLine": 52,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + row[\"email\"] + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + row[\"comment\"] + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to comments"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 333,
                "snippet": {
                  "text": "                    qAndA[0] = row[0].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 330,
                "endLine": 336,
                "snippet": {
                  "text": "                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 333,
                "snippet": {
                  "text": "                    qAndA[0] = row[0].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 330,
                "endLine": 336,
                "snippet": {
                  "text": "                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 333,
                "snippet": {
                  "text": "                    qAndA[0] = row[0].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 330,
                "endLine": 336,
                "snippet": {
                  "text": "                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to qAndA"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(return[0])"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to result"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 38,
                "snippet": {
                  "text": "            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";"
                }
              },
              "contextRegion": {
                "startLine": 35,
                "endLine": 41,
                "snippet": {
                  "text": "                \n                return;\n            }    \n            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";\n            PanelForgotPasswordStep2.Visible = true;\n            PanelForgotPasswordStep3.Visible = false;\n            \n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 38,
                "snippet": {
                  "text": "            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";"
                }
              },
              "contextRegion": {
                "startLine": 35,
                "endLine": 41,
                "snippet": {
                  "text": "                \n                return;\n            }    \n            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";\n            PanelForgotPasswordStep2.Visible = true;\n            PanelForgotPasswordStep3.Visible = false;\n            \n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 24,
                "snippet": {
                  "text": "            if (Request.Cookies[\"customerNumber\"] == null || !int.TryParse(Request.Cookies[\"customerNumber\"].Value.ToString(), out id))"
                }
              },
              "contextRegion": {
                "startLine": 21,
                "endLine": 27,
                "snippet": {
                  "text": "        {\n            int id;\n            DataSet ds;\n            if (Request.Cookies[\"customerNumber\"] == null || !int.TryParse(Request.Cookies[\"customerNumber\"].Value.ToString(), out id))\n                lblOutput.Text = \"Sorry, an unspecified problem regarding your Customer ID has occurred.  Are your cookies enabled?\";\n            else\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_Cookies(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 24,
                "snippet": {
                  "text": "            if (Request.Cookies[\"customerNumber\"] == null || !int.TryParse(Request.Cookies[\"customerNumber\"].Value.ToString(), out id))"
                }
              },
              "contextRegion": {
                "startLine": 21,
                "endLine": 27,
                "snippet": {
                  "text": "        {\n            int id;\n            DataSet ds;\n            if (Request.Cookies[\"customerNumber\"] == null || !int.TryParse(Request.Cookies[\"customerNumber\"].Value.ToString(), out id))\n                lblOutput.Text = \"Sorry, an unspecified problem regarding your Customer ID has occurred.  Are your cookies enabled?\";\n            else\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['customerNumber'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 24,
                "snippet": {
                  "text": "            if (Request.Cookies[\"customerNumber\"] == null || !int.TryParse(Request.Cookies[\"customerNumber\"].Value.ToString(), out id))"
                }
              },
              "contextRegion": {
                "startLine": 21,
                "endLine": 27,
                "snippet": {
                  "text": "        {\n            int id;\n            DataSet ds;\n            if (Request.Cookies[\"customerNumber\"] == null || !int.TryParse(Request.Cookies[\"customerNumber\"].Value.ToString(), out id))\n                lblOutput.Text = \"Sorry, an unspecified problem regarding your Customer ID has occurred.  Are your cookies enabled?\";\n            else\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_Value(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 24,
                "snippet": {
                  "text": "            if (Request.Cookies[\"customerNumber\"] == null || !int.TryParse(Request.Cookies[\"customerNumber\"].Value.ToString(), out id))"
                }
              },
              "contextRegion": {
                "startLine": 21,
                "endLine": 27,
                "snippet": {
                  "text": "        {\n            int id;\n            DataSet ds;\n            if (Request.Cookies[\"customerNumber\"] == null || !int.TryParse(Request.Cookies[\"customerNumber\"].Value.ToString(), out id))\n                lblOutput.Text = \"Sorry, an unspecified problem regarding your Customer ID has occurred.  Are your cookies enabled?\";\n            else\n            {\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 24,
                "snippet": {
                  "text": "            if (Request.Cookies[\"customerNumber\"] == null || !int.TryParse(Request.Cookies[\"customerNumber\"].Value.ToString(), out id))"
                }
              },
              "contextRegion": {
                "startLine": 21,
                "endLine": 27,
                "snippet": {
                  "text": "        {\n            int id;\n            DataSet ds;\n            if (Request.Cookies[\"customerNumber\"] == null || !int.TryParse(Request.Cookies[\"customerNumber\"].Value.ToString(), out id))\n                lblOutput.Text = \"Sorry, an unspecified problem regarding your Customer ID has occurred.  Are your cookies enabled?\";\n            else\n            {\n"
                }
              }
            },
            "message": {
              "text": "TryParse(0 : 1)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "                ds = du.GetOrders(id);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "                lblOutput.Text = \"Sorry, an unspecified problem regarding your Customer ID has occurred.  Are your cookies enabled?\";\n            else\n            {\n                ds = du.GetOrders(id);\n\n                if (!Page.IsPostBack) //generate the data grid\n                {\n"
                }
              }
            },
            "message": {
              "text": "GetOrders(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 396,
                "snippet": {
                  "text": "                string sql = \"select * from Orders where customerNumber = \" + customerID;"
                }
              },
              "contextRegion": {
                "startLine": 393,
                "endLine": 399,
                "snippet": {
                  "text": "            {\n                connection.Open();\n\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 396,
                "snippet": {
                  "text": "                string sql = \"select * from Orders where customerNumber = \" + customerID;"
                }
              },
              "contextRegion": {
                "startLine": 393,
                "endLine": 399,
                "snippet": {
                  "text": "            {\n                connection.Open();\n\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Text(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n                    lblOutput.Text += \"</div>\\n\";\n                }\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/DbProviderFactory.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "                    return new SqliteDbProvider(configFile);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "                case DbConstants.DB_TYPE_MYSQL:\n                    return new MySqlDbProvider(configFile);\n                case DbConstants.DB_TYPE_SQLITE:\n                    return new SqliteDbProvider(configFile);\n                default:\n                    throw new Exception(string.Format(\"Don't know Data Provider type {0}\", dbType));\n            }\n"
                }
              }
            },
            "message": {
              "text": "SqliteDbProvider(0._settings['?'])"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            _dbFileName = configFile.Get(DbConstants.KEY_FILE_NAME);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "            _connectionString = string.Format(\"Data Source={0};Version=3\", configFile.Get(DbConstants.KEY_FILE_NAME));\n\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n            _dbFileName = configFile.Get(DbConstants.KEY_FILE_NAME);\n\n            if (!File.Exists(_dbFileName))\n                SqliteConnection.CreateFile(_dbFileName);\n"
                }
              }
            },
            "message": {
              "text": "Get(this._settings['?'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            _dbFileName = configFile.Get(DbConstants.KEY_FILE_NAME);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "            _connectionString = string.Format(\"Data Source={0};Version=3\", configFile.Get(DbConstants.KEY_FILE_NAME));\n\n            _clientExec = configFile.Get(DbConstants.KEY_CLIENT_EXEC);\n            _dbFileName = configFile.Get(DbConstants.KEY_FILE_NAME);\n\n            if (!File.Exists(_dbFileName))\n                SqliteConnection.CreateFile(_dbFileName);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to this._dbFileName"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "        {\n            try\n            {\n                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "AddComment(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "        {\n            try\n            {\n                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "Assignment to error_message"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "\t            \tHL.NavigateUrl = Request.FilePath + \"?filename=\"+fi.Name;"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "\t            \tHyperLink HL = new HyperLink();\n\t            \tHL.ID = \"HyperLink\" + i++;\n\t            \tHL.Text = fi.Name;\n\t            \tHL.NavigateUrl = Request.FilePath + \"?filename=\"+fi.Name;\n\t            \tContentPlaceHolder cph = (ContentPlaceHolder)this.Master.FindControl(\"BodyContentPlaceholder\");\n\t            \tcph.Controls.Add(HL);\n\t            \tcph.Controls.Add(new LiteralControl(\"<br/>\"));\n"
                }
              }
            },
            "message": {
              "text": "get_Name(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "\t            \tHL.NavigateUrl = Request.FilePath + \"?filename=\"+fi.Name;"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "\t            \tHyperLink HL = new HyperLink();\n\t            \tHL.ID = \"HyperLink\" + i++;\n\t            \tHL.Text = fi.Name;\n\t            \tHL.NavigateUrl = Request.FilePath + \"?filename=\"+fi.Name;\n\t            \tContentPlaceHolder cph = (ContentPlaceHolder)this.Master.FindControl(\"BodyContentPlaceholder\");\n\t            \tcph.Controls.Add(HL);\n\t            \tcph.Controls.Add(new LiteralControl(\"<br/>\"));\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 71,
                "snippet": {
                  "text": "                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 68,
                "endLine": 74,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 71,
                "snippet": {
                  "text": "                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 68,
                "endLine": 74,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 71,
                "snippet": {
                  "text": "                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 68,
                "endLine": 74,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "        \t\tstring filename = Request.QueryString[\"filename\"];"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "        \t//}\n        \t//else\n        \t//{\n        \t\tstring filename = Request.QueryString[\"filename\"];\n        \t\tif(filename != null)\n        \t\t{\n                    try\n"
                }
              }
            },
            "message": {
              "text": "get_QueryString(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "        \t\tstring filename = Request.QueryString[\"filename\"];"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "        \t//}\n        \t//else\n        \t//{\n        \t\tstring filename = Request.QueryString[\"filename\"];\n        \t\tif(filename != null)\n        \t\t{\n                    try\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['filename'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "        \t\tstring filename = Request.QueryString[\"filename\"];"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "        \t//}\n        \t//else\n        \t//{\n        \t\tstring filename = Request.QueryString[\"filename\"];\n        \t\tif(filename != null)\n        \t\t{\n                    try\n"
                }
              }
            },
            "message": {
              "text": "Assignment to filename"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 38,
                "snippet": {
                  "text": "                        ResponseFile(Request, Response, filename, MapPath(\"~/Downloads/\" + filename), 100);"
                }
              },
              "contextRegion": {
                "startLine": 35,
                "endLine": 41,
                "snippet": {
                  "text": "        \t\t{\n                    try\n                    {\n                        ResponseFile(Request, Response, filename, MapPath(\"~/Downloads/\" + filename), 100);\n                    }\n                    catch (Exception ex)\n                    {\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 36,
                "snippet": {
                  "text": "            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);"
                }
              },
              "contextRegion": {
                "startLine": 33,
                "endLine": 39,
                "snippet": {
                  "text": "            string email = txtUserName.Text;\n            string pwd = txtPassword.Text;\n\n            log.Info(\"User \" + email + \" attempted to log in with password \" + pwd);\n\n            if (!du.IsValidCustomerLogin(email, pwd))\n            {\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 72,
                "snippet": {
                  "text": "                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 69,
                "endLine": 75,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 72,
                "snippet": {
                  "text": "                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 69,
                "endLine": 75,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 72,
                "snippet": {
                  "text": "                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 69,
                "endLine": 75,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                labelMessage.Text = \"An unknown error occurred - Do you have cookies turned on? Further Details: \" + ex.Message;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 332,
                "snippet": {
                  "text": "                da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 329,
                "endLine": 335,
                "snippet": {
                  "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 336,
                "snippet": {
                  "text": "                    DataRow row = ds.Tables[0].Rows[0];"
                }
              },
              "contextRegion": {
                "startLine": 333,
                "endLine": 339,
                "snippet": {
                  "text": "\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 336,
                "snippet": {
                  "text": "                    DataRow row = ds.Tables[0].Rows[0];"
                }
              },
              "contextRegion": {
                "startLine": 333,
                "endLine": 339,
                "snippet": {
                  "text": "\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 336,
                "snippet": {
                  "text": "                    DataRow row = ds.Tables[0].Rows[0];"
                }
              },
              "contextRegion": {
                "startLine": 333,
                "endLine": 339,
                "snippet": {
                  "text": "\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 336,
                "snippet": {
                  "text": "                    DataRow row = ds.Tables[0].Rows[0];"
                }
              },
              "contextRegion": {
                "startLine": 333,
                "endLine": 339,
                "snippet": {
                  "text": "\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to row"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 338,
                "snippet": {
                  "text": "                    qAndA[1] = row[1].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 335,
                "endLine": 341,
                "snippet": {
                  "text": "                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 338,
                "snippet": {
                  "text": "                    qAndA[1] = row[1].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 335,
                "endLine": 341,
                "snippet": {
                  "text": "                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 338,
                "snippet": {
                  "text": "                    qAndA[1] = row[1].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 335,
                "endLine": 341,
                "snippet": {
                  "text": "                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "Assignment to qAndA[1]"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 342,
                "snippet": {
                  "text": "            return qAndA;"
                }
              },
              "contextRegion": {
                "startLine": 339,
                "endLine": 345,
                "snippet": {
                  "text": "                }\n            }\n            \n            return qAndA;\n        }\n\n        public string GetPasswordByEmail(string email)\n"
                }
              }
            },
            "message": {
              "text": "Return qAndA"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(return[1])"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 47,
                "snippet": {
                  "text": "            cookie.Value = Encoder.Encode(Encoder.Encode(result[1]));"
                }
              },
              "contextRegion": {
                "startLine": 44,
                "endLine": 50,
                "snippet": {
                  "text": "\n            //encode twice for more security!\n\n            cookie.Value = Encoder.Encode(Encoder.Encode(result[1]));\n\n            Response.Cookies.Add(cookie);\n        }\n"
                }
              }
            },
            "message": {
              "text": "Encode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 394,
                "snippet": {
                  "text": "                string sql = \"select * from Orders where customerNumber = \" + customerID;"
                }
              },
              "contextRegion": {
                "startLine": 391,
                "endLine": 397,
                "snippet": {
                  "text": "        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 394,
                "snippet": {
                  "text": "                string sql = \"select * from Orders where customerNumber = \" + customerID;"
                }
              },
              "contextRegion": {
                "startLine": 391,
                "endLine": 397,
                "snippet": {
                  "text": "        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                string sql = \"select * from Orders where customerNumber = \" + customerID;\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/verbtamperingattack.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 14,
                "snippet": {
                  "text": "                VerbTampering.tamperedMessage = Request.QueryString[\"message\"];"
                }
              },
              "contextRegion": {
                "startLine": 11,
                "endLine": 17,
                "snippet": {
                  "text": "        {\n            if (Request.QueryString[\"message\"] != null)\n            {\n                VerbTampering.tamperedMessage = Request.QueryString[\"message\"];\n            }\n        } \n    }\n"
                }
              }
            },
            "message": {
              "text": "get_QueryString(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/verbtamperingattack.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 14,
                "snippet": {
                  "text": "                VerbTampering.tamperedMessage = Request.QueryString[\"message\"];"
                }
              },
              "contextRegion": {
                "startLine": 11,
                "endLine": 17,
                "snippet": {
                  "text": "        {\n            if (Request.QueryString[\"message\"] != null)\n            {\n                VerbTampering.tamperedMessage = Request.QueryString[\"message\"];\n            }\n        } \n    }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['message'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/verbtamperingattack.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 14,
                "snippet": {
                  "text": "                VerbTampering.tamperedMessage = Request.QueryString[\"message\"];"
                }
              },
              "contextRegion": {
                "startLine": 11,
                "endLine": 17,
                "snippet": {
                  "text": "        {\n            if (Request.QueryString[\"message\"] != null)\n            {\n                VerbTampering.tamperedMessage = Request.QueryString[\"message\"];\n            }\n        } \n    }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to OWASP.WebGoat.NET.VerbTampering.tamperedMessage"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/verbtampering.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "            lblTampered.Text = tamperedMessage;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "\n        protected void Page_Load(object sender, EventArgs e)\n        {\n            lblTampered.Text = tamperedMessage;\n        } \n    }\n}\n"
                }
              }
            },
            "message": {
              "text": "Read OWASP.WebGoat.NET.VerbTampering.tamperedMessage"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 41,
                "snippet": {
                  "text": "                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);"
                }
              },
              "contextRegion": {
                "startLine": 38,
                "endLine": 44,
                "snippet": {
                  "text": "        {\n            try\n            {\n                string error_message = du.AddComment(hiddenFieldProductID.Value, txtEmail.Text, txtComment.Text);\n                txtComment.Text = error_message;\n                lblMessage.Visible = true;\n                LoadComments();\n"
                }
              }
            },
            "message": {
              "text": "AddComment(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "                    PanelForgotPasswordStep1.Visible = false;\n                    PanelForgotPasswordStep2.Visible = false;\n                    PanelForgotPasswordStep3.Visible = true;\n                    labelPassword.Text = \"Security Question Challenge Successfully Completed! <br/>Your password is: \" + getPassword(txtEmail.Text);\n                }\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "getPassword(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 83,
                "snippet": {
                  "text": "            string password = du.GetPasswordByEmail(email);"
                }
              },
              "contextRegion": {
                "startLine": 80,
                "endLine": 86,
                "snippet": {
                  "text": "\n        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "GetPasswordByEmail(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 74,
                "snippet": {
                  "text": "\t                    _Response.AddHeader(\"Content-Range\", string.Format(\" bytes {0}-{1}/{2}\", startBytes, fileLength - 1, fileLength));"
                }
              },
              "contextRegion": {
                "startLine": 71,
                "endLine": 77,
                "snippet": {
                  "text": "\t        \n\t                if (startBytes != 0)\n\t                {\n\t                    _Response.AddHeader(\"Content-Range\", string.Format(\" bytes {0}-{1}/{2}\", startBytes, fileLength - 1, fileLength));\n\t                }\n\t        \n\t                _Response.AddHeader(\"Connection\", \"Keep-Alive\");\n"
                }
              }
            },
            "message": {
              "text": "Format(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 229,
                "snippet": {
                  "text": "                    da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 226,
                "endLine": 232,
                "snippet": {
                  "text": "                using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                    da.Fill(ds);\n                }\n\n            }\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                DataSet ds = du.GetCustomerDetails(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n\n                Image1.ImageUrl = \"images/logos/\" + row[\"logoFileName\"];\n"
                }
              }
            },
            "message": {
              "text": "GetCustomerDetails(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(0 : return[0])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 321,
                "snippet": {
                  "text": "            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + "
                }
              },
              "contextRegion": {
                "startLine": 318,
                "endLine": 324,
                "snippet": {
                  "text": "\n        public string[] GetSecurityQuestionAndAnswer(string email)\n        {\n            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + \n                \"SecurityQuestions where CustomerLogin.email = '\" + email + \"' and CustomerLogin.question_id = \" +\n                \"SecurityQuestions.question_id;\";\n                \n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 321,
                "snippet": {
                  "text": "            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + "
                }
              },
              "contextRegion": {
                "startLine": 318,
                "endLine": 324,
                "snippet": {
                  "text": "\n        public string[] GetSecurityQuestionAndAnswer(string email)\n        {\n            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + \n                \"SecurityQuestions where CustomerLogin.email = '\" + email + \"' and CustomerLogin.question_id = \" +\n                \"SecurityQuestions.question_id;\";\n                \n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 321,
                "snippet": {
                  "text": "            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + "
                }
              },
              "contextRegion": {
                "startLine": 318,
                "endLine": 324,
                "snippet": {
                  "text": "\n        public string[] GetSecurityQuestionAndAnswer(string email)\n        {\n            string sql = \"select SecurityQuestions.question_text, CustomerLogin.answer from CustomerLogin, \" + \n                \"SecurityQuestions where CustomerLogin.email = '\" + email + \"' and CustomerLogin.question_id = \" +\n                \"SecurityQuestions.question_id;\";\n                \n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 329,
                "snippet": {
                  "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                }
              },
              "contextRegion": {
                "startLine": 326,
                "endLine": 332,
                "snippet": {
                  "text": "            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "MySqlDataAdapter(0 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 329,
                "snippet": {
                  "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);"
                }
              },
              "contextRegion": {
                "startLine": 326,
                "endLine": 332,
                "snippet": {
                  "text": "            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to da"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 332,
                "snippet": {
                  "text": "                da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 329,
                "endLine": 335,
                "snippet": {
                  "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n                if (ds.Tables[0].Rows.Count > 0)\n                {\n"
                }
              }
            },
            "message": {
              "text": "Fill(this : 0)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 337,
                "snippet": {
                  "text": "                    qAndA[0] = row[0].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 334,
                "endLine": 340,
                "snippet": {
                  "text": "                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 337,
                "snippet": {
                  "text": "                    qAndA[0] = row[0].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 334,
                "endLine": 340,
                "snippet": {
                  "text": "                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 337,
                "snippet": {
                  "text": "                    qAndA[0] = row[0].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 334,
                "endLine": 340,
                "snippet": {
                  "text": "                if (ds.Tables[0].Rows.Count > 0)\n                {\n                    DataRow row = ds.Tables[0].Rows[0];\n                    qAndA[0] = row[0].ToString();\n                    qAndA[1] = row[1].ToString();\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to qAndA"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(return[0])"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 37,
                "snippet": {
                  "text": "            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";"
                }
              },
              "contextRegion": {
                "startLine": 34,
                "endLine": 40,
                "snippet": {
                  "text": "                \n                return;\n            }    \n            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";\n            PanelForgotPasswordStep2.Visible = true;\n            PanelForgotPasswordStep3.Visible = false;\n            \n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 37,
                "snippet": {
                  "text": "            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";"
                }
              },
              "contextRegion": {
                "startLine": 34,
                "endLine": 40,
                "snippet": {
                  "text": "                \n                return;\n            }    \n            labelQuestion.Text = \"Here is the question we have on file for you: <strong>\" + result[0] + \"</strong>\";\n            PanelForgotPasswordStep2.Visible = true;\n            PanelForgotPasswordStep3.Visible = false;\n            \n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "            string query = context.Request[\"query\"];"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "            //context.Response.ContentType = \"text/plain\";\n            //context.Response.Write(\"Hello World\");\n\n            string query = context.Request[\"query\"];\n            \n            DataSet ds = du.GetCustomerEmails(query);\n            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);\n"
                }
              }
            },
            "message": {
              "text": "get_Item(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "            string query = context.Request[\"query\"];"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "            //context.Response.ContentType = \"text/plain\";\n            //context.Response.Write(\"Hello World\");\n\n            string query = context.Request[\"query\"];\n            \n            DataSet ds = du.GetCustomerEmails(query);\n            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to query"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            DataSet ds = du.GetCustomerEmails(query);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n            string query = context.Request[\"query\"];\n            \n            DataSet ds = du.GetCustomerEmails(query);\n            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);\n\n            if (json != null && json.Length > 0)\n"
                }
              }
            },
            "message": {
              "text": "GetCustomerEmails(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 571,
                "snippet": {
                  "text": "            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 568,
                "endLine": 574,
                "snippet": {
                  "text": "\n        public DataSet GetCustomerEmails(string email)\n        {\n            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 571,
                "snippet": {
                  "text": "            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 568,
                "endLine": 574,
                "snippet": {
                  "text": "\n        public DataSet GetCustomerEmails(string email)\n        {\n            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 571,
                "snippet": {
                  "text": "            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 568,
                "endLine": 574,
                "snippet": {
                  "text": "\n        public DataSet GetCustomerEmails(string email)\n        {\n            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 118,
                "snippet": {
                  "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + "
                }
              },
              "contextRegion": {
                "startLine": 115,
                "endLine": 121,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \n                \"' and password = '\" + encoded_password + \"';\";\n                        \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Read encoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 153,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 150,
                "endLine": 156,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n\n                    if (password.Trim().ToLower() != decoded_password.Trim().ToLower())\n                    {\n"
                }
              }
            },
            "message": {
              "text": "Decode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "                string name = txtID.Text.Substring(0, 3);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\t\t{\n            try\n            {\n                string name = txtID.Text.Substring(0, 3);\n                string output = du.GetEmailByCustomerNumber(name);\n\n                lblOutput.Text = String.IsNullOrEmpty(output) ? \"Customer Number does not exist\" : output;\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "                string name = txtID.Text.Substring(0, 3);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\t\t{\n            try\n            {\n                string name = txtID.Text.Substring(0, 3);\n                string output = du.GetEmailByCustomerNumber(name);\n\n                lblOutput.Text = String.IsNullOrEmpty(output) ? \"Customer Number does not exist\" : output;\n"
                }
              }
            },
            "message": {
              "text": "Substring(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "                string name = txtID.Text.Substring(0, 3);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\t\t{\n            try\n            {\n                string name = txtID.Text.Substring(0, 3);\n                string output = du.GetEmailByCustomerNumber(name);\n\n                lblOutput.Text = String.IsNullOrEmpty(output) ? \"Customer Number does not exist\" : output;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to name"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "                string output = du.GetEmailByCustomerNumber(name);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "            try\n            {\n                string name = txtID.Text.Substring(0, 3);\n                string output = du.GetEmailByCustomerNumber(name);\n\n                lblOutput.Text = String.IsNullOrEmpty(output) ? \"Customer Number does not exist\" : output;\n            }\n"
                }
              }
            },
            "message": {
              "text": "GetEmailByCustomerNumber(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 539,
                "snippet": {
                  "text": "                output = (String)MySqlHelper.ExecuteScalar(_connectionString, \"select email from CustomerLogin where customerNumber = \" + num);"
                }
              },
              "contextRegion": {
                "startLine": 536,
                "endLine": 542,
                "snippet": {
                  "text": "            try\n            {\n            \n                output = (String)MySqlHelper.ExecuteScalar(_connectionString, \"select email from CustomerLogin where customerNumber = \" + num);\n                /*using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + num;\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 366,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 363,
                "endLine": 369,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Decode(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 168,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 165,
                "endLine": 171,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n\n                    if (password.Trim().ToLower() != decoded_password.Trim().ToLower())\n                    {\n"
                }
              }
            },
            "message": {
              "text": "Read encoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 168,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 165,
                "endLine": 171,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n\n                    if (password.Trim().ToLower() != decoded_password.Trim().ToLower())\n                    {\n"
                }
              }
            },
            "message": {
              "text": "Decode(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Settings.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 40,
                "snippet": {
                  "text": "                log.Debug(\"DYLD_FALLBACK_LIBRARY_PATH: \" + Environment.GetEnvironmentVariable(\"DYLD_FALLBACK_LIBRARY_PATH\"));"
                }
              },
              "contextRegion": {
                "startLine": 37,
                "endLine": 43,
                "snippet": {
                  "text": "\n                RootDir = server.MapPath(\".\");\n\n                log.Debug(\"DYLD_FALLBACK_LIBRARY_PATH: \" + Environment.GetEnvironmentVariable(\"DYLD_FALLBACK_LIBRARY_PATH\"));\n                log.Debug(\"PWD: \" + Environment.CurrentDirectory);\n\n                //By default if there's no config let's create a sqlite db.\n"
                }
              }
            },
            "message": {
              "text": "GetEnvironmentVariable(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Settings.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 40,
                "snippet": {
                  "text": "                log.Debug(\"DYLD_FALLBACK_LIBRARY_PATH: \" + Environment.GetEnvironmentVariable(\"DYLD_FALLBACK_LIBRARY_PATH\"));"
                }
              },
              "contextRegion": {
                "startLine": 37,
                "endLine": 43,
                "snippet": {
                  "text": "\n                RootDir = server.MapPath(\".\");\n\n                log.Debug(\"DYLD_FALLBACK_LIBRARY_PATH: \" + Environment.GetEnvironmentVariable(\"DYLD_FALLBACK_LIBRARY_PATH\"));\n                log.Debug(\"PWD: \" + Environment.CurrentDirectory);\n\n                //By default if there's no config let's create a sqlite db.\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 184,
                "snippet": {
                  "text": "                log.Error(\"Error with custom customer login\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 181,
                "endLine": 187,
                "snippet": {
                  "text": "            }\n            catch (MySqlException ex)\n            {\n                log.Error(\"Error with custom customer login\", ex);\n                error_message = ex.Message;\n            }\n            catch (Exception ex)\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 189,
                "snippet": {
                  "text": "                log.Error(\"Error with custom customer login\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 186,
                "endLine": 192,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                log.Error(\"Error with custom customer login\", ex);\n            }\n\n            return error_message;    \n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "get_Text(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/catalog.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "                {\n                    lblOutput.Text += \"<div class='product' align='center'>\\n\";\n                    lblOutput.Text += \"<img src='./images/products/\" + prodRow[3] + \"'/><br/>\\n\";\n                    lblOutput.Text += \"\" + prodRow[1] + \"<br/>\\n\";\n                    lblOutput.Text += \"<a href=\\\"ProductDetails.aspx?productNumber=\" + prodRow[0].ToString() + \"\\\"><br/>\\n\";\n                    lblOutput.Text += \"<img src=\\\"../resources/images/moreinfo1.png\\\" onmouseover=\\\"this.src='../resources/images/moreinfo2.png';\\\" onmouseout=\\\"this.src='../resources/images/moreinfo1.png';\\\" />\\n\";\n                    lblOutput.Text += \"</a>\\n\";\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 64,
                "snippet": {
                  "text": "                    labelUpload.Text = \"Upload Failed: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 61,
                "endLine": 67,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    labelUpload.Text = \"Upload Failed: \" + ex.Message;\n                }\n                finally\n                {\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 64,
                "snippet": {
                  "text": "                    labelUpload.Text = \"Upload Failed: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 61,
                "endLine": 67,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    labelUpload.Text = \"Upload Failed: \" + ex.Message;\n                }\n                finally\n                {\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 64,
                "snippet": {
                  "text": "                    labelUpload.Text = \"Upload Failed: \" + ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 61,
                "endLine": 67,
                "snippet": {
                  "text": "                }\n                catch (Exception ex)\n                {\n                    labelUpload.Text = \"Upload Failed: \" + ex.Message;\n                }\n                finally\n                {\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/mainpage.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                DataSet ds = du.GetCustomerDetails(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                DataSet ds = du.GetCustomerDetails(customerNumber);\n                DataRow row = ds.Tables[0].Rows[0]; //customer row\n\n                Image1.ImageUrl = \"images/logos/\" + row[\"logoFileName\"];\n"
                }
              }
            },
            "message": {
              "text": "GetCustomerDetails(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 204,
                "snippet": {
                  "text": "            string sql = \"select Customers.customerNumber, Customers.customerName, Customers.logoFileName, Customers.contactLastName, Customers.contactFirstName, \" +"
                }
              },
              "contextRegion": {
                "startLine": 201,
                "endLine": 207,
                "snippet": {
                  "text": "\n        public DataSet GetCustomerDetails(string customerNumber)\n        {\n            string sql = \"select Customers.customerNumber, Customers.customerName, Customers.logoFileName, Customers.contactLastName, Customers.contactFirstName, \" +\n                \"Customers.phone, Customers.addressLine1, Customers.addressLine2, Customers.city, Customers.state, Customers.postalCode, Customers.country, \" +\n                \"Customers.salesRepEmployeeNumber, Customers.creditLimit, CustomerLogin.email, CustomerLogin.password, CustomerLogin.question_id, CustomerLogin.answer \" +\n                \"From Customers, CustomerLogin where Customers.customerNumber = CustomerLogin.customerNumber and Customers.customerNumber = \" + customerNumber;\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 204,
                "snippet": {
                  "text": "            string sql = \"select Customers.customerNumber, Customers.customerName, Customers.logoFileName, Customers.contactLastName, Customers.contactFirstName, \" +"
                }
              },
              "contextRegion": {
                "startLine": 201,
                "endLine": 207,
                "snippet": {
                  "text": "\n        public DataSet GetCustomerDetails(string customerNumber)\n        {\n            string sql = \"select Customers.customerNumber, Customers.customerName, Customers.logoFileName, Customers.contactLastName, Customers.contactFirstName, \" +\n                \"Customers.phone, Customers.addressLine1, Customers.addressLine2, Customers.city, Customers.state, Customers.postalCode, Customers.country, \" +\n                \"Customers.salesRepEmployeeNumber, Customers.creditLimit, CustomerLogin.email, CustomerLogin.password, CustomerLogin.question_id, CustomerLogin.answer \" +\n                \"From Customers, CustomerLogin where Customers.customerNumber = CustomerLogin.customerNumber and Customers.customerNumber = \" + customerNumber;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 307,
                "snippet": {
                  "text": "                log.Error(\"Error updating customer password\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 304,
                "endLine": 310,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                log.Error(\"Error updating customer password\", ex);\n                output = ex.Message;\n            }\n            return output;\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 419,
                "snippet": {
                  "text": "                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 416,
                "endLine": 422,
                "snippet": {
                  "text": "                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"comments\");\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 419,
                "snippet": {
                  "text": "                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 416,
                "endLine": 422,
                "snippet": {
                  "text": "                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"comments\");\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 419,
                "snippet": {
                  "text": "                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";"
                }
              },
              "contextRegion": {
                "startLine": 416,
                "endLine": 422,
                "snippet": {
                  "text": "                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"products\");\n\n                sql = \"select * from Comments where productCode = '\" + productCode + \"'\";\n                da = new MySqlDataAdapter(sql, connection);\n                da.Fill(ds, \"comments\");\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 115,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);"
                }
              },
              "contextRegion": {
                "startLine": 112,
                "endLine": 118,
                "snippet": {
                  "text": "        public bool IsValidCustomerLogin(string email, string password)\n        {\n            //encode password\n            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \n"
                }
              }
            },
            "message": {
              "text": "Read password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 42,
                "snippet": {
                  "text": "                        Console.WriteLine(ex.Message);"
                }
              },
              "contextRegion": {
                "startLine": 39,
                "endLine": 45,
                "snippet": {
                  "text": "                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                        lblStatus.Text = \"File not found: \" + filename;   \n                    }\n                }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 42,
                "snippet": {
                  "text": "                        Console.WriteLine(ex.Message);"
                }
              },
              "contextRegion": {
                "startLine": 39,
                "endLine": 45,
                "snippet": {
                  "text": "                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                        lblStatus.Text = \"File not found: \" + filename;   \n                    }\n                }\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "                string encrypted_password = Request.Cookies[\"encr_sec_qu_ans\"].Value.ToString();\n                \n                //decode it (twice for extra security!)\n                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));\n                \n                if (security_answer.Trim().ToLower().Equals(txtAnswer.Text.Trim().ToLower()))\n                {\n"
                }
              }
            },
            "message": {
              "text": "Read encrypted_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "                string encrypted_password = Request.Cookies[\"encr_sec_qu_ans\"].Value.ToString();\n                \n                //decode it (twice for extra security!)\n                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));\n                \n                if (security_answer.Trim().ToLower().Equals(txtAnswer.Text.Trim().ToLower()))\n                {\n"
                }
              }
            },
            "message": {
              "text": "Decode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 539,
                "snippet": {
                  "text": "                output = (String)MySqlHelper.ExecuteScalar(_connectionString, \"select email from CustomerLogin where customerNumber = \" + num);"
                }
              },
              "contextRegion": {
                "startLine": 536,
                "endLine": 542,
                "snippet": {
                  "text": "            try\n            {\n            \n                output = (String)MySqlHelper.ExecuteScalar(_connectionString, \"select email from CustomerLogin where customerNumber = \" + num);\n                /*using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + num;\n"
                }
              }
            },
            "message": {
              "text": "ExecuteScalar(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 539,
                "snippet": {
                  "text": "                output = (String)MySqlHelper.ExecuteScalar(_connectionString, \"select email from CustomerLogin where customerNumber = \" + num);"
                }
              },
              "contextRegion": {
                "startLine": 536,
                "endLine": 542,
                "snippet": {
                  "text": "            try\n            {\n            \n                output = (String)MySqlHelper.ExecuteScalar(_connectionString, \"select email from CustomerLogin where customerNumber = \" + num);\n                /*using (MySqlConnection connection = new MySqlConnection(_connectionString))\n                {\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + num;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 554,
                "snippet": {
                  "text": "            return output;"
                }
              },
              "contextRegion": {
                "startLine": 551,
                "endLine": 557,
                "snippet": {
                  "text": "                output = ex.Message;\n            }\n            \n            return output;\n        }\n\n        public DataSet GetCustomerEmails(string email)\n"
                }
              }
            },
            "message": {
              "text": "Return output"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "                string output = du.GetEmailByCustomerNumber(name);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "            try\n            {\n                string name = txtID.Text.Substring(0, 3);\n                string output = du.GetEmailByCustomerNumber(name);\n\n                lblOutput.Text = String.IsNullOrEmpty(output) ? \"Customer Number does not exist\" : output;\n            }\n"
                }
              }
            },
            "message": {
              "text": "GetEmailByCustomerNumber(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "                string output = du.GetEmailByCustomerNumber(name);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "            try\n            {\n                string name = txtID.Text.Substring(0, 3);\n                string output = du.GetEmailByCustomerNumber(name);\n\n                lblOutput.Text = String.IsNullOrEmpty(output) ? \"Customer Number does not exist\" : output;\n            }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "                string encrypted_password = Request.Cookies[\"encr_sec_qu_ans\"].Value.ToString();\n                \n                //decode it (twice for extra security!)\n                string security_answer = Encoder.Decode(Encoder.Decode(encrypted_password));\n                \n                if (security_answer.Trim().ToLower().Equals(txtAnswer.Text.Trim().ToLower()))\n                {\n"
                }
              }
            },
            "message": {
              "text": "Decode(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Util.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "                    while ((line = reader.ReadLine()) != null)"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "                {\n                    string line;\n                    string replaced;\n                    while ((line = reader.ReadLine()) != null)\n                    {\n                        if (Environment.OSVersion.Platform == PlatformID.Win32NT)\n                            replaced = line.Replace(\"DB_Scripts/datafiles/\", \"DB_Scripts\\\\\\\\datafiles\\\\\\\\\");\n"
                }
              }
            },
            "message": {
              "text": "ReadLine(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Util.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "                    while ((line = reader.ReadLine()) != null)"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "                {\n                    string line;\n                    string replaced;\n                    while ((line = reader.ReadLine()) != null)\n                    {\n                        if (Environment.OSVersion.Platform == PlatformID.Win32NT)\n                            replaced = line.Replace(\"DB_Scripts/datafiles/\", \"DB_Scripts\\\\\\\\datafiles\\\\\\\\\");\n"
                }
              }
            },
            "message": {
              "text": "Assignment to line"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Util.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 64,
                "snippet": {
                  "text": "                            replaced = line;"
                }
              },
              "contextRegion": {
                "startLine": 61,
                "endLine": 67,
                "snippet": {
                  "text": "                        if (Environment.OSVersion.Platform == PlatformID.Win32NT)\n                            replaced = line.Replace(\"DB_Scripts/datafiles/\", \"DB_Scripts\\\\\\\\datafiles\\\\\\\\\");\n                        else\n                            replaced = line;\n\n                        log.Debug(\"Line: \" + replaced);\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to replaced"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Util.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 66,
                "snippet": {
                  "text": "                        log.Debug(\"Line: \" + replaced);"
                }
              },
              "contextRegion": {
                "startLine": 63,
                "endLine": 69,
                "snippet": {
                  "text": "                        else\n                            replaced = line;\n\n                        log.Debug(\"Line: \" + replaced);\n\n                        process.StandardInput.WriteLine(replaced);\n                    }\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 43,
                "snippet": {
                  "text": "                        lblStatus.Text = \"File not found: \" + filename;   "
                }
              },
              "contextRegion": {
                "startLine": 40,
                "endLine": 46,
                "snippet": {
                  "text": "                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                        lblStatus.Text = \"File not found: \" + filename;   \n                    }\n                }\n        \t//}\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 76,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);"
                }
              },
              "contextRegion": {
                "startLine": 73,
                "endLine": 79,
                "snippet": {
                  "text": "        public bool IsValidCustomerLogin(string email, string password)\n        {\n            //encode password\n            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n"
                }
              }
            },
            "message": {
              "text": "Assignment to encoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 79,
                "snippet": {
                  "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + "
                }
              },
              "contextRegion": {
                "startLine": 76,
                "endLine": 82,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 79,
                "snippet": {
                  "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + "
                }
              },
              "contextRegion": {
                "startLine": 76,
                "endLine": 82,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 218,
                "snippet": {
                  "text": "                    da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 215,
                "endLine": 221,
                "snippet": {
                  "text": "                    connection.Open();\n\n                    SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                    da.Fill(ds);\n                }\n\n            }\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 228,
                "snippet": {
                  "text": "            return ds;"
                }
              },
              "contextRegion": {
                "startLine": 225,
                "endLine": 231,
                "snippet": {
                  "text": "                \n                throw new ApplicationException(\"Error getting customer details\", ex);\n            }\n            return ds;\n\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 168,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 165,
                "endLine": 171,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n\n                    if (password.Trim().ToLower() != decoded_password.Trim().ToLower())\n                    {\n"
                }
              }
            },
            "message": {
              "text": "Decode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "            string name = txtName.Text;"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "\n\t\tprotected void btnFind_Click(object sender, EventArgs e)\n        {\n            string name = txtName.Text;\n            DataSet ds = du.GetEmailByName(name);\n\n            if (ds != null)\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 25,
                "snippet": {
                  "text": "            string name = txtName.Text;"
                }
              },
              "contextRegion": {
                "startLine": 22,
                "endLine": 28,
                "snippet": {
                  "text": "\n\t\tprotected void btnFind_Click(object sender, EventArgs e)\n        {\n            string name = txtName.Text;\n            DataSet ds = du.GetEmailByName(name);\n\n            if (ds != null)\n"
                }
              }
            },
            "message": {
              "text": "Assignment to name"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 26,
                "snippet": {
                  "text": "            DataSet ds = du.GetEmailByName(name);"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 29,
                "snippet": {
                  "text": "\t\tprotected void btnFind_Click(object sender, EventArgs e)\n        {\n            string name = txtName.Text;\n            DataSet ds = du.GetEmailByName(name);\n\n            if (ds != null)\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetEmailByName(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 526,
                "snippet": {
                  "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 523,
                "endLine": 529,
                "snippet": {
                  "text": "\n        public DataSet GetEmailByName(string name)\n        {\n            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 526,
                "snippet": {
                  "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 523,
                "endLine": 529,
                "snippet": {
                  "text": "\n        public DataSet GetEmailByName(string name)\n        {\n            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 526,
                "snippet": {
                  "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 523,
                "endLine": 529,
                "snippet": {
                  "text": "\n        public DataSet GetEmailByName(string name)\n        {\n            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 197,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 194,
                "endLine": 200,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 197,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 194,
                "endLine": 200,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 197,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 194,
                "endLine": 200,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 199,
                "snippet": {
                  "text": "            return output;"
                }
              },
              "contextRegion": {
                "startLine": 196,
                "endLine": 202,
                "snippet": {
                  "text": "            {\n                output = ex.Message;\n            }\n            return output;\n        }\n\n        public DataSet GetCustomerDetails(string customerNumber)\n"
                }
              }
            },
            "message": {
              "text": "Return output"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 91,
                "snippet": {
                  "text": "                string email = du.GetCustomerEmail(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 88,
                "endLine": 94,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                string email = du.GetCustomerEmail(customerNumber);\n                txtEmail.Text = email;\n                txtEmail.ReadOnly = true;\n            }\n"
                }
              }
            },
            "message": {
              "text": "GetCustomerEmail(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/productdetails.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 91,
                "snippet": {
                  "text": "                string email = du.GetCustomerEmail(customerNumber);"
                }
              },
              "contextRegion": {
                "startLine": 88,
                "endLine": 94,
                "snippet": {
                  "text": "            {\n                string customerNumber = Request.Cookies[\"customerNumber\"].Value;\n\n                string email = du.GetCustomerEmail(customerNumber);\n                txtEmail.Text = email;\n                txtEmail.ReadOnly = true;\n            }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to email"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 563,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 560,
                "endLine": 566,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error getting email by customer number\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 563,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 560,
                "endLine": 566,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error getting email by customer number\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 563,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 560,
                "endLine": 566,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error getting email by customer number\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 566,
                "snippet": {
                  "text": "            return output;"
                }
              },
              "contextRegion": {
                "startLine": 563,
                "endLine": 569,
                "snippet": {
                  "text": "                output = ex.Message;\n            }\n            \n            return output;\n        }\n\n        public DataSet GetCustomerEmails(string email)\n"
                }
              }
            },
            "message": {
              "text": "Return output"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 24,
                "snippet": {
                  "text": "\t            \tHL.Text = fi.Name;"
                }
              },
              "contextRegion": {
                "startLine": 21,
                "endLine": 27,
                "snippet": {
                  "text": "\t        \t{\n\t            \tHyperLink HL = new HyperLink();\n\t            \tHL.ID = \"HyperLink\" + i++;\n\t            \tHL.Text = fi.Name;\n\t            \tHL.NavigateUrl = Request.FilePath + \"?filename=\"+fi.Name;\n\t            \tContentPlaceHolder cph = (ContentPlaceHolder)this.Master.FindControl(\"BodyContentPlaceholder\");\n\t            \tcph.Controls.Add(HL);\n"
                }
              }
            },
            "message": {
              "text": "get_Name(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 364,
                "snippet": {
                  "text": "                    string decoded_password = Encoder.Decode(encoded_password);"
                }
              },
              "contextRegion": {
                "startLine": 361,
                "endLine": 367,
                "snippet": {
                  "text": "                    }\n\n                    string encoded_password = ds.Tables[0].Rows[0][\"Password\"].ToString();\n                    string decoded_password = Encoder.Decode(encoded_password);\n                    result = decoded_password;\n                }\n            }\n"
                }
              }
            },
            "message": {
              "text": "Decode(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 266,
                "snippet": {
                  "text": "                da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 263,
                "endLine": 269,
                "snippet": {
                  "text": "                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                da.SelectCommand.Parameters.AddWithValue(\"@productCode\", productCode); \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n                return ds;\n            }\n        }\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 267,
                "snippet": {
                  "text": "                return ds;"
                }
              },
              "contextRegion": {
                "startLine": 264,
                "endLine": 270,
                "snippet": {
                  "text": "                da.SelectCommand.Parameters.AddWithValue(\"@productCode\", productCode); \n                DataSet ds = new DataSet();\n                da.Fill(ds);\n                return ds;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "            DataSet ds = du.GetComments(\"user_cmt\");"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "\n        void FixedLoadComments()\n        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetComments(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 57,
                "snippet": {
                  "text": "            DataSet ds = du.GetComments(\"user_cmt\");"
                }
              },
              "contextRegion": {
                "startLine": 54,
                "endLine": 60,
                "snippet": {
                  "text": "\n        void FixedLoadComments()\n        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to ds"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "GetEnumerator(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "get_Current(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 59,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)"
                }
              },
              "contextRegion": {
                "startLine": 56,
                "endLine": 62,
                "snippet": {
                  "text": "        {\n            DataSet ds = du.GetComments(\"user_cmt\");\n            string comments = string.Empty;\n            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n"
                }
              }
            },
            "message": {
              "text": "Assignment to row"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 62,
                "snippet": {
                  "text": "                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";"
                }
              },
              "contextRegion": {
                "startLine": 59,
                "endLine": 65,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 62,
                "snippet": {
                  "text": "                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";"
                }
              },
              "contextRegion": {
                "startLine": 59,
                "endLine": 65,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 62,
                "snippet": {
                  "text": "                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";"
                }
              },
              "contextRegion": {
                "startLine": 59,
                "endLine": 65,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n"
                }
              }
            },
            "message": {
              "text": "HtmlEncode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 62,
                "snippet": {
                  "text": "                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";"
                }
              },
              "contextRegion": {
                "startLine": 59,
                "endLine": 65,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 62,
                "snippet": {
                  "text": "                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";"
                }
              },
              "contextRegion": {
                "startLine": 59,
                "endLine": 65,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/storedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 62,
                "snippet": {
                  "text": "                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";"
                }
              },
              "contextRegion": {
                "startLine": 59,
                "endLine": 65,
                "snippet": {
                  "text": "            foreach (DataRow row in ds.Tables[0].Rows)\n            {\n                comments += \"<strong>Email:</strong>\" + Server.HtmlEncode(row[\"email\"].ToString()) + \"<span style='font-size: x-small;color: #E47911;'> (Email Address Verified!) </span><br/>\";\n                comments += \"<strong>Comment:</strong><br/>\" + Server.HtmlEncode(row[\"comment\"].ToString()) + \"<br/><hr/>\";\n\n            }\n            lblComments.Text = comments;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to comments"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "                string customerNumber = \"\";\n                if (Request.Cookies[\"customerNumber\"] != null)\n                {\n                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n"
                }
              }
            },
            "message": {
              "text": "get_Cookies(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "                string customerNumber = \"\";\n                if (Request.Cookies[\"customerNumber\"] != null)\n                {\n                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['customerNumber'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "                string customerNumber = \"\";\n                if (Request.Cookies[\"customerNumber\"] != null)\n                {\n                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n"
                }
              }
            },
            "message": {
              "text": "get_Value(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 29,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;"
                }
              },
              "contextRegion": {
                "startLine": 26,
                "endLine": 32,
                "snippet": {
                  "text": "                string customerNumber = \"\";\n                if (Request.Cookies[\"customerNumber\"] != null)\n                {\n                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to customerNumber"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 32,
                "snippet": {
                  "text": "                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);"
                }
              },
              "contextRegion": {
                "startLine": 29,
                "endLine": 35,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n                labelMessage.Text = output;\n            }\n            else\n"
                }
              }
            },
            "message": {
              "text": "Parse(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 32,
                "snippet": {
                  "text": "                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);"
                }
              },
              "contextRegion": {
                "startLine": 29,
                "endLine": 35,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n                labelMessage.Text = output;\n            }\n            else\n"
                }
              }
            },
            "message": {
              "text": "UpdateCustomerPassword(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 289,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 286,
                "endLine": 292,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 289,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 286,
                "endLine": 292,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/exploitdebug.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 21,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"Current Dir: {0}\", Environment.CurrentDirectory);"
                }
              },
              "contextRegion": {
                "startLine": 18,
                "endLine": 24,
                "snippet": {
                  "text": "        {\n            StringBuilder strBuilder = new StringBuilder();\n            \n            strBuilder.AppendFormat(\"Current Dir: {0}\", Environment.CurrentDirectory);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"UserName: {0}\", Environment.UserName);\n"
                }
              }
            },
            "message": {
              "text": "get_CurrentDirectory(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/exploitdebug.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 21,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"Current Dir: {0}\", Environment.CurrentDirectory);"
                }
              },
              "contextRegion": {
                "startLine": 18,
                "endLine": 24,
                "snippet": {
                  "text": "        {\n            StringBuilder strBuilder = new StringBuilder();\n            \n            strBuilder.AppendFormat(\"Current Dir: {0}\", Environment.CurrentDirectory);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"UserName: {0}\", Environment.UserName);\n"
                }
              }
            },
            "message": {
              "text": "AppendFormat(1 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/exploitdebug.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "            throw new Exception(strBuilder.ToString());"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"OS Version: {0}\", Environment.OSVersion);\n            strBuilder.AppendLine();\n            \n            throw new Exception(strBuilder.ToString());\n        }\n    }\n}\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 517,
                "snippet": {
                  "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 514,
                "endLine": 520,
                "snippet": {
                  "text": "\n        public DataSet GetEmailByName(string name)\n        {\n            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 517,
                "snippet": {
                  "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 514,
                "endLine": 520,
                "snippet": {
                  "text": "\n        public DataSet GetEmailByName(string name)\n        {\n            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 517,
                "snippet": {
                  "text": "            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 514,
                "endLine": 520,
                "snippet": {
                  "text": "\n        public DataSet GetEmailByName(string name)\n        {\n            string sql = \"select firstName, lastName, email from Employees where firstName like '\" + name + \"%' or lastName like '\" + name + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 77,
                "snippet": {
                  "text": "                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;"
                }
              },
              "contextRegion": {
                "startLine": 74,
                "endLine": 80,
                "snippet": {
                  "text": "                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n                    catch (Exception ex)\n                    {\n"
                }
              }
            },
            "message": {
              "text": "get_RawUrl(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 77,
                "snippet": {
                  "text": "                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;"
                }
              },
              "contextRegion": {
                "startLine": 74,
                "endLine": 80,
                "snippet": {
                  "text": "                        //allow customer to download image of their product\n                        string image = dsOrderDetails.Tables[0].Rows[0][\"productImage\"].ToString();\n                        HyperLink1.Text = \"Download Product Image\";\n                        HyperLink1.NavigateUrl = Request.RawUrl + \"&image=images/products/\" + image;\n                    }\n                    catch (Exception ex)\n                    {\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 32,
                "snippet": {
                  "text": "                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);"
                }
              },
              "contextRegion": {
                "startLine": 29,
                "endLine": 35,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n                labelMessage.Text = output;\n            }\n            else\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/changepassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 32,
                "snippet": {
                  "text": "                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);"
                }
              },
              "contextRegion": {
                "startLine": 29,
                "endLine": 35,
                "snippet": {
                  "text": "                    customerNumber = Request.Cookies[\"customerNumber\"].Value;\n                }\n\n                string output = du.UpdateCustomerPassword(int.Parse(customerNumber), txtPassword1.Text);\n                labelMessage.Text = output;\n            }\n            else\n"
                }
              }
            },
            "message": {
              "text": "UpdateCustomerPassword(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 289,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 286,
                "endLine": 292,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Encode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 289,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 286,
                "endLine": 292,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 92,
                "snippet": {
                  "text": "                    lblOutput.Text = fi.FullName;"
                }
              },
              "contextRegion": {
                "startLine": 89,
                "endLine": 95,
                "snippet": {
                  "text": "                if (target_image != null)\n                {\n                    FileInfo fi = new FileInfo(Server.MapPath(target_image));\n                    lblOutput.Text = fi.FullName;\n\n                    NameValueCollection imageExtensions = new NameValueCollection();\n                    imageExtensions.Add(\".jpg\", \"image/jpeg\");\n"
                }
              }
            },
            "message": {
              "text": "get_FullName(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 580,
                "snippet": {
                  "text": "                da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 577,
                "endLine": 583,
                "snippet": {
                  "text": "\n                SqliteDataAdapter da = new SqliteDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n                if (ds.Tables[0].Rows.Count == 0)\n                    return null;\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 585,
                "snippet": {
                  "text": "                    return ds;"
                }
              },
              "contextRegion": {
                "startLine": 582,
                "endLine": 588,
                "snippet": {
                  "text": "                if (ds.Tables[0].Rows.Count == 0)\n                    return null;\n                else\n                    return ds;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            DataSet ds = du.GetCustomerEmails(query);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n            string query = context.Request[\"query\"];\n            \n            DataSet ds = du.GetCustomerEmails(query);\n            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);\n\n            if (json != null && json.Length > 0)\n"
                }
              }
            },
            "message": {
              "text": "GetCustomerEmails(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            DataSet ds = du.GetCustomerEmails(query);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n            string query = context.Request[\"query\"];\n            \n            DataSet ds = du.GetCustomerEmails(query);\n            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);\n\n            if (json != null && json.Length > 0)\n"
                }
              }
            },
            "message": {
              "text": "Assignment to ds"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "            string query = context.Request[\"query\"];\n            \n            DataSet ds = du.GetCustomerEmails(query);\n            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);\n\n            if (json != null && json.Length > 0)\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_Tables(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "            string query = context.Request[\"query\"];\n            \n            DataSet ds = du.GetCustomerEmails(query);\n            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);\n\n            if (json != null && json.Length > 0)\n            {\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "            string query = context.Request[\"query\"];\n            \n            DataSet ds = du.GetCustomerEmails(query);\n            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);\n\n            if (json != null && json.Length > 0)\n            {\n"
                }
              }
            },
            "message": {
              "text": "ToJSONSAutocompleteString(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 215,
                "snippet": {
                  "text": "                DataRow row = dt.Rows[i];"
                }
              },
              "contextRegion": {
                "startLine": 212,
                "endLine": 218,
                "snippet": {
                  "text": "            \n            for (int i = 0; i < dt.Rows.Count; i++)\n            {\n                DataRow row = dt.Rows[i];\n                string email = row[0].ToString();\n                sb.Append(\"'\" + email + \"',\");\n            }\n"
                }
              }
            },
            "message": {
              "text": "get_Rows(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 215,
                "snippet": {
                  "text": "                DataRow row = dt.Rows[i];"
                }
              },
              "contextRegion": {
                "startLine": 212,
                "endLine": 218,
                "snippet": {
                  "text": "            \n            for (int i = 0; i < dt.Rows.Count; i++)\n            {\n                DataRow row = dt.Rows[i];\n                string email = row[0].ToString();\n                sb.Append(\"'\" + email + \"',\");\n            }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 215,
                "snippet": {
                  "text": "                DataRow row = dt.Rows[i];"
                }
              },
              "contextRegion": {
                "startLine": 212,
                "endLine": 218,
                "snippet": {
                  "text": "            \n            for (int i = 0; i < dt.Rows.Count; i++)\n            {\n                DataRow row = dt.Rows[i];\n                string email = row[0].ToString();\n                sb.Append(\"'\" + email + \"',\");\n            }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to row"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 216,
                "snippet": {
                  "text": "                string email = row[0].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 213,
                "endLine": 219,
                "snippet": {
                  "text": "            for (int i = 0; i < dt.Rows.Count; i++)\n            {\n                DataRow row = dt.Rows[i];\n                string email = row[0].ToString();\n                sb.Append(\"'\" + email + \"',\");\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "get_Item(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 216,
                "snippet": {
                  "text": "                string email = row[0].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 213,
                "endLine": 219,
                "snippet": {
                  "text": "            for (int i = 0; i < dt.Rows.Count; i++)\n            {\n                DataRow row = dt.Rows[i];\n                string email = row[0].ToString();\n                sb.Append(\"'\" + email + \"',\");\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 216,
                "snippet": {
                  "text": "                string email = row[0].ToString();"
                }
              },
              "contextRegion": {
                "startLine": 213,
                "endLine": 219,
                "snippet": {
                  "text": "            for (int i = 0; i < dt.Rows.Count; i++)\n            {\n                DataRow row = dt.Rows[i];\n                string email = row[0].ToString();\n                sb.Append(\"'\" + email + \"',\");\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "Assignment to email"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 217,
                "snippet": {
                  "text": "                sb.Append(\"'\" + email + \"',\");"
                }
              },
              "contextRegion": {
                "startLine": 214,
                "endLine": 220,
                "snippet": {
                  "text": "            {\n                DataRow row = dt.Rows[i];\n                string email = row[0].ToString();\n                sb.Append(\"'\" + email + \"',\");\n            }\n            \n            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 217,
                "snippet": {
                  "text": "                sb.Append(\"'\" + email + \"',\");"
                }
              },
              "contextRegion": {
                "startLine": 214,
                "endLine": 220,
                "snippet": {
                  "text": "            {\n                DataRow row = dt.Rows[i];\n                string email = row[0].ToString();\n                sb.Append(\"'\" + email + \"',\");\n            }\n            \n            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 217,
                "snippet": {
                  "text": "                sb.Append(\"'\" + email + \"',\");"
                }
              },
              "contextRegion": {
                "startLine": 214,
                "endLine": 220,
                "snippet": {
                  "text": "            {\n                DataRow row = dt.Rows[i];\n                string email = row[0].ToString();\n                sb.Append(\"'\" + email + \"',\");\n            }\n            \n            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));\n"
                }
              }
            },
            "message": {
              "text": "Append(0 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 220,
                "snippet": {
                  "text": "            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));"
                }
              },
              "contextRegion": {
                "startLine": 217,
                "endLine": 223,
                "snippet": {
                  "text": "                sb.Append(\"'\" + email + \"',\");\n            }\n            \n            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));\n            sb.Append(\"],\\n\");\n            sb.Append(\"data:\" + sb.ToString().Substring(sb.ToString().IndexOf('['), (sb.ToString().LastIndexOf(']') - sb.ToString().IndexOf('[')) + 1) + \"\\n}\");\n\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 220,
                "snippet": {
                  "text": "            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));"
                }
              },
              "contextRegion": {
                "startLine": 217,
                "endLine": 223,
                "snippet": {
                  "text": "                sb.Append(\"'\" + email + \"',\");\n            }\n            \n            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));\n            sb.Append(\"],\\n\");\n            sb.Append(\"data:\" + sb.ToString().Substring(sb.ToString().IndexOf('['), (sb.ToString().LastIndexOf(']') - sb.ToString().IndexOf('[')) + 1) + \"\\n}\");\n\n"
                }
              }
            },
            "message": {
              "text": "Substring(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 220,
                "snippet": {
                  "text": "            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));"
                }
              },
              "contextRegion": {
                "startLine": 217,
                "endLine": 223,
                "snippet": {
                  "text": "                sb.Append(\"'\" + email + \"',\");\n            }\n            \n            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));\n            sb.Append(\"],\\n\");\n            sb.Append(\"data:\" + sb.ToString().Substring(sb.ToString().IndexOf('['), (sb.ToString().LastIndexOf(']') - sb.ToString().IndexOf('[')) + 1) + \"\\n}\");\n\n"
                }
              }
            },
            "message": {
              "text": "StringBuilder(0 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 220,
                "snippet": {
                  "text": "            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));"
                }
              },
              "contextRegion": {
                "startLine": 217,
                "endLine": 223,
                "snippet": {
                  "text": "                sb.Append(\"'\" + email + \"',\");\n            }\n            \n            sb = new StringBuilder(sb.ToString().Substring(0, sb.ToString().Length - 1));\n            sb.Append(\"],\\n\");\n            sb.Append(\"data:\" + sb.ToString().Substring(sb.ToString().IndexOf('['), (sb.ToString().LastIndexOf(']') - sb.ToString().IndexOf('[')) + 1) + \"\\n}\");\n\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sb"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 224,
                "snippet": {
                  "text": "            return sb.ToString();"
                }
              },
              "contextRegion": {
                "startLine": 221,
                "endLine": 227,
                "snippet": {
                  "text": "            sb.Append(\"],\\n\");\n            sb.Append(\"data:\" + sb.ToString().Substring(sb.ToString().IndexOf('['), (sb.ToString().LastIndexOf(']') - sb.ToString().IndexOf('[')) + 1) + \"\\n}\");\n\n            return sb.ToString();\n        }\n\n        public string EncodeTicket(string token)\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 224,
                "snippet": {
                  "text": "            return sb.ToString();"
                }
              },
              "contextRegion": {
                "startLine": 221,
                "endLine": 227,
                "snippet": {
                  "text": "            sb.Append(\"],\\n\");\n            sb.Append(\"data:\" + sb.ToString().Substring(sb.ToString().IndexOf('['), (sb.ToString().LastIndexOf(']') - sb.ToString().IndexOf('[')) + 1) + \"\\n}\");\n\n            return sb.ToString();\n        }\n\n        public string EncodeTicket(string token)\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "            string query = context.Request[\"query\"];\n            \n            DataSet ds = du.GetCustomerEmails(query);\n            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);\n\n            if (json != null && json.Length > 0)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to json"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 297,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 294,
                "endLine": 300,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Encode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 297,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 294,
                "endLine": 300,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 297,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 294,
                "endLine": 300,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 297,
                "snippet": {
                  "text": "            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;"
                }
              },
              "contextRegion": {
                "startLine": 294,
                "endLine": 300,
                "snippet": {
                  "text": "\n        public string UpdateCustomerPassword(int customerNumber, string password)\n        {\n            string sql = \"update CustomerLogin set password = '\" + Encoder.Encode(password) + \"' where customerNumber = \" + customerNumber;\n            string output = null;\n            try\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/exploitdebug.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"Machine Name: {0}\", Environment.MachineName);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"UserName: {0}\", Environment.UserName);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"Machine Name: {0}\", Environment.MachineName);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"OS Version: {0}\", Environment.OSVersion);\n"
                }
              }
            },
            "message": {
              "text": "get_MachineName(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/exploitdebug.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"Machine Name: {0}\", Environment.MachineName);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"UserName: {0}\", Environment.UserName);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"Machine Name: {0}\", Environment.MachineName);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"OS Version: {0}\", Environment.OSVersion);\n"
                }
              }
            },
            "message": {
              "text": "AppendFormat(1 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 224,
                "snippet": {
                  "text": "                log.Error(\"Error getting customer details\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 221,
                "endLine": 227,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                log.Error(\"Error getting customer details\", ex);\n                \n                throw new ApplicationException(\"Error getting customer details\", ex);\n            }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/exploitdebug.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"OS Version: {0}\", Environment.OSVersion);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"Machine Name: {0}\", Environment.MachineName);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"OS Version: {0}\", Environment.OSVersion);\n            strBuilder.AppendLine();\n            \n            throw new Exception(strBuilder.ToString());\n"
                }
              }
            },
            "message": {
              "text": "get_OSVersion(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/exploitdebug.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 30,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"OS Version: {0}\", Environment.OSVersion);"
                }
              },
              "contextRegion": {
                "startLine": 27,
                "endLine": 33,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"Machine Name: {0}\", Environment.MachineName);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"OS Version: {0}\", Environment.OSVersion);\n            strBuilder.AppendLine();\n            \n            throw new Exception(strBuilder.ToString());\n"
                }
              }
            },
            "message": {
              "text": "AppendFormat(1 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 38,
                "snippet": {
                  "text": "                        ResponseFile(Request, Response, filename, MapPath(\"~/Downloads/\" + filename), 100);"
                }
              },
              "contextRegion": {
                "startLine": 35,
                "endLine": 41,
                "snippet": {
                  "text": "        \t\t{\n                    try\n                    {\n                        ResponseFile(Request, Response, filename, MapPath(\"~/Downloads/\" + filename), 100);\n                    }\n                    catch (Exception ex)\n                    {\n"
                }
              }
            },
            "message": {
              "text": "ResponseFile(2)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 79,
                "snippet": {
                  "text": "\t                _Response.AddHeader(\"Content-Disposition\", \"attachment;filename=\" + HttpUtility.UrlEncode(_fileName, System.Text.Encoding.UTF8));"
                }
              },
              "contextRegion": {
                "startLine": 76,
                "endLine": 82,
                "snippet": {
                  "text": "\t        \n\t                _Response.AddHeader(\"Connection\", \"Keep-Alive\");\n\t                _Response.ContentType = \"application/octet-stream\";\n\t                _Response.AddHeader(\"Content-Disposition\", \"attachment;filename=\" + HttpUtility.UrlEncode(_fileName, System.Text.Encoding.UTF8));\n\t\t\t\n\t                br.BaseStream.Seek(startBytes, SeekOrigin.Begin);\n\t                int maxCount = (int)Math.Floor((double)((fileLength - startBytes) / pack)) + 1;\n"
                }
              }
            },
            "message": {
              "text": "UrlEncode(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/pathmanipulation.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 79,
                "snippet": {
                  "text": "\t                _Response.AddHeader(\"Content-Disposition\", \"attachment;filename=\" + HttpUtility.UrlEncode(_fileName, System.Text.Encoding.UTF8));"
                }
              },
              "contextRegion": {
                "startLine": 76,
                "endLine": 82,
                "snippet": {
                  "text": "\t        \n\t                _Response.AddHeader(\"Connection\", \"Keep-Alive\");\n\t                _Response.ContentType = \"application/octet-stream\";\n\t                _Response.AddHeader(\"Content-Disposition\", \"attachment;filename=\" + HttpUtility.UrlEncode(_fileName, System.Text.Encoding.UTF8));\n\t\t\t\n\t                br.BaseStream.Seek(startBytes, SeekOrigin.Begin);\n\t                int maxCount = (int)Math.Floor((double)((fileLength - startBytes) / pack)) + 1;\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 566,
                "snippet": {
                  "text": "                da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 563,
                "endLine": 569,
                "snippet": {
                  "text": "            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n                if (ds.Tables[0].Rows.Count == 0)\n                    return null;\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 571,
                "snippet": {
                  "text": "                    return ds;"
                }
              },
              "contextRegion": {
                "startLine": 568,
                "endLine": 574,
                "snippet": {
                  "text": "                if (ds.Tables[0].Rows.Count == 0)\n                    return null;\n                else\n                    return ds;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 34,
                "snippet": {
                  "text": "                lblOutput.Text = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 31,
                "endLine": 37,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                lblOutput.Text = ex.Message;\n            }\n\t\t}\n\t}\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/sqlinjectiondiscovery.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 34,
                "snippet": {
                  "text": "                lblOutput.Text = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 31,
                "endLine": 37,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                lblOutput.Text = ex.Message;\n            }\n\t\t}\n\t}\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/messagedigest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 23,
                "snippet": {
                  "text": "            string result = WeakMessageDigest.GenerateWeakDigest(txtBoxMsg.Text);"
                }
              },
              "contextRegion": {
                "startLine": 20,
                "endLine": 26,
                "snippet": {
                  "text": "\n        public void btnDigest_Click(object sender, EventArgs args)\n        {\n            string result = WeakMessageDigest.GenerateWeakDigest(txtBoxMsg.Text);\n\n            log.Info(string.Format(\"Result for {0} is: {1}\", txtBoxMsg.Text, result));\n            lblResultDigest.Text = result;\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/messagedigest.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 23,
                "snippet": {
                  "text": "            string result = WeakMessageDigest.GenerateWeakDigest(txtBoxMsg.Text);"
                }
              },
              "contextRegion": {
                "startLine": 20,
                "endLine": 26,
                "snippet": {
                  "text": "\n        public void btnDigest_Click(object sender, EventArgs args)\n        {\n            string result = WeakMessageDigest.GenerateWeakDigest(txtBoxMsg.Text);\n\n            log.Info(string.Format(\"Result for {0} is: {1}\", txtBoxMsg.Text, result));\n            lblResultDigest.Text = result;\n"
                }
              }
            },
            "message": {
              "text": "GenerateWeakDigest(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/WeakMessageDigest.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 26,
                "snippet": {
                  "text": "            log.Debug(string.Format(\"Bytes for {0}...\", msg));"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 29,
                "snippet": {
                  "text": "                bytes[i] = GenByte(token);\n            }\n\n            log.Debug(string.Format(\"Bytes for {0}...\", msg));\n            log.Debug(Print(bytes));\n\n            return ascii.GetString(bytes);\n"
                }
              }
            },
            "message": {
              "text": "Format(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/addnewuser.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 22,
                "snippet": {
                  "text": "\t            SecurityQuestion.Text = passwordQuestion;"
                }
              },
              "contextRegion": {
                "startLine": 19,
                "endLine": 25,
                "snippet": {
                  "text": "\t    protected void Page_Load(object sender, EventArgs e)\n\t    {\n\t        if (!Page.IsPostBack)\n\t            SecurityQuestion.Text = passwordQuestion;\n\t    }\n\n\t    protected void CreateAccountButton_Click(object sender, EventArgs e)\n"
                }
              }
            },
            "message": {
              "text": "Read OWASP.WebGoat.NET.AddNewUser.passwordQuestion"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 79,
                "snippet": {
                  "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + "
                }
              },
              "contextRegion": {
                "startLine": 76,
                "endLine": 82,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 449,
                "snippet": {
                  "text": "                da.Fill(ds);"
                }
              },
              "contextRegion": {
                "startLine": 446,
                "endLine": 452,
                "snippet": {
                  "text": "            {\n                MySqlDataAdapter da = new MySqlDataAdapter(sql, connection);\n                DataSet ds = new DataSet();\n                da.Fill(ds);\n\n                if (ds.Tables[0].Rows.Count == 0)\n                    return null;\n"
                }
              }
            },
            "message": {
              "text": "Fill(0)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 454,
                "snippet": {
                  "text": "                    return ds;"
                }
              },
              "contextRegion": {
                "startLine": 451,
                "endLine": 457,
                "snippet": {
                  "text": "                if (ds.Tables[0].Rows.Count == 0)\n                    return null;\n                else\n                    return ds;\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "Return ds"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/headerinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "            lblHeaders.Text = Request.Headers.ToString().Replace(\"&\", \"<br />\");"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "\n\n            //Headers\n            lblHeaders.Text = Request.Headers.ToString().Replace(\"&\", \"<br />\");\n\n            //Cookies\n            ArrayList colCookies = new ArrayList();\n"
                }
              }
            },
            "message": {
              "text": "get_Headers(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/headerinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "            lblHeaders.Text = Request.Headers.ToString().Replace(\"&\", \"<br />\");"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "\n\n            //Headers\n            lblHeaders.Text = Request.Headers.ToString().Replace(\"&\", \"<br />\");\n\n            //Cookies\n            ArrayList colCookies = new ArrayList();\n"
                }
              }
            },
            "message": {
              "text": "ToString(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/headerinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 33,
                "snippet": {
                  "text": "            lblHeaders.Text = Request.Headers.ToString().Replace(\"&\", \"<br />\");"
                }
              },
              "contextRegion": {
                "startLine": 30,
                "endLine": 36,
                "snippet": {
                  "text": "\n\n            //Headers\n            lblHeaders.Text = Request.Headers.ToString().Replace(\"&\", \"<br />\");\n\n            //Cookies\n            ArrayList colCookies = new ArrayList();\n"
                }
              }
            },
            "message": {
              "text": "Replace(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/proxysetup.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "            var name = txtName.Text;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "\t\tprotected void btnReverse_Click(object sender, EventArgs e)\n        {\n        \n            var name = txtName.Text;\n            txtName.Text = \"\";\n            lblOutput.Text = \"Thank you for using WebGoat.NET \" + reverse(name);\n        \n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/proxysetup.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 15,
                "snippet": {
                  "text": "            var name = txtName.Text;"
                }
              },
              "contextRegion": {
                "startLine": 12,
                "endLine": 18,
                "snippet": {
                  "text": "\t\tprotected void btnReverse_Click(object sender, EventArgs e)\n        {\n        \n            var name = txtName.Text;\n            txtName.Text = \"\";\n            lblOutput.Text = \"Thank you for using WebGoat.NET \" + reverse(name);\n        \n"
                }
              }
            },
            "message": {
              "text": "Assignment to name"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/proxysetup.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 17,
                "snippet": {
                  "text": "            lblOutput.Text = \"Thank you for using WebGoat.NET \" + reverse(name);"
                }
              },
              "contextRegion": {
                "startLine": 14,
                "endLine": 20,
                "snippet": {
                  "text": "        \n            var name = txtName.Text;\n            txtName.Text = \"\";\n            lblOutput.Text = \"Thank you for using WebGoat.NET \" + reverse(name);\n        \n        }\n        \n"
                }
              }
            },
            "message": {
              "text": "reverse(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/proxysetup.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 24,
                "snippet": {
                  "text": "            var charArray = s.ToCharArray();"
                }
              },
              "contextRegion": {
                "startLine": 21,
                "endLine": 27,
                "snippet": {
                  "text": "        private string reverse(string s)\n        {\n            //char[] charArray = s.ToCharArray();\n            var charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            return new String(charArray);\n        }\n"
                }
              }
            },
            "message": {
              "text": "ToCharArray(this : return[])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/proxysetup.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 24,
                "snippet": {
                  "text": "            var charArray = s.ToCharArray();"
                }
              },
              "contextRegion": {
                "startLine": 21,
                "endLine": 27,
                "snippet": {
                  "text": "        private string reverse(string s)\n        {\n            //char[] charArray = s.ToCharArray();\n            var charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            return new String(charArray);\n        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to charArray"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/proxysetup.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 26,
                "snippet": {
                  "text": "            return new String(charArray);"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 29,
                "snippet": {
                  "text": "            //char[] charArray = s.ToCharArray();\n            var charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            return new String(charArray);\n        }\n\t\n\t}\n"
                }
              }
            },
            "message": {
              "text": "String(0[] : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/proxysetup.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 26,
                "snippet": {
                  "text": "            return new String(charArray);"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 29,
                "snippet": {
                  "text": "            //char[] charArray = s.ToCharArray();\n            var charArray = s.ToCharArray();\n            Array.Reverse(charArray);\n            return new String(charArray);\n        }\n\t\n\t}\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-1713376481/proxysetup.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 17,
                "snippet": {
                  "text": "            lblOutput.Text = \"Thank you for using WebGoat.NET \" + reverse(name);"
                }
              },
              "contextRegion": {
                "startLine": 14,
                "endLine": 20,
                "snippet": {
                  "text": "        \n            var name = txtName.Text;\n            txtName.Text = \"\";\n            lblOutput.Text = \"Thank you for using WebGoat.NET \" + reverse(name);\n        \n        }\n        \n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 44,
                "snippet": {
                  "text": "            t.Rows.Add(MakeRow(\"Custom Crypto\", CustomCryptoEncrypt(secret)));"
                }
              },
              "contextRegion": {
                "startLine": 41,
                "endLine": 47,
                "snippet": {
                  "text": "            Table t = new Table();\n            t.Width = new Unit(\"100%\");\n            \n            t.Rows.Add(MakeRow(\"Custom Crypto\", CustomCryptoEncrypt(secret)));\n            t.Rows.Add(MakeRow(\"URL Encoded:\", Server.UrlEncode(secret)));\n            t.Rows.Add(MakeRow(\"Base64 Encoded:\", Base64(secret)));\n            t.Rows.Add(MakeRow(\"SHA1 Hashed:\", SHA(secret, WG_Hash.Sha1)));\n"
                }
              }
            },
            "message": {
              "text": "CustomCryptoEncrypt(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 120,
                "snippet": {
                  "text": "            byte[] bytes = Encoding.UTF8.GetBytes(s);"
                }
              },
              "contextRegion": {
                "startLine": 117,
                "endLine": 123,
                "snippet": {
                  "text": "\n        private string CustomCryptoEncrypt(String s)\n        {\n            byte[] bytes = Encoding.UTF8.GetBytes(s);\n            // needs work but you get the point\n            for (int i = 0; i < bytes.Length; i++)\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetBytes(0 : return[])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 120,
                "snippet": {
                  "text": "            byte[] bytes = Encoding.UTF8.GetBytes(s);"
                }
              },
              "contextRegion": {
                "startLine": 117,
                "endLine": 123,
                "snippet": {
                  "text": "\n        private string CustomCryptoEncrypt(String s)\n        {\n            byte[] bytes = Encoding.UTF8.GetBytes(s);\n            // needs work but you get the point\n            for (int i = 0; i < bytes.Length; i++)\n            {\n"
                }
              }
            },
            "message": {
              "text": "Assignment to bytes"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 135,
                "snippet": {
                  "text": "            return Encoding.UTF8.GetString(bytes);"
                }
              },
              "contextRegion": {
                "startLine": 132,
                "endLine": 138,
                "snippet": {
                  "text": "           \n            }\n\n            return Encoding.UTF8.GetString(bytes);\n        }\n    }\n}\n"
                }
              }
            },
            "message": {
              "text": "GetString(0[] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 135,
                "snippet": {
                  "text": "            return Encoding.UTF8.GetString(bytes);"
                }
              },
              "contextRegion": {
                "startLine": 132,
                "endLine": 138,
                "snippet": {
                  "text": "           \n            }\n\n            return Encoding.UTF8.GetString(bytes);\n        }\n    }\n}\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 44,
                "snippet": {
                  "text": "            t.Rows.Add(MakeRow(\"Custom Crypto\", CustomCryptoEncrypt(secret)));"
                }
              },
              "contextRegion": {
                "startLine": 41,
                "endLine": 47,
                "snippet": {
                  "text": "            Table t = new Table();\n            t.Width = new Unit(\"100%\");\n            \n            t.Rows.Add(MakeRow(\"Custom Crypto\", CustomCryptoEncrypt(secret)));\n            t.Rows.Add(MakeRow(\"URL Encoded:\", Server.UrlEncode(secret)));\n            t.Rows.Add(MakeRow(\"Base64 Encoded:\", Base64(secret)));\n            t.Rows.Add(MakeRow(\"SHA1 Hashed:\", SHA(secret, WG_Hash.Sha1)));\n"
                }
              }
            },
            "message": {
              "text": "MakeRow(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 46,
                "snippet": {
                  "text": "            t.Rows.Add(MakeRow(\"Base64 Encoded:\", Base64(secret)));"
                }
              },
              "contextRegion": {
                "startLine": 43,
                "endLine": 49,
                "snippet": {
                  "text": "            \n            t.Rows.Add(MakeRow(\"Custom Crypto\", CustomCryptoEncrypt(secret)));\n            t.Rows.Add(MakeRow(\"URL Encoded:\", Server.UrlEncode(secret)));\n            t.Rows.Add(MakeRow(\"Base64 Encoded:\", Base64(secret)));\n            t.Rows.Add(MakeRow(\"SHA1 Hashed:\", SHA(secret, WG_Hash.Sha1)));\n            t.Rows.Add(MakeRow(\"SHA256 Hashed:\", SHA(secret, WG_Hash.Sha256)));\n            t.Rows.Add(MakeRow(\"Rijndael Encrypted: \", Encypt(secret, key), Color.LightGreen));\n"
                }
              }
            },
            "message": {
              "text": "Base64(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 89,
                "snippet": {
                  "text": "            byte[] bytes = System.Text.ASCIIEncoding.ASCII.GetBytes(s);"
                }
              },
              "contextRegion": {
                "startLine": 86,
                "endLine": 92,
                "snippet": {
                  "text": "        \n        private string Base64(string s)\n        {\n            byte[] bytes = System.Text.ASCIIEncoding.ASCII.GetBytes(s);\n            return System.Convert.ToBase64String(bytes);\n        }\n        \n"
                }
              }
            },
            "message": {
              "text": "GetBytes(0 : return[])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 89,
                "snippet": {
                  "text": "            byte[] bytes = System.Text.ASCIIEncoding.ASCII.GetBytes(s);"
                }
              },
              "contextRegion": {
                "startLine": 86,
                "endLine": 92,
                "snippet": {
                  "text": "        \n        private string Base64(string s)\n        {\n            byte[] bytes = System.Text.ASCIIEncoding.ASCII.GetBytes(s);\n            return System.Convert.ToBase64String(bytes);\n        }\n        \n"
                }
              }
            },
            "message": {
              "text": "Assignment to bytes"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 90,
                "snippet": {
                  "text": "            return System.Convert.ToBase64String(bytes);"
                }
              },
              "contextRegion": {
                "startLine": 87,
                "endLine": 93,
                "snippet": {
                  "text": "        private string Base64(string s)\n        {\n            byte[] bytes = System.Text.ASCIIEncoding.ASCII.GetBytes(s);\n            return System.Convert.ToBase64String(bytes);\n        }\n        \n        private string SHA(string s, WG_Hash hash)\n"
                }
              }
            },
            "message": {
              "text": "ToBase64String(0[] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 90,
                "snippet": {
                  "text": "            return System.Convert.ToBase64String(bytes);"
                }
              },
              "contextRegion": {
                "startLine": 87,
                "endLine": 93,
                "snippet": {
                  "text": "        private string Base64(string s)\n        {\n            byte[] bytes = System.Text.ASCIIEncoding.ASCII.GetBytes(s);\n            return System.Convert.ToBase64String(bytes);\n        }\n        \n        private string SHA(string s, WG_Hash hash)\n"
                }
              }
            },
            "message": {
              "text": "Return"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/encryptvsencode.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 46,
                "snippet": {
                  "text": "            t.Rows.Add(MakeRow(\"Base64 Encoded:\", Base64(secret)));"
                }
              },
              "contextRegion": {
                "startLine": 43,
                "endLine": 49,
                "snippet": {
                  "text": "            \n            t.Rows.Add(MakeRow(\"Custom Crypto\", CustomCryptoEncrypt(secret)));\n            t.Rows.Add(MakeRow(\"URL Encoded:\", Server.UrlEncode(secret)));\n            t.Rows.Add(MakeRow(\"Base64 Encoded:\", Base64(secret)));\n            t.Rows.Add(MakeRow(\"SHA1 Hashed:\", SHA(secret, WG_Hash.Sha1)));\n            t.Rows.Add(MakeRow(\"SHA256 Hashed:\", SHA(secret, WG_Hash.Sha256)));\n            t.Rows.Add(MakeRow(\"Rijndael Encrypted: \", Encypt(secret, key), Color.LightGreen));\n"
                }
              }
            },
            "message": {
              "text": "MakeRow(1)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 313,
                "snippet": {
                  "text": "                log.Error(\"Error updating customer password\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 310,
                "endLine": 316,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                log.Error(\"Error updating customer password\", ex);\n                output = ex.Message;\n            }\n            return output;\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/headerinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 19,
                "snippet": {
                  "text": "                cookie.Value = Request.QueryString[\"Cookie\"];"
                }
              },
              "contextRegion": {
                "startLine": 16,
                "endLine": 22,
                "snippet": {
                  "text": "            if (Request.QueryString[\"Cookie\"] != null)\n            {\n                HttpCookie cookie = new HttpCookie(\"UserAddedCookie\");\n                cookie.Value = Request.QueryString[\"Cookie\"];\n\n                Response.Cookies.Add(cookie);\n            }\n"
                }
              }
            },
            "message": {
              "text": "get_QueryString(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/headerinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 19,
                "snippet": {
                  "text": "                cookie.Value = Request.QueryString[\"Cookie\"];"
                }
              },
              "contextRegion": {
                "startLine": 16,
                "endLine": 22,
                "snippet": {
                  "text": "            if (Request.QueryString[\"Cookie\"] != null)\n            {\n                HttpCookie cookie = new HttpCookie(\"UserAddedCookie\");\n                cookie.Value = Request.QueryString[\"Cookie\"];\n\n                Response.Cookies.Add(cookie);\n            }\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['Cookie'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(0 : return[1])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 78,
                "snippet": {
                  "text": "            return password;"
                }
              },
              "contextRegion": {
                "startLine": 75,
                "endLine": 81,
                "snippet": {
                  "text": "        string getPassword(string email)\n        {\n            string password = du.GetPasswordByEmail(email);\n            return password;\n        }\n\n    }\n"
                }
              }
            },
            "message": {
              "text": "Read password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 20,
                "snippet": {
                  "text": "                LoadCity(Request[\"city\"]);"
                }
              },
              "contextRegion": {
                "startLine": 17,
                "endLine": 23,
                "snippet": {
                  "text": "        protected void Page_Load(object sender, EventArgs e)\n        {\n            if (Request[\"city\"] != null)\n                LoadCity(Request[\"city\"]);\n        }\n\n\t\tvoid LoadCity (String city)\n"
                }
              }
            },
            "message": {
              "text": "get_Item(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 20,
                "snippet": {
                  "text": "                LoadCity(Request[\"city\"]);"
                }
              },
              "contextRegion": {
                "startLine": 17,
                "endLine": 23,
                "snippet": {
                  "text": "        protected void Page_Load(object sender, EventArgs e)\n        {\n            if (Request[\"city\"] != null)\n                LoadCity(Request[\"city\"]);\n        }\n\n\t\tvoid LoadCity (String city)\n"
                }
              }
            },
            "message": {
              "text": "LoadCity(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 26,
                "snippet": {
                  "text": "            lblOutput.Text = \"Here are the details for our \" + city + \" Office\";"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 29,
                "snippet": {
                  "text": "\t\tvoid LoadCity (String city)\n\t\t{\n            DataSet ds = du.GetOffice(city);\n            lblOutput.Text = \"Here are the details for our \" + city + \" Office\";\n            dtlView.DataSource = ds.Tables[0];\n            dtlView.DataBind();\n\t\t}\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/reflectedxss.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 26,
                "snippet": {
                  "text": "            lblOutput.Text = \"Here are the details for our \" + city + \" Office\";"
                }
              },
              "contextRegion": {
                "startLine": 23,
                "endLine": 29,
                "snippet": {
                  "text": "\t\tvoid LoadCity (String city)\n\t\t{\n            DataSet ds = du.GetOffice(city);\n            lblOutput.Text = \"Here are the details for our \" + city + \" Office\";\n            dtlView.DataSource = ds.Tables[0];\n            dtlView.DataBind();\n\t\t}\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "            string returnUrl = Request.QueryString[\"ReturnUrl\"];"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "                \n            Response.Cookies.Add(cookie);\n            \n            string returnUrl = Request.QueryString[\"ReturnUrl\"];\n            \n            if (returnUrl == null) \n                returnUrl = \"/WebGoatCoins/MainPage.aspx\";\n"
                }
              }
            },
            "message": {
              "text": "get_QueryString(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "            string returnUrl = Request.QueryString[\"ReturnUrl\"];"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "                \n            Response.Cookies.Add(cookie);\n            \n            string returnUrl = Request.QueryString[\"ReturnUrl\"];\n            \n            if (returnUrl == null) \n                returnUrl = \"/WebGoatCoins/MainPage.aspx\";\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['ReturnUrl'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/customerlogin.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 67,
                "snippet": {
                  "text": "            string returnUrl = Request.QueryString[\"ReturnUrl\"];"
                }
              },
              "contextRegion": {
                "startLine": 64,
                "endLine": 70,
                "snippet": {
                  "text": "                \n            Response.Cookies.Add(cookie);\n            \n            string returnUrl = Request.QueryString[\"ReturnUrl\"];\n            \n            if (returnUrl == null) \n                returnUrl = \"/WebGoatCoins/MainPage.aspx\";\n"
                }
              }
            },
            "message": {
              "text": "Assignment to returnUrl"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 554,
                "snippet": {
                  "text": "                    string sql = \"select email from CustomerLogin where customerNumber = \" + num;"
                }
              },
              "contextRegion": {
                "startLine": 551,
                "endLine": 557,
                "snippet": {
                  "text": "                {\n                    connection.Open();\n\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + num;\n                    SqliteCommand cmd = new SqliteCommand(sql, connection);\n                    output = (string)cmd.ExecuteScalar();\n                }\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 554,
                "snippet": {
                  "text": "                    string sql = \"select email from CustomerLogin where customerNumber = \" + num;"
                }
              },
              "contextRegion": {
                "startLine": 551,
                "endLine": 557,
                "snippet": {
                  "text": "                {\n                    connection.Open();\n\n                    string sql = \"select email from CustomerLogin where customerNumber = \" + num;\n                    SqliteCommand cmd = new SqliteCommand(sql, connection);\n                    output = (string)cmd.ExecuteScalar();\n                }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 79,
                "snippet": {
                  "text": "            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + "
                }
              },
              "contextRegion": {
                "startLine": 76,
                "endLine": 82,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \"' and password = '\" + \n                         encoded_password + \"';\";\n                        \n            using (SqliteConnection connection = new SqliteConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Read encoded_password"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 210,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 207,
                "endLine": 213,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 210,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 207,
                "endLine": 213,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 210,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 207,
                "endLine": 213,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                output = ex.Message;\n            }\n            return output;\n        }\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 212,
                "snippet": {
                  "text": "            return output;"
                }
              },
              "contextRegion": {
                "startLine": 209,
                "endLine": 215,
                "snippet": {
                  "text": "            {\n                output = ex.Message;\n            }\n            return output;\n        }\n\n        public DataSet GetCustomerDetails(string customerNumber)\n"
                }
              }
            },
            "message": {
              "text": "Return output"
            }
          },
          "kinds": [
            "return",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(0 : return[0])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "                    try\n                    {\n                        //lblOutput.Text = orderNumber;\n                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));\n                        DetailsView1.DataSource = dsOrderDetails.Tables[0];\n                        DetailsView1.DataBind();\n                        //litOrderDetails.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "Parse(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/orders.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 68,
                "snippet": {
                  "text": "                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));"
                }
              },
              "contextRegion": {
                "startLine": 65,
                "endLine": 71,
                "snippet": {
                  "text": "                    try\n                    {\n                        //lblOutput.Text = orderNumber;\n                        DataSet dsOrderDetails = du.GetOrderDetails(int.Parse(orderNumber));\n                        DetailsView1.DataSource = dsOrderDetails.Tables[0];\n                        DetailsView1.DataBind();\n                        //litOrderDetails.Visible = true;\n"
                }
              }
            },
            "message": {
              "text": "GetOrderDetails(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 440,
                "snippet": {
                  "text": "            string sql = \"select Customers.customerName, Orders.customerNumber, Orders.orderNumber, Products.productName, \" + "
                }
              },
              "contextRegion": {
                "startLine": 437,
                "endLine": 443,
                "snippet": {
                  "text": "        public DataSet GetOrderDetails(int orderNumber)\n        {\n\n            string sql = \"select Customers.customerName, Orders.customerNumber, Orders.orderNumber, Products.productName, \" + \n                \"OrderDetails.quantityOrdered, OrderDetails.priceEach, Products.productImage \" + \n                \"from OrderDetails, Products, Orders, Customers where \" + \n                \"Customers.customerNumber = Orders.customerNumber \" + \n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 440,
                "snippet": {
                  "text": "            string sql = \"select Customers.customerName, Orders.customerNumber, Orders.orderNumber, Products.productName, \" + "
                }
              },
              "contextRegion": {
                "startLine": 437,
                "endLine": 443,
                "snippet": {
                  "text": "        public DataSet GetOrderDetails(int orderNumber)\n        {\n\n            string sql = \"select Customers.customerName, Orders.customerNumber, Orders.orderNumber, Products.productName, \" + \n                \"OrderDetails.quantityOrdered, OrderDetails.priceEach, Products.productImage \" + \n                \"from OrderDetails, Products, Orders, Customers where \" + \n                \"Customers.customerNumber = Orders.customerNumber \" + \n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 559,
                "snippet": {
                  "text": "            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 556,
                "endLine": 562,
                "snippet": {
                  "text": "\n        public DataSet GetCustomerEmails(string email)\n        {\n            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 559,
                "snippet": {
                  "text": "            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 556,
                "endLine": 562,
                "snippet": {
                  "text": "\n        public DataSet GetCustomerEmails(string email)\n        {\n            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 559,
                "snippet": {
                  "text": "            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";"
                }
              },
              "contextRegion": {
                "startLine": 556,
                "endLine": 562,
                "snippet": {
                  "text": "\n        public DataSet GetCustomerEmails(string email)\n        {\n            string sql = \"select email from CustomerLogin where email like '\" + email + \"%'\";\n            \n            \n            using (MySqlConnection connection = new MySqlConnection(_connectionString))\n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 115,
                "snippet": {
                  "text": "            string encoded_password = Encoder.Encode(password);"
                }
              },
              "contextRegion": {
                "startLine": 112,
                "endLine": 118,
                "snippet": {
                  "text": "        public bool IsValidCustomerLogin(string email, string password)\n        {\n            //encode password\n            string encoded_password = Encoder.Encode(password);\n            \n            //check email/password\n            string sql = \"select * from CustomerLogin where email = '\" + email + \n"
                }
              }
            },
            "message": {
              "text": "Encode(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/exploitdebug.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 24,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"UserName: {0}\", Environment.UserName);"
                }
              },
              "contextRegion": {
                "startLine": 21,
                "endLine": 27,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"Current Dir: {0}\", Environment.CurrentDirectory);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"UserName: {0}\", Environment.UserName);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"Machine Name: {0}\", Environment.MachineName);\n"
                }
              }
            },
            "message": {
              "text": "get_UserName(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/exploitdebug.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 24,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"UserName: {0}\", Environment.UserName);"
                }
              },
              "contextRegion": {
                "startLine": 21,
                "endLine": 27,
                "snippet": {
                  "text": "            strBuilder.AppendFormat(\"Current Dir: {0}\", Environment.CurrentDirectory);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"UserName: {0}\", Environment.UserName);\n            strBuilder.AppendLine();\n            \n            strBuilder.AppendFormat(\"Machine Name: {0}\", Environment.MachineName);\n"
                }
              }
            },
            "message": {
              "text": "AppendFormat(1 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/-967081456/autocomplete.ashx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "            string query = context.Request[\"query\"];\n            \n            DataSet ds = du.GetCustomerEmails(query);\n            string json = Encoder.ToJSONSAutocompleteString(query, ds.Tables[0]);\n\n            if (json != null && json.Length > 0)\n            {\n"
                }
              }
            },
            "message": {
              "text": "ToJSONSAutocompleteString(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 210,
                "snippet": {
                  "text": "            sb.Append(\"{\\nquery:'\" + query + \"',\\n\");"
                }
              },
              "contextRegion": {
                "startLine": 207,
                "endLine": 213,
                "snippet": {
                  "text": "\n            StringBuilder sb = new StringBuilder();\n\n            sb.Append(\"{\\nquery:'\" + query + \"',\\n\");\n            sb.Append(\"suggestions:[\");\n            \n            for (int i = 0; i < dt.Rows.Count; i++)\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 210,
                "snippet": {
                  "text": "            sb.Append(\"{\\nquery:'\" + query + \"',\\n\");"
                }
              },
              "contextRegion": {
                "startLine": 207,
                "endLine": 213,
                "snippet": {
                  "text": "\n            StringBuilder sb = new StringBuilder();\n\n            sb.Append(\"{\\nquery:'\" + query + \"',\\n\");\n            sb.Append(\"suggestions:[\");\n            \n            for (int i = 0; i < dt.Rows.Count; i++)\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/Encoder.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 210,
                "snippet": {
                  "text": "            sb.Append(\"{\\nquery:'\" + query + \"',\\n\");"
                }
              },
              "contextRegion": {
                "startLine": 207,
                "endLine": 213,
                "snippet": {
                  "text": "\n            StringBuilder sb = new StringBuilder();\n\n            sb.Append(\"{\\nquery:'\" + query + \"',\\n\");\n            sb.Append(\"suggestions:[\");\n            \n            for (int i = 0; i < dt.Rows.Count; i++)\n"
                }
              }
            },
            "message": {
              "text": "Append(0 : this)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/regexdos.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 20,
                "snippet": {
                  "text": "            string userName = txtUsername.Text;"
                }
              },
              "contextRegion": {
                "startLine": 17,
                "endLine": 23,
                "snippet": {
                  "text": "        /// </summary>\n        protected void btnCreate_Click(object sender, EventArgs e)\n        {\n            string userName = txtUsername.Text;\n            string password = txtPassword.Text;\n\n            Regex testPassword = new Regex(userName);\n"
                }
              }
            },
            "message": {
              "text": "get_Text(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/regexdos.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 20,
                "snippet": {
                  "text": "            string userName = txtUsername.Text;"
                }
              },
              "contextRegion": {
                "startLine": 17,
                "endLine": 23,
                "snippet": {
                  "text": "        /// </summary>\n        protected void btnCreate_Click(object sender, EventArgs e)\n        {\n            string userName = txtUsername.Text;\n            string password = txtPassword.Text;\n\n            Regex testPassword = new Regex(userName);\n"
                }
              }
            },
            "message": {
              "text": "Assignment to userName"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 436,
                "snippet": {
                  "text": "            string sql = \"select Customers.customerName, Orders.customerNumber, Orders.orderNumber, Products.productName, \" + "
                }
              },
              "contextRegion": {
                "startLine": 433,
                "endLine": 439,
                "snippet": {
                  "text": "        public DataSet GetOrderDetails(int orderNumber)\n        {\n\n            string sql = \"select Customers.customerName, Orders.customerNumber, Orders.orderNumber, Products.productName, \" + \n                \"OrderDetails.quantityOrdered, OrderDetails.priceEach, Products.productImage \" + \n                \"from OrderDetails, Products, Orders, Customers where \" + \n                \"Customers.customerNumber = Orders.customerNumber \" + \n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 436,
                "snippet": {
                  "text": "            string sql = \"select Customers.customerName, Orders.customerNumber, Orders.orderNumber, Products.productName, \" + "
                }
              },
              "contextRegion": {
                "startLine": 433,
                "endLine": 439,
                "snippet": {
                  "text": "        public DataSet GetOrderDetails(int orderNumber)\n        {\n\n            string sql = \"select Customers.customerName, Orders.customerNumber, Orders.orderNumber, Products.productName, \" + \n                \"OrderDetails.quantityOrdered, OrderDetails.priceEach, Products.productImage \" + \n                \"from OrderDetails, Products, Orders, Customers where \" + \n                \"Customers.customerNumber = Orders.customerNumber \" + \n"
                }
              }
            },
            "message": {
              "text": "Assignment to sql"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/forgotpassword.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 27,
                "snippet": {
                  "text": "            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);"
                }
              },
              "contextRegion": {
                "startLine": 24,
                "endLine": 30,
                "snippet": {
                  "text": "\n        protected void ButtonCheckEmail_Click(object sender, EventArgs e)\n        {\n            string[] result = du.GetSecurityQuestionAndAnswer(txtEmail.Text);\n            \n            if (string.IsNullOrEmpty(result[0]))\n            {\n"
                }
              }
            },
            "message": {
              "text": "GetSecurityQuestionAndAnswer(0 : return[1])"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 551,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 548,
                "endLine": 554,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error getting email by customer number\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 551,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 548,
                "endLine": 554,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error getting email by customer number\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "get_Message(this : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/MySqlDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 551,
                "snippet": {
                  "text": "                output = ex.Message;"
                }
              },
              "contextRegion": {
                "startLine": 548,
                "endLine": 554,
                "snippet": {
                  "text": "            catch (Exception ex)\n            {\n                log.Error(\"Error getting email by customer number\", ex);\n                output = ex.Message;\n            }\n            \n            return output;\n"
                }
              }
            },
            "message": {
              "text": "Assignment to output"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Src/WebGoat/App_Code/DB/SqliteDbProvider.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 280,
                "snippet": {
                  "text": "                log.Error(\"Error adding comment\", ex);"
                }
              },
              "contextRegion": {
                "startLine": 277,
                "endLine": 283,
                "snippet": {
                  "text": "            }\n            catch (Exception ex)\n            {\n                log.Error(\"Error adding comment\", ex);\n                output = ex.Message;\n            }\n            \n"
                }
              }
            },
            "message": {
              "text": "Read ex"
            }
          },
          "kinds": [
            "acquire",
            "resource"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/xpathinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 20,
                "snippet": {
                  "text": "                FindSalesPerson(Request.QueryString[\"state\"]);"
                }
              },
              "contextRegion": {
                "startLine": 17,
                "endLine": 23,
                "snippet": {
                  "text": "        {\n            if (Request.QueryString[\"state\"] != null)\n            {\n                FindSalesPerson(Request.QueryString[\"state\"]);\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "get_QueryString(return)"
            }
          },
          "kinds": [
            "unknown"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/xpathinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 20,
                "snippet": {
                  "text": "                FindSalesPerson(Request.QueryString[\"state\"]);"
                }
              },
              "contextRegion": {
                "startLine": 17,
                "endLine": 23,
                "snippet": {
                  "text": "        {\n            if (Request.QueryString[\"state\"] != null)\n            {\n                FindSalesPerson(Request.QueryString[\"state\"]);\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "get_Item(this['state'] : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/xpathinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 20,
                "snippet": {
                  "text": "                FindSalesPerson(Request.QueryString[\"state\"]);"
                }
              },
              "contextRegion": {
                "startLine": 17,
                "endLine": 23,
                "snippet": {
                  "text": "        {\n            if (Request.QueryString[\"state\"] != null)\n            {\n                FindSalesPerson(Request.QueryString[\"state\"]);\n            }\n        }\n\n"
                }
              }
            },
            "message": {
              "text": "FindSalesPerson(0)"
            }
          },
          "kinds": [
            "call",
            "function"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/xpathinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            XmlNodeList list = xDoc.SelectNodes(\"//salesperson[state='\" + state + \"']\");"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "        {\n            XmlDocument xDoc = new XmlDocument();\n            xDoc.LoadXml(xml);\n            XmlNodeList list = xDoc.SelectNodes(\"//salesperson[state='\" + state + \"']\");\n            if (list.Count > 0)\n            {\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(1 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        },
        {
          "location": {
            "physicalLocation": {
              "artifactLocation": {
                "uri": "Libs/dotnet/1894963386/xpathinjection.aspx.cs",
                "uriBaseId": "%SRCROOT%"
              },
              "region": {
                "startLine": 28,
                "snippet": {
                  "text": "            XmlNodeList list = xDoc.SelectNodes(\"//salesperson[state='\" + state + \"']\");"
                }
              },
              "contextRegion": {
                "startLine": 25,
                "endLine": 31,
                "snippet": {
                  "text": "        {\n            XmlDocument xDoc = new XmlDocument();\n            xDoc.LoadXml(xml);\n            XmlNodeList list = xDoc.SelectNodes(\"//salesperson[state='\" + state + \"']\");\n            if (list.Count > 0)\n            {\n\n"
                }
              }
            },
            "message": {
              "text": "Concat(0 : return)"
            }
          },
          "kinds": [
            "call",
            "function",
            "return"
          ]
        }
      ],
      "taxonomies": [
        {
          "guid": "25F72D7E-8A92-459D-AD67-64853F788765",
          "name": "CWE",
          "organization": "MITRE",
          "shortDescription": {
            "text": "The MITRE Common Weakness Enumeration"
          },
          "taxa": [
            {
              "id": "619"
            },
            {
              "id": "772"
            },
            {
              "id": "359"
            },
            {
              "id": "259"
            },
            {
              "id": "798"
            },
            {
              "id": "79"
            },
            {
              "id": "80"
            },
            {
              "id": "185"
            },
            {
              "id": "730"
            },
            {
              "id": "253"
            },
            {
              "id": "690"
            },
            {
              "id": "82"
            },
            {
              "id": "83"
            },
            {
              "id": "87"
            },
            {
              "id": "692"
            },
            {
              "id": "615"
            },
            {
              "id": "611"
            },
            {
              "id": "579"
            },
            {
              "id": "89"
            },
            {
              "id": "15"
            },
            {
              "id": "113"
            },
            {
              "id": "434"
            },
            {
              "id": "215"
            },
            {
              "id": "489"
            },
            {
              "id": "497"
            },
            {
              "id": "117"
            },
            {
              "id": "22"
            },
            {
              "id": "73"
            },
            {
              "id": "226"
            },
            {
              "id": "396"
            },
            {
              "id": "614"
            },
            {
              "id": "554"
            },
            {
              "id": "77"
            },
            {
              "id": "78"
            },
            {
              "id": "1173"
            },
            {
              "id": "566"
            },
            {
              "id": "916"
            },
            {
              "id": "235"
            },
            {
              "id": "398"
            },
            {
              "id": "476"
            },
            {
              "id": "601"
            },
            {
              "id": "561"
            },
            {
              "id": "1004"
            },
            {
              "id": "11"
            },
            {
              "id": "None"
            },
            {
              "id": "539"
            },
            {
              "id": "328"
            },
            {
              "id": "643"
            }
          ]
        }
      ]
    }
  ]
}